<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simple Blog</title>
  
  <subtitle>SYR</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lotusir.github.io/"/>
  <updated>2019-07-04T15:38:09.887Z</updated>
  <id>https://lotusir.github.io/</id>
  
  <author>
    <name>LotusIR</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排列组合笔记</title>
    <link href="https://lotusir.github.io/2019/07/04/combination/"/>
    <id>https://lotusir.github.io/2019/07/04/combination/</id>
    <published>2019-07-04T14:30:11.000Z</published>
    <updated>2019-07-04T15:38:09.887Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="密码是我学号~（小技巧怎么能分享呢hhhhhhh）" />    <label for="pass">密码是我学号~（小技巧怎么能分享呢hhhhhhh）</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      记录了一些常用的排列组合数方法小技巧在这。
    
    </summary>
    
      <category term="笔记" scheme="https://lotusir.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="排列组合" scheme="https://lotusir.github.io/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>ACM暑期训练赛（HDU08）</title>
    <link href="https://lotusir.github.io/2019/07/04/HDU08/"/>
    <id>https://lotusir.github.io/2019/07/04/HDU08/</id>
    <published>2019-07-04T09:22:32.000Z</published>
    <updated>2019-07-04T15:49:23.887Z</updated>
    
    <content type="html"><![CDATA[<p>2019/7/4 真TM热<br>今天的比赛是英语阅读专场。</p><a id="more"></a><p>比赛地址：<a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2017+Multi-University+Training+Contest+-+Team+8&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">HDU08</a><br>由于是英语阅读专场（<s>星战粉专场</s>）只给做出来的题的题意和题解了。。<s>真的不想翻译</s><br>有多阅读专场？建议阅读H题。</p><h3 id="hdu08"><a class="header-anchor" href="#hdu08">¶</a>HDU08</h3><h4 id="a-army-formations"><a class="header-anchor" href="#a-army-formations">¶</a>A Army Formations</h4><p>数据结构题，不会。</p><h4 id="b-battlestation-operational"><a class="header-anchor" href="#b-battlestation-operational">¶</a>B Battlestation Operational</h4><p>没看，天澜大佬做出来了，不知道有多难。</p><h4 id="c-casual-podracing"><a class="header-anchor" href="#c-casual-podracing">¶</a>C Casual Podracing</h4><p>没看，不翻译了。</p><h4 id="d-death-podracing"><a class="header-anchor" href="#d-death-podracing">¶</a>D Death Podracing</h4><p>没看。</p><h4 id="e-engineering-of-the-clones"><a class="header-anchor" href="#e-engineering-of-the-clones">¶</a>E Engineering of the Clones</h4><p>没看。</p><h4 id="f-fleet-of-the-eternal-throne"><a class="header-anchor" href="#f-fleet-of-the-eternal-throne">¶</a>F Fleet of the Eternal Throne</h4><p>题意：有点难解释，自己看吧。。<br>解题：<s>杭电真喜欢AC自动机</s>把给出的模式串构造AC自动机，AC自动机的节点记录当前字符串的长度，对于给出的X和Y，先把字符串X在AC自动机上跑一遍，记录所有匹配到的节点（包括fail节点，不一定是字符串的结束节点），这些匹配到的节点既是某个模式串的前缀，又是X的子串。再把字符串Y在AC自动机上跑一遍，匹配到已经被标记过的节点时更新最长长度，最后输出即可。<br>这题的输入有点坑，模式串一共1e5行，但模式串的总长又不超过1e5，写输入写了好久。。<br>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    trie *nxt[<span class="number">26</span>];</span><br><span class="line">    trie *fail;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    trie()</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        fail = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">trie *root;</span><br><span class="line"><span class="keyword">int</span> T,n,m,x,y,pos[maxn];</span><br><span class="line"><span class="keyword">char</span> S[maxn],s1[maxn],s2[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;nxt[id] != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p -&gt; nxt[id] -&gt; len = p -&gt; len + <span class="number">1</span>;</span><br><span class="line">            p = p-&gt;nxt[id];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p -&gt; nxt[id] = <span class="keyword">new</span> trie;</span><br><span class="line">            p -&gt; nxt[id] -&gt; len = p -&gt; len + <span class="number">1</span>;</span><br><span class="line">            p = p -&gt; nxt[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;trie*&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    trie *temp,*p;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        p = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p -&gt; nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p == root)</span><br><span class="line">                    p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = p -&gt; fail;</span><br><span class="line">                    <span class="keyword">while</span>(temp)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(temp -&gt; nxt[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        temp = temp -&gt; fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!temp) p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(p -&gt; nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryx</span><span class="params">(<span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    trie *temp;</span><br><span class="line">    <span class="keyword">while</span>(s[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail;</span><br><span class="line">        p = p -&gt; nxt[id];</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>) p = root;</span><br><span class="line">        temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root)</span><br><span class="line">        &#123;</span><br><span class="line">            temp -&gt; flag = <span class="number">1</span>;</span><br><span class="line">            temp = temp -&gt; fail;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryy</span><span class="params">(<span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>,mxlen = <span class="number">0</span>;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    trie *temp;</span><br><span class="line">    <span class="keyword">while</span>(s[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail;</span><br><span class="line">        p = p -&gt; nxt[id];</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>) p = root;</span><br><span class="line">        temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp -&gt; flag == <span class="number">1</span>) mxlen = max(mxlen,temp-&gt;len);</span><br><span class="line">            temp = temp -&gt; fail;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mxlen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">(trie *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p -&gt; nxt[i] != <span class="literal">NULL</span>) Free(p-&gt;nxt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(trie *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p -&gt; nxt[i] != <span class="literal">NULL</span>) reset(p-&gt;nxt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    p -&gt; flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        root = <span class="keyword">new</span> trie;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            gets(S+d);</span><br><span class="line">            Insert(S+d);</span><br><span class="line">            pos[i] = d;</span><br><span class="line">            d += <span class="built_in">strlen</span>(S+d) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getFail();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            reset(root);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            queryx(S+pos[x]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,queryy(S+pos[y]));</span><br><span class="line">        &#125;</span><br><span class="line">        Free(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="g-galaxy-at-war"><a class="header-anchor" href="#g-galaxy-at-war">¶</a>G Galaxy at War</h4><p>没看</p><h4 id="h-hybrid-crystals"><a class="header-anchor" href="#h-hybrid-crystals">¶</a>H Hybrid Crystals</h4><p>题意：给出数组a1,a2,a3…an，同时给出字符数组b1,b2,b3…bn,如果bi是N，那么ai可正可负，如果bi是L，那么ai是正的，如果bi是D，那么ai是负的，给出一个整数k，询问能否从ai中取出若干个使它们的和为k。<br>此外还有一个奇怪的不等式<br>$ai≤∑j=1i−1aj[bj=N]+∑j=1i−1aj[bi=L∩bj=L]+∑j=1i−1aj[bi=D∩bj=D]( 2 ≤ i ≤ n ).$<br>解题：这个不等式保证了相邻的ai至多只会差1，初始状态下只有a1可以构成[-1,1]间所有的整数，此时如果来了一个正数1，那么能构成的值变成了[0,1]，如果来了一个负数1，那么能构成[-2,0]，若是正负1,那么能构成[-2,2]，区间的扩展是连续的，例如对于a1，只有出现一个3才会打断区间的连续性变成[2,4]，也就是只有当a<sub>i+1</sub>=a<sub>i</sub>+2时才会打断连续性，而不等式保证了不会出现这种情况。换句话说，每一个数都只会连续地扩大能够得到的和的范围，因此只要统计出最大负值和最大正值再判断k是否在这个区间呢就可以了。<br>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">200</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,k,a[maxn],psum,nsum;</span><br><span class="line"><span class="keyword">char</span> in;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        psum = <span class="number">0</span>;nsum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">            <span class="keyword">if</span>(in == <span class="string">'L'</span>) psum+=a[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(in == <span class="string">'D'</span>) nsum+=a[i];</span><br><span class="line">            <span class="keyword">else</span>&#123;psum+=a[i];nsum+=a[i];&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k &lt;= psum) <span class="built_in">puts</span>(<span class="string">"yes"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"no"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(-k &lt;= nsum) <span class="built_in">puts</span>(<span class="string">"yes"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"no"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="i-i-am-your-father"><a class="header-anchor" href="#i-i-am-your-father">¶</a>I I am your Father!</h4><p>没看。</p><h4 id="j-jedi-council"><a class="header-anchor" href="#j-jedi-council">¶</a>J Jedi Council</h4><p>没看。</p><h4 id="k-killer-names"><a class="header-anchor" href="#k-killer-names">¶</a>K Killer Names</h4><p>题意：给出两个整数n和m，要求在大小为m的字符集中选出若干个字符，组成两段长度为n的字符串，要求两串字符串中不能有相同的字符（如在第一个字符串中出现了’a’，那么第二个字符串中就不能再出现’a’，但同一个字符串内可以有重复的字符）。<br>题解：排列组合题，学到了新的东西——第二类斯特林数，第二类斯特林数是将m个格子分成n个集合有多少种不同的分法，我准备单独写一篇排列组合的文章了。。<br>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ll T,n,m,fac[<span class="number">3000</span>],c[<span class="number">3000</span>][<span class="number">3000</span>],s[<span class="number">3000</span>][<span class="number">3000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//阶乘</span></span><br><span class="line">    fac[<span class="number">0</span>]=fac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">2000</span>; ++i)</span><br><span class="line">        fac[i] = fac[i<span class="number">-1</span>] * i % mod;</span><br><span class="line">    <span class="comment">//组合数（杨辉三角）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span> || j==i) c[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i<span class="number">-1</span>][j<span class="number">-1</span>]+c[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//斯特林数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2000</span>;i++)</span><br><span class="line">        s[i][i]=<span class="number">1</span>,s[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            s[i][j]=(j*s[i<span class="number">-1</span>][j]+s[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= m - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">            ll tmp = c[m][i] * s[n][i] % mod * fac[i] % mod;</span><br><span class="line">            <span class="keyword">for</span>(ll j = <span class="number">1</span>; j &lt;= m - i; ++j)&#123;</span><br><span class="line">                ans = ans + tmp * c[m-i][j] % mod * s[n][j] % mod * fac[j] % mod;</span><br><span class="line">                ans %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h3><p>题面实在太长了，连补的欲望都没有了。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019/7/4 真TM热&lt;br&gt;
今天的比赛是英语阅读专场。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM自闭日记" scheme="https://lotusir.github.io/categories/ACM%E8%87%AA%E9%97%AD%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="AC自动机" scheme="https://lotusir.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="排列组合" scheme="https://lotusir.github.io/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
      <category term="思维" scheme="https://lotusir.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>线段树的区间修改</title>
    <link href="https://lotusir.github.io/2019/07/04/SegmentChange/"/>
    <id>https://lotusir.github.io/2019/07/04/SegmentChange/</id>
    <published>2019-07-04T07:13:14.000Z</published>
    <updated>2019-07-04T08:02:25.241Z</updated>
    
    <content type="html"><![CDATA[<p>又是线段树相关的内容！这次的文章会介绍线段树的区间修改（包括加减和改值）</p><a id="more"></a><p><br><br><br><font size="5"><strong>在开始区间修改的介绍前，如果你对线段树没有任何了解，请移步<a href="/2019/07/02/SegmentTree/">线段树基础</a>。</strong></font><br><br><br></p><h1>懒惰标记</h1><p>区间修改用到了一个很巧妙的思想——懒惰标记。<br>在某个节点上的懒惰标记，就是它的子节点需要做出的变化，为节点加上懒惰标记后，不需要急于将标记下传，当以后的查询过程或修改过程遍历到它是再进行下传。<br>于是线段树的结构体中又多了一个<code>lazy</code>变量，当然也可以用<code>lazy</code>数组实现。<br><em>本文代码为求和线段树</em></p><h1>下传函数</h1><p>将懒惰标记下传的函数，在修改、查询等过程中用到，记得下传后消除自己的懒惰标记。比较简单，自己理解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//区间改值</span></span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>] = lazy[rt];</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = lazy[rt];</span><br><span class="line">        Sum[rt&lt;&lt;<span class="number">1</span>] = lazy[rt] * (m-l+<span class="number">1</span>);</span><br><span class="line">        Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = lazy[rt] * (r-m);</span><br><span class="line">        lazy[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//区间增减</span></span><br><span class="line">    <span class="comment">/*if(lazy[rt])&#123;</span></span><br><span class="line"><span class="comment">        int m = (l+r) &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">        lazy[rt&lt;&lt;1] += lazy[rt];</span></span><br><span class="line"><span class="comment">        lazy[rt&lt;&lt;1|1] += lazy[rt];</span></span><br><span class="line"><span class="comment">        Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1);</span></span><br><span class="line"><span class="comment">        Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m);</span></span><br><span class="line"><span class="comment">        lazy[rt] = 0;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>区间修改</h1><p>区间修改包含了改值和加减，它的过程与区间查询的过程类似，当要修改的区间完全包含某一节点，直接给该节点打上<code>lazy</code>标记，否则继续拆分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">segupdate</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> lzy)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r)&#123;</span><br><span class="line">        <span class="comment">//区间改值</span></span><br><span class="line">        lazy[rt]=lzy;</span><br><span class="line">        Sum[rt] = (r-l+<span class="number">1</span>) * lzy;</span><br><span class="line">        <span class="comment">//区间加减</span></span><br><span class="line">        <span class="comment">/*lazy[rt]+=lzy;</span></span><br><span class="line"><span class="comment">        sum[rt]+=(r-l+1) * lzy;*/</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;<span class="number">1</span>,lzy);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; m) segupdate(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,lzy);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>完整模版</h1><p>线段树区间修改新增的东西到此结束，但是由于懒惰标记和下传函数的加入，单点修改和查询函数也要做出相应的修改（添加下传函数）。<br>下面给出完整的模版（数组实现求和线段树），不含主函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],Sum[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新当前节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    Sum[rt] = Sum[rt&lt;&lt;<span class="number">1</span>] + Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下传函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//区间改值</span></span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>] = lazy[rt];</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = lazy[rt];</span><br><span class="line">        Sum[rt&lt;&lt;<span class="number">1</span>] = lazy[rt] * (m-l+<span class="number">1</span>);</span><br><span class="line">        Sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = lazy[rt] * (r-m);</span><br><span class="line">        lazy[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//区间增减</span></span><br><span class="line">    <span class="comment">/*if(lazy[rt])&#123;</span></span><br><span class="line"><span class="comment">        int m = (l+r) &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">        lazy[rt&lt;&lt;1] += lazy[rt];</span></span><br><span class="line"><span class="comment">        lazy[rt&lt;&lt;1|1] += lazy[rt];</span></span><br><span class="line"><span class="comment">        Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1);</span></span><br><span class="line"><span class="comment">        Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m);</span></span><br><span class="line"><span class="comment">        lazy[rt] = 0;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        Sum[rt] = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r) <span class="keyword">return</span> Sum[rt];</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) res += query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; m) res += query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 将L的值改为V</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> V,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;Sum[rt]=V;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) update(L,V,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> update(L,V,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">segupdate</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> lzy)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r)&#123;</span><br><span class="line">        <span class="comment">//区间改值</span></span><br><span class="line">        lazy[rt]=lzy;</span><br><span class="line">        Sum[rt] = (r-l+<span class="number">1</span>) * lzy;</span><br><span class="line">        <span class="comment">//区间加减</span></span><br><span class="line">        <span class="comment">/*lazy[rt]+=lzy;</span></span><br><span class="line"><span class="comment">        sum[rt]+=(r-l+1) * lzy;*/</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;<span class="number">1</span>,lzy);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; m) segupdate(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,lzy);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是线段树相关的内容！这次的文章会介绍线段树的区间修改（包括加减和改值）&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构" scheme="https://lotusir.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://lotusir.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU6096-String（AC自动机）</title>
    <link href="https://lotusir.github.io/2019/07/04/HDU6096/"/>
    <id>https://lotusir.github.io/2019/07/04/HDU6096/</id>
    <published>2019-07-04T03:25:38.000Z</published>
    <updated>2019-07-04T07:08:38.683Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6096" target="_blank" rel="noopener">HDU6096</a><br><strong>Problem Description</strong><br>Bob has a dictionary with N words in it.<br>Now there is a list of words in which the middle part of the word has continuous letters disappeared. The middle part does not include the first and last character.<br>We only know the prefix and suffix of each word, and the number of characters missing is uncertain, it could be 0. But the prefix and suffix of each word can not overlap.<br>For each word in the list, Bob wants to determine which word is in the dictionary by prefix and suffix.<br>There are probably many answers. You just have to figure out how many words may be the answer.</p><a id="more"></a><p><strong>Input</strong><br>The first line of the input gives the number of test cases T; T test cases follow.<br>Each test case contains two integer N and Q, The number of words in the dictionary, and the number of words in the list.<br>Next N line, each line has a string Wi, represents the ith word in the dictionary (0&lt;|Wi|≤100000)<br>Next Q line, each line has two string Pi , Si, represents the prefix and suffix of the ith word in the list (0&lt;|Pi|,|Si|≤100000,0&lt;|Pi|+|Si|≤100000)<br>All of the above characters are lowercase letters.<br>The dictionary does not contain the same words.</p><p>Limits<br>T≤5<br>0&lt;N,Q≤100000<br>∑Si+Pi≤500000<br>∑Wi≤500000</p><p><strong>Output</strong><br>For each test case, output Q lines, an integer per line, represents the answer to each word in the list.</p><p><strong>Sample Input</strong><br>1<br>4 4<br>aba<br>cde<br>acdefa<br>cdef<br>a a<br>cd ef<br>ac a<br>ce f</p><p><strong>Sample Output</strong><br>2<br>1<br>1<br>0</p><p>题意：给若干个字符串，进行若干次询问，每次询问给出一个前缀和后缀，问同时有这个前缀和后缀的字符串有几个，前缀与后缀不能重叠。<br>解题：一道构造很巧妙的AC自动机题，首先存下给出的字符串，接着将给出的前缀(s1)和后缀(s2)以s2 + ‘{’ + s1的形式插入字典树，构造AC自动机Fail指针，然后将每个字符串S转换成S + ‘{’ + S的形式在AC自动机上跑，每经过一个结束节点就在这个节点的计数器上加一，不过要注意由于前缀和后缀不能重叠，因此s2+s1的长度不能超过S，最后按照询问的顺序输出结束节点的计数器即可。<br>之所以用’{‘是因为它等于’a’+26容易建树，当然也可以用别的字符。<br>以cd ef的查询为例，他被构造成了&quot;ef{cd&quot;插入了字典树，那么当用cdef{cdef跑AC自动机时就会找到这个子串。<br>如果不用’{'分割，那么ab cd就会匹配到aabcde，显然是不对的。<br>最后是AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    trie *nxt[<span class="number">27</span>];</span><br><span class="line">    trie *fail;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    trie()</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        fail = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">trie *root,*tr[maxn];</span><br><span class="line"><span class="keyword">int</span> T,N,Q,tot;</span><br><span class="line"><span class="built_in">string</span> S[maxn],s1,s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = s[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;nxt[id] != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;nxt[id];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p -&gt; nxt[id] = <span class="keyword">new</span> trie;</span><br><span class="line">            p = p -&gt; nxt[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[tot++] = p;</span><br><span class="line">    p -&gt; len = s.length();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;trie*&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    trie *temp,*p;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        p = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">27</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p -&gt; nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p == root)</span><br><span class="line">                    p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = p -&gt; fail;</span><br><span class="line">                    <span class="keyword">while</span>(temp)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(temp -&gt; nxt[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        temp = temp -&gt; fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!temp) p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(p -&gt; nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    trie *temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> id = s[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail;</span><br><span class="line">        p = p -&gt; nxt[id];</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>) p = root;</span><br><span class="line">        temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;len &lt;= (s.length()<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>) temp-&gt;cnt++;</span><br><span class="line">            temp = temp -&gt; fail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">(trie *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">27</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p -&gt; nxt[i] != <span class="literal">NULL</span>) Free(p-&gt;nxt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        root = <span class="keyword">new</span> trie;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; Q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; S[i];</span><br><span class="line">            S[i] = S[i] + <span class="string">'&#123;'</span> + S[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">            Insert(s2+<span class="string">'&#123;'</span>+s1);</span><br><span class="line">        &#125;</span><br><span class="line">        getFail();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N; ++i) query(S[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i++) <span class="built_in">cout</span> &lt;&lt; tr[i]-&gt;cnt&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        Free(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6096&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU6096&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;br&gt;
Bob has a dictionary with N words in it.&lt;br&gt;
Now there is a list of words in which the middle part of the word has continuous letters disappeared. The middle part does not include the first and last character.&lt;br&gt;
We only know the prefix and suffix of each word, and the number of characters missing is uncertain, it could be 0. But the prefix and suffix of each word can not overlap.&lt;br&gt;
For each word in the list, Bob wants to determine which word is in the dictionary by prefix and suffix.&lt;br&gt;
There are probably many answers. You just have to figure out how many words may be the answer.&lt;/p&gt;
    
    </summary>
    
      <category term="ACM解题报告" scheme="https://lotusir.github.io/categories/ACM%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="AC自动机" scheme="https://lotusir.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="字符串" scheme="https://lotusir.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://lotusir.github.io/2019/07/03/UnionFind/"/>
    <id>https://lotusir.github.io/2019/07/03/UnionFind/</id>
    <published>2019-07-03T14:31:16.000Z</published>
    <updated>2019-07-03T16:03:50.646Z</updated>
    
    <content type="html"><![CDATA[<h1>并查集</h1><p>并查集是一种数据结构，用于快速合并多个集合以及查询两个节点是否在同一个集合中。</p><a id="more"></a><hr><h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2><p>思考一个简单的问题：有若干个点，每一次将其中两点连起来，若干次操作后，询问任意两点是否被联通。这样的问题要怎么解决呢？<br><s>废话，当然就是要依靠本文下面将介绍的并查集的算法啦！</s></p><h2 id="思考问题"><a class="header-anchor" href="#思考问题">¶</a>思考问题</h2><p>对于这样的问题，显然我们可以直接将两点相连，但如果这么做，询问时就会遇到麻烦。DFS?BFS?当点的数目非常多时，这么做的复杂度似乎太高了。</p><h2 id="并查集的作用"><a class="header-anchor" href="#并查集的作用">¶</a>并查集的作用</h2><p>顾名思义，并查集主要有两个作用，“并”和“查”。<br>“并”，就是将两个集合合并到一起；“查”就是是查询两点是否在同一集合中。它的主要作用就是用来解决形如引言中那样的问题。<br>并查集采用的是一种类树形结构，那么为什么要采用类树形结构呢？因为无论是合并还是查询，树形结构都很方便，也很快。<br>大家知道，一棵k叉树的查询复杂度是O(logk(n))，除非k等于一，否则查询的速度是非常可观的。同时，要合并两棵树也非常容易——只要将两棵树的根直接相连就可以了。</p><h2 id="并查集的结构体实现"><a class="header-anchor" href="#并查集的结构体实现">¶</a>并查集的结构体实现</h2><p>并查集既可以用结构体实现，也可以用数组实现，这里首先给出结构体的实现和讲解，文末给出数组实现，留给读者自己思<s>抄</s>考<s>写</s>。</p><h3 id="节点的定义"><a class="header-anchor" href="#节点的定义">¶</a>节点的定义</h3><p>首先是并查集节点的定义，之所以说并查集是一种类树形结构，是因为它与树形结构有所不同，它的节点指针方向是与树相反的。树形结构的指针方向，由父节点指向子节点，而并查集节点的指针方向则由子节点指向父节点。（可以把并查集的这种数据结构看做一棵倒着的树）。<br>所以，并查集的结构体非常简单，只需要一个指向父节点的指针以及原始数据即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//父节点</span></span><br><span class="line">    node *father = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路径压缩"><a class="header-anchor" href="#路径压缩">¶</a>路径压缩</h3><p>在开始具体代码的实现前，我们来理一理逻辑。<br>要怎么合并两棵树？连接两棵树的根节点即可。<br>要怎么连接两棵树的根节点呢？很简单，让某一个根节点的父亲指针指向另一个就行了，不过在这之前我们必须要先找到他们的根节点。<br>因此下面会首先给出寻找根节点的代码实现，那么路径压缩又是什么呢？<br>我们知道，一棵树的深度越浅，我们寻找根节点的效率也就越高，最优的情况下是怎样的呢？所有的节点都紧紧围绕着根节点<s>就像全中国人民紧密团结在习主席周围</s>。要单独进行这样的优化比较浪费时间，因此我们可以在寻根的过程中一并递归处理，当然这样并不能保证所有节点直接连接根节点，但已经足够紧密了。</p><h3 id="并查集的寻根"><a class="header-anchor" href="#并查集的寻根">¶</a>并查集的寻根</h3><p>知道路径压缩以后，我们可以开始寻找根节点了。<br>寻根过程很简单，一路沿着某一节点搜索父节点指针，直到没有父节点或者父节点是其自身（这两种情况是等价的，与代码实现有关）就可以了。那么路径压缩呢？只要将寻根过程碰到的所有节点的父指针直接指向根节点就可以了，这个操作可以用递归的方式简单实现。<br>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node* <span class="title">FindRoot</span><span class="params">(node *a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a-&gt;father == <span class="literal">NULL</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a-&gt;father = FindRoot(a-&gt;father);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集的合并"><a class="header-anchor" href="#并查集的合并">¶</a>并查集的合并</h3><p>合并过程在之前就已经说过了，对于两个节点，如果根节点不同，将一个的根节点的父亲指针指向另一个根节点，如果相同，那么不需要进行合并操作。因为已经有了寻根的函数，合并的实现就变得非常简单，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(node *from,node *to)</span></span>&#123;</span><br><span class="line">    node *f1 = FindRoot(from),*f2 = FindRoot(to);</span><br><span class="line">    <span class="keyword">if</span>(f1 == f2) <span class="keyword">return</span>;</span><br><span class="line">    f2-&gt;father=f1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题及数组实现"><a class="header-anchor" href="#例题及数组实现">¶</a>例题及数组实现</h2><p>解释完并查集的结构体实现，那么又到了喜闻乐见的模版和例题环节了，模版中用数组实现了并查集。<br>例题：<a href="https://vjudge.net/problem/HDU-1232" target="_blank" rel="noopener">HDU1232</a><br>题意：给出若干个点和若干条边，询问要将整张图联通起来，至少还需要几条边。<br>解题思路：这是一道模版题，时间很充裕，用并查集可以简单得出结果。步骤如下<br>1.对于给出的每一条边，对边的两个端点进行“并”的操作。<br>2.完成第1步后，整张图被分为了多个互相之间不连通的集合，要让整张图连通，需要的边数就是集合数减一。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1500</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M,father[maxn],a,b,vis[maxn],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[a]==a) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> father[a]=Find(father[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1=Find(a),f2=Find(b);</span><br><span class="line">    father[f2] = f1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) father[i]=i;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用于加速输入输出，忽视就行了</span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; N)&#123;</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            Union(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = Find(i);</span><br><span class="line">            <span class="keyword">if</span>(!vis[tmp])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                vis[tmp]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>并查集的介绍到此结束，这是一种比较简单的数据结构，在Kruscal算法中会用到并查集的算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;并查集&lt;/h1&gt;
&lt;p&gt;并查集是一种数据结构，用于快速合并多个集合以及查询两个节点是否在同一个集合中。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构" scheme="https://lotusir.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="并查集" scheme="https://lotusir.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>置顶</title>
    <link href="https://lotusir.github.io/2019/07/03/top/"/>
    <id>https://lotusir.github.io/2019/07/03/top/</id>
    <published>2019-07-03T12:04:07.000Z</published>
    <updated>2019-07-04T07:55:03.009Z</updated>
    
    <content type="html"><![CDATA[<p>大佬队友的博客 <a href="https://shu-ssyze.github.io/" target="_blank" rel="noopener">SHU-SSYZE</a></p><hr><p>本博客会不定时更新一些ACM的算法和自闭日记，也有可能会更新些别的吧，上面是大佬队友的博客哦~<br>本博客大部分模版都会上传本人github的仓库，可以自行阅览。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大佬队友的博客 &lt;a href=&quot;https://shu-ssyze.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SHU-SSYZE&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本博客会不定时更新一些ACM的算法和自闭日记，也有可能会更新些别的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线段树基础</title>
    <link href="https://lotusir.github.io/2019/07/02/SegmentTree/"/>
    <id>https://lotusir.github.io/2019/07/02/SegmentTree/</id>
    <published>2019-07-02T14:54:23.000Z</published>
    <updated>2019-07-04T07:59:24.710Z</updated>
    
    <content type="html"><![CDATA[<h1>线段树</h1><p>线段树是一种树形数据结构，用于快速统计和修改区间上的统计量。</p><a id="more"></a><h2 id="线段树能做什么？"><a class="header-anchor" href="#线段树能做什么？">¶</a>线段树能做什么？</h2><p>线段树是一种完全二叉树，建树的时间复杂度为O(nlogn)，查询以及修改的复杂度都是O(logn)，可以高效的查询和修改区间统计量。</p><h2 id="线段树的组成"><a class="header-anchor" href="#线段树的组成">¶</a>线段树的组成</h2><p>线段树的每一个节点上隐式地存储着这个节点所“掌管”的区间，显式地存储着节点所“掌管”区间上的某一或某些统计量。<br>需要注意的是，这些统计量必须满足区间加法（如区间最大值是子区间最大值中的最大值，区间和为子区间和的和等），众数、最长上升子序列等不符合区间加法。<br>如果要用结构体实现，它的节点定义将会是这样的:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    node *ls,*rs; <span class="comment">//ls为节点左子节点的指针，rs为右子节点的指针</span></span><br><span class="line">    <span class="keyword">int</span> sum,mx; <span class="comment">//统计量，常用的是区间和以及区间最值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，如果给定一个数组a1,a2…an,以[1,n]为范围建立线段树，那么根节点所掌管的区间（这里的区间是指数组下标，而不是数字范围）就是[1,n]，而其左子节点掌管的区间是[1,n/2],右子节点掌管的区间是[n/2+1,n]。以此类推可以知道每一个节点所掌管的区间，这也就是为什么我说每一个节点上隐式地存储着这个节点所“掌管”的区间的原因。<br>以区间[1,10]为例，一棵建好的线段树每一个节点所掌管的区间情况如下图所示：<br><img src="https://github.com/LotusIR/IMG/blob/master/segmenttree.png?raw=true" alt="avator"></p><h2 id="线段树的结构体实现"><a class="header-anchor" href="#线段树的结构体实现">¶</a>线段树的结构体实现</h2><p>线段树可以用结构体和指针来实现，也可以用数组来实现，结构体的实现较为容易理解，因此本文将先用结构体来实现线段树，在本文最后会给出数组的实现方法。</p><h3 id="区间加法"><a class="header-anchor" href="#区间加法">¶</a>区间加法</h3><p>用一个节点两个子节点的统计量来更新自己的统计量。具体见代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(node *rt)</span></span>&#123;</span><br><span class="line">    rt-&gt;mx = max(rt-&gt;ls-&gt;mx,rt-&gt;rs-&gt;mx);</span><br><span class="line">    rt-&gt;sum = rt-&gt;ls-&gt;sum + rt-&gt;rs-&gt;sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数在构造和修改值的过程中都会用到。</p><h3 id="线段树的构造"><a class="header-anchor" href="#线段树的构造">¶</a>线段树的构造</h3><p>线段树的构造是一个递归建树的过程，这里直接贴上代码，边读代码边解释。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先解释一下这5个参数</span></span><br><span class="line"><span class="comment">//[L,R]是建立线段树所依赖的数组范围，在递归过程中不变</span></span><br><span class="line"><span class="comment">//rt是当前递归到的指针，[l,r]是当前指针所掌管的区间，这3个变量将作为状态在递归过程中传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,node *rt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果当前指针掌管的范围只有一个元素，直接赋值并返回</span></span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;rt -&gt; sum = a[l];rt -&gt; mx = a[r];<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">//找到区间的中点</span></span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//递归构造左子树和右子树</span></span><br><span class="line">    build(L,R,l,m,rt-&gt;ls);</span><br><span class="line">    build(L,R,m+<span class="number">1</span>,r,rt-&gt;rs);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主函数中呼叫构造函数时的初始状态通常为<code>build(1,N,1,N,root)</code>。</p><h3 id="线段树的修改"><a class="header-anchor" href="#线段树的修改">¶</a>线段树的修改</h3><p>线段树的修改步骤大致分为两步：<br>1.从根节点开始查找我要修改的值所在的叶节点。（没有子节点的节点称为叶节点）<br>2.修改叶节点，沿着查找路径递归更新与该叶节点相连的所有节点。<br>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再来解释一下这5个参数</span></span><br><span class="line"><span class="comment">//P是我要修改的值所在的位置，V是我要将其修改为的值</span></span><br><span class="line"><span class="comment">//l,r,rt的含义与build中相同</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> P,<span class="keyword">int</span> V,<span class="keyword">int</span> l,<span class="keyword">int</span> r,node *rt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//找到了目标叶节点，更新叶节点的值，显然此时l=r=P</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;rt-&gt;sum=V;rt-&gt;mx=V;<span class="keyword">return</span>&#125;;</span><br><span class="line">    <span class="comment">//同样找出区间中点</span></span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果目标叶节点在区间左半，向左子树找，否则向右子树找</span></span><br><span class="line">    <span class="keyword">if</span>(P&lt;=m) update(P,V,l,m,rt-&gt;ls);</span><br><span class="line">    <span class="keyword">else</span> update(P,V,m+<span class="number">1</span>,r,rt-&gt;rs);</span><br><span class="line">    <span class="comment">//递归更新与被修改的叶节点相连的所有节点</span></span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主函数中呼叫时的方式是<code>update(P,V,1,N,root)</code>其中P、V的含义见代码注释。</p><h3 id="线段树的查询"><a class="header-anchor" href="#线段树的查询">¶</a>线段树的查询</h3><p>到了最重要的查询步骤了，查询最值与查询区间和的方法大同小异。<br>从根节点开始向下搜索，如果要查询的区间完全包含（可以相等）某一节点所掌管的区间，将这个区间的统计量加入到最终结果中；如果要查询的区间不能完全包含某一节点所掌管的区间，继续拆分这个区间直到要查询的区间能够完全包含它。<br>具体见代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询最值</span></span><br><span class="line"><span class="comment">//[L,R]是要查询的区间</span></span><br><span class="line"><span class="comment">//l,r,rt的含义与之前相同</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querymx</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,node *rt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果查询区间完全包含当前节点所掌管的区间，返回最大值</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r) <span class="keyword">return</span> rt-&gt;mx;</span><br><span class="line">    <span class="comment">//初始化最大值为负无穷</span></span><br><span class="line">    <span class="keyword">int</span> res = -inf;</span><br><span class="line">    <span class="comment">//求出线段中点</span></span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//L&lt;=m说明要查询的区间可以继续往左子树拆分</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) res = max(res,querymx(L,R,l,m,rt-&gt;ls));</span><br><span class="line">    <span class="comment">//R&gt;=m+1说明要查询的区间可以继续往右子树拆分</span></span><br><span class="line">    <span class="keyword">if</span>(R &gt;= m+<span class="number">1</span>) res = max(res,querymx(L,R,m+<span class="number">1</span>,r,rt-&gt;rs));</span><br><span class="line">    <span class="comment">//最终得出结果</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在上述代码中<code>L&lt;=m</code>和<code>R&gt;=m+1</code>并不是if和else的关系，一个线段可以同时既可以往左拆分也可以往右拆分（例如要查询的区间是[4,6]而当前节点掌管的区间是[1,10]），但2种情况至少成立1种（否则L就会大于R），因此-inf并不会被计算到最终结果中去。<br>查询区间和的方法类似，只要进行简单修改就可以了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,node *rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r) <span class="keyword">return</span> rt-&gt;sum;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) res += querysum(L,R,l,m,rt-&gt;ls);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;= m+<span class="number">1</span>) res += querysum(L,R,m+<span class="number">1</span>,r,rt-&gt;rs);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实只是改变了统计量的“区间加法”部分的代码，注意此时res只能被初始化为0。</p><h2 id="线段树的数组实现"><a class="header-anchor" href="#线段树的数组实现">¶</a>线段树的数组实现</h2><p>说明完线段树的结构体实现，接下来就是线段树的数组实现了，大部分代码与结构体实现类似，只是把节点抽象到了统计量数组的下标上，此时对于任意一个节点$rt$，它的左子节点是$rt * 2$,它的右子节点是$rt * 2+1$,个人习惯用<code>rt&lt;&lt;1</code>表示$rt * 2$,用<code>rt&lt;&lt;1|1</code>表示$rt * 2+1$。<br>数组实现线段树的方法代码较为简洁，但理解起来稍有些抽象。<br>这里是一道例题：<a href="https://vjudge.net/problem/HDU-1754" target="_blank" rel="noopener">HDU1754</a><br>以下给出完整的AC代码（数组实现线段树的模版）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> N,M,mark[maxn],Max[maxn&lt;&lt;<span class="number">2</span>]; <span class="comment">//数组要开到区间长度的4倍确保空间够用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新当前节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    Max[rt] = max(Max[rt&lt;&lt;<span class="number">1</span>],Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;Max[rt] = mark[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r) <span class="keyword">return</span> Max[rt];</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) res = max(res,query(L,R,l,m,rt&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(R &gt; m) res = max(res,query(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 将L的值改为V</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> V,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;Max[rt]=V;<span class="keyword">return</span>;&#125;;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= m) update(L,V,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> update(L,V,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M) != EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;mark[i]);</span><br><span class="line">        build(<span class="number">1</span>,N,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c%d%d"</span>,&amp;c,&amp;a,&amp;b);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'Q'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(a,b,<span class="number">1</span>,N,<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">else</span> update(a,b,<span class="number">1</span>,N,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读者可以结合注释与前文结构体实现的代码进行对照理解。</p><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>又一个数据结构写完了，当然以后还会更新线段树的加强版：主席树、红黑树等，敬请期待咯~<br>更新了区间修改的内容，欢迎阅读:<a href="/2019/07/04/SegmentChange">线段树区间修改</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;线段树&lt;/h1&gt;
&lt;p&gt;线段树是一种树形数据结构，用于快速统计和修改区间上的统计量。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构" scheme="https://lotusir.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://lotusir.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>模版</title>
    <link href="https://lotusir.github.io/2019/07/02/Template/"/>
    <id>https://lotusir.github.io/2019/07/02/Template/</id>
    <published>2019-07-02T11:00:44.000Z</published>
    <updated>2019-07-05T11:19:54.727Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="密码还是我的学号o(∩_∩)o" />    <label for="pass">密码还是我的学号o(∩_∩)o</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      存放ACM模版的地方
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>素数相关</title>
    <link href="https://lotusir.github.io/2019/07/02/prime/"/>
    <id>https://lotusir.github.io/2019/07/02/prime/</id>
    <published>2019-07-02T11:00:44.000Z</published>
    <updated>2019-07-02T13:51:16.640Z</updated>
    
    <content type="html"><![CDATA[<h1>素数</h1><p>素数，就是因数只有1和自己的数，本文将介绍一些素数相关的内容。</p><a id="more"></a><hr><h2 id="素数筛"><a class="header-anchor" href="#素数筛">¶</a>素数筛</h2><p>一种快速找出一定范围内所有素数的方法。</p><h3 id="埃拉托斯特尼筛法"><a class="header-anchor" href="#埃拉托斯特尼筛法">¶</a>埃拉托斯特尼筛法</h3><p>简称埃氏筛或埃筛，是一种十分好写也十分容易理解的素数筛法。<br>原理十分简单，如果一个数是素数，那么他的任意倍数一定不是素数。<br>因此我们首先假设所有数都是素数，接着从2开始找，2是素数，那么把它的所有倍数标记为非素数，从小到大开始筛，这样当我们找到一个数还没有被标记为非素数的话，它一定是一个素数，再次标记它的所有倍数为非素数，依此循环。<br>下面给出代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e3</span>;<span class="comment">//只筛到maxn以内的质数</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> not_prime[maxn],prime[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxn; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!not_prime[i])&#123;</span><br><span class="line">            prime[cnt++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= maxn; j+=i)</span><br><span class="line">                not_prime[j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉筛法"><a class="header-anchor" href="#欧拉筛法">¶</a>欧拉筛法</h3><p>又名快速素数筛或欧筛，一听名字就知道它很快。<br>那么为什么欧拉筛法比埃氏筛快呢，或者说，埃氏筛法哪里慢了？<br>观察埃氏筛法，我们发现，同一个合数，它有可能被多个素数筛到，比如6被2筛到之后又会被3筛到，这就造成了多余的运算。而欧拉筛避免了这一点，在欧拉筛中每一个合数都只会被筛到一次，实现了线性复杂度O(n)。</p><h4 id="过程简述"><a class="header-anchor" href="#过程简述">¶</a>过程简述</h4><p>欧筛的过程简述如下：<br>1.与埃筛一样，将所有数假设为素数。<br>2.从2开始遍历，如果遇到一个素数，那么将这个素数加入素数表。<br>3.无论遇到的是不是素数，都遍历素数表（为了方便表述，设这个数为N，当前遍历到的素数为P），将$N*P$标记为非素数，如果此时N能够被P整除，那么结束素数表的遍历，否则继续遍历素数表。</p><hr><h4 id="过程模拟"><a class="header-anchor" href="#过程模拟">¶</a>过程模拟</h4><p>为了方便理解，这里给出10以内的素数的遍历过程。（已经理解的跳过分割线内的内容）</p><p>初始状态：<br><strong>not_prime数组</strong>(not_prime数值为0说明是素数)</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p><strong>素数表为空</strong><br>遍历到2时，2是素数，将2加入素数表，遍历素数表，$2*2=4$标记为非素数，因为2能整除2，结束素数表的遍历。<br>此时状态：<br><strong>not_prime数组</strong>(not_prime数值为0说明是素数)</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p><strong>素数表</strong></p><table><thead><tr><th>2</th></tr></thead><tbody></tbody></table><p>接着遍历3，3是素数，将3加入素数表，遍历素数表会将6和9标记为非素数。<br>此时状态：<br><strong>not_prime数组</strong>(not_prime数值为0说明是素数)</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p><strong>素数表</strong></p><table><thead><tr><th>2</th><th>3</th></tr></thead><tbody></tbody></table><p>遍历4，4不是素数，不加入素数表，遍历素数表，会将8标记为素数（2能整除4，因此只遍历到2就结束素数表的遍历）<br>此时状态：<br><strong>not_prime数组</strong>(not_prime数值为0说明是素数)</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p><strong>素数表</strong></p><table><thead><tr><th>2</th><th>3</th></tr></thead><tbody></tbody></table><p>遍历5，5是素数，将5加入素数表，遍历素数表会把10，15，25标记为非素数。<br>此时状态：<br><strong>not_prime数组</strong>(not_prime数值为0说明是素数)</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p><strong>素数表</strong></p><table><thead><tr><th>2</th><th>3</th><th>5</th></tr></thead><tbody></tbody></table><p>实际上至此10以内的所有素数已经全部被筛出了，接着遍历6会将12标记为非素数，而遍历7会把14、21、35、49标记为非素数……<br>在这个过程中，每一个合数都只会被筛到一次，证明略。</p><hr><h4 id="具体代码"><a class="header-anchor" href="#具体代码">¶</a>具体代码</h4><p>给出代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> not_prime[maxn],prime[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    not_prime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxn; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!not_prime[i])</span><br><span class="line">            prime[tot++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; prime[j]*i &lt;= maxn; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = prime[j]*i;</span><br><span class="line">            not_prime[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于埃氏筛，欧拉筛法更快，且没有其他缺点，因此实际上只要记住欧拉筛就可以了<s>埃氏筛比较好记就是了</s></p><h2 id="分解素因数"><a class="header-anchor" href="#分解素因数">¶</a>分解素因数</h2><p>将一个大合数N分解成素因数的乘积，方法如下：<br>1.用欧拉筛或埃氏筛得到素数表。<br>2.从素数表中最小的素数P开始，如果N能够被P整除，那么将N /= P，并将P作为素因数的指数加一，重复这个步骤直到N不能被P整除。<br>3.用下一个较大的素数重复第2步，直到取出大于$sqrt(N)$的第一个素数。<br>4.如果N已经被除到了1，那么素因数分解完毕，如果N还没有被除到1，那么N最终的值是它自己的最后一个素因数。</p><p>用途较少，这里给出一道可用这种方法解答的例题：<a href="http://acmoj.shu.edu.cn/problem/2/" target="_blank" rel="noopener">SHUOJ2</a><br><s><em>只能用校内网连上，连不上就算了。。</em></s><br>题意简述：给定正整数A,B（1&lt;=A,B&lt;=1000）,求$GCD(A,B^B)$。<br>解题思路：由于B较大，显然不能直接求出$B<sup>B$再求GCD，因此对A和B进行素因数分解，再将B的每一个素因数的指数乘以B，就能得出$B</sup>B$的素因数，A和B的公共素因数的乘积就是所求的答案。<br>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> not_prime[maxn],prime[maxn],cnt[<span class="number">2</span>][<span class="number">35</span>],A,B;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    not_prime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxn; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!not_prime[i])</span><br><span class="line">            prime[tot++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;tot &amp;&amp; prime[j]*i &lt;= maxn; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = prime[j]*i;</span><br><span class="line">            not_prime[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速幂</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res = res * x;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = x * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getprime();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">int</span> t = B;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(A % prime[i] == <span class="number">0</span>)&#123;cnt[<span class="number">0</span>][i]++;A /= prime[i];&#125;</span><br><span class="line">            <span class="keyword">while</span>(B % prime[i] == <span class="number">0</span>)&#123;cnt[<span class="number">1</span>][i]++;B /= prime[i];&#125;</span><br><span class="line">            cnt[<span class="number">1</span>][i] *= t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; i++)&#123;</span><br><span class="line">            ans *= qpow(prime[i],min(cnt[<span class="number">0</span>][i],cnt[<span class="number">1</span>][i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题还有另一种做法,之后<s>可能</s>会补上。<br>此外，有一件很奇怪的事就是当maxn取某些值的时候，prime[0]会莫名其妙变成1，暂时没有发现原因。。</p><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>素数相关的算法和思想还是比较重要的，HDU的多校赛经常出现GCD等相关问题。<s>今天的训练赛打的真是自闭</s></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;素数&lt;/h1&gt;
&lt;p&gt;素数，就是因数只有1和自己的数，本文将介绍一些素数相关的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="素数筛" scheme="https://lotusir.github.io/tags/%E7%B4%A0%E6%95%B0%E7%AD%9B/"/>
    
      <category term="分解因数" scheme="https://lotusir.github.io/tags/%E5%88%86%E8%A7%A3%E5%9B%A0%E6%95%B0/"/>
    
      <category term="素数" scheme="https://lotusir.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ACM暑期训练赛（HDU07）</title>
    <link href="https://lotusir.github.io/2019/07/02/HDU07/"/>
    <id>https://lotusir.github.io/2019/07/02/HDU07/</id>
    <published>2019-07-02T08:04:58.000Z</published>
    <updated>2019-07-04T07:55:16.422Z</updated>
    
    <content type="html"><![CDATA[<p>2019/07/02 阴有雨<br>又是自闭的一天<br>2019/07/03 晴？阴？<br>更新了B、C、H的题解</p><a id="more"></a><p><strong>比赛地址：</strong><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2017+Multi-University+Training+Contest+-+Team+7&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">HDU07</a></p><h1>HDU07</h1><h2 id="a-all-kill"><a class="header-anchor" href="#a-all-kill">¶</a>A All Kill</h2><p>（待补）</p><h2 id="b-build-a-tree"><a class="header-anchor" href="#b-build-a-tree">¶</a>B Build a Tree</h2><p>题意：给出一棵有N个节点的完全K叉树，求这棵树所有子树大小异或后的答案。<br>解题：待补，考虑将子树分为完整的K叉树和不完整的K叉树，不完整的k叉树至多只有一棵，单独处理这棵树，从树的最底层向上递归求解。</p><h2 id="c-color-the-chessboard"><a class="header-anchor" href="#c-color-the-chessboard">¶</a>C Color the chessboard</h2><p>题意：给出一张矩形图，图上每一个单位矩形初始状态下被涂为白色或红色或蓝色，现在要将这张图上的每一个白色的单位矩形染上色，要求所有具有偶数行数和偶数列数的矩形中所含有的蓝色矩形和红色矩形数量相等。<br>解题：待补，显然只要所有的2*2的矩形都满足条件，那么就能满足条件，DFS or DP？</p><h2 id="d-destroy-the-cube"><a class="header-anchor" href="#d-destroy-the-cube">¶</a>D Destroy the cube</h2><p>(待补)</p><h2 id="e-euler-theorem"><a class="header-anchor" href="#e-euler-theorem">¶</a>E Euler theorem</h2><p>题意：给出若干个整数，对于每一个整数，要求输出这个整数余除以任意一个数能得到的余数的个数。（如，对于3，3%3=0,3%4=3,3%2=1,任何数都不能让3余2，因此有3个余数）。<br>解题：签到题<s>打表就能得到答案</s>。显然，对于一个数N，任何数不可能让它余超过$(N-1)/2$，而任意不超过N/2的余数都是有可能得到的，因此最终的答案就是$N/2+2$(1~N/2以及0和N)。<br>简单证明：要让$N$余一个数$m$，只要让他余除$N-m$就可以了，但当$m&gt;(N-1)/2$时$2(N-m)&lt;N+1$,即$2(N-m)&lt;=N$,这时$N$余除$(N-m)$的值就变成了$N$余除$2(N-m)$的值，显然这是一个小于$(N-1)/2$的值。</p><h2 id="f-free-from-square"><a class="header-anchor" href="#f-free-from-square">¶</a>F Free from square</h2><p>题意：给出两个整数n,K（小于500），要求从1 ~ K中挑出n个整数，这些整数的乘积不能被任何完全平方数（除了1）整除，输出可行的方案数。<br>解题：待补，显然不能选相同的数字，且选了一个数以后不能再选任何它的倍数。<s>然后不会了</s></p><h2 id="g-give-out-candies"><a class="header-anchor" href="#g-give-out-candies">¶</a>G Give out candies</h2><p>（待补）</p><h2 id="h-hard-challenge"><a class="header-anchor" href="#h-hard-challenge">¶</a>H Hard challenge</h2><p>题意：在二维坐标平面上给出若干个点的坐标和权值，保证任意两点所连成的直线不经过原点，任意两点间的边的权值等于这两点权值的乘积，现在要求过原点画一条直线，这条直线所穿过的边的权值之和最大，输出最大的权值。<br>解题：代码待补<br>1.首先，任何一条过原点的直线所穿过的边的权值之和，等于直线一边所有点的权值之和乘以直线另一边所有点的权值之和。<br>2.根据原点到每一个点连线的斜率，可以将所画直线的斜率分成若干个区间，枚举这些区间就能得出答案。<br>3.为了得到区间，首先需要将点按照斜率的不同进行排序（极序排序），接着按照第0个点到第1个点间，第1个点到第2个点间……的顺序进行枚举。<br>4.可以在0 ~ 360°的区间内维护一个前缀和快速得出某一直线两边的点的权值之和。</p><h2 id="i-inverse-of-sum"><a class="header-anchor" href="#i-inverse-of-sum">¶</a>I Inverse of sum</h2><p>（待补）</p><h2 id="j-just-do-it"><a class="header-anchor" href="#j-just-do-it">¶</a>J Just do it</h2><p>题意：给出一个数列a0a1a2……an，要求进行一种运算m次，这种运算就是将每一个ai变成bi，切bi的值等于原数列ai从a0异或到ai的结果。<br>解题：待补，找规律？我找了个规律然后T了(┬＿┬)</p><h2 id="k-kolakoski"><a class="header-anchor" href="#k-kolakoski">¶</a>K Kolakoski</h2><p>题意：有一种特殊的数列，它的第一项是1，这个数列形如：1，2，2，1，1，2，1，2，2……，将这个数列相同的项合并会变成1，22，11，2，1，22……，计算每一项的位数作为新数列这一项的值会变成1，2，2，1，1，2……，我们发现这个数列变回了最初的数列，现在要求输出这个数列的第n项（n&lt;1e7）。<br>解题：n的数值较小，直接用<code>vector</code>暴力模拟即可。<br>简述模拟过程：<br>1.首先初始化数列的前3项为1，2，2<br>2.接着将指针指向第3项（2）。<br>3.沿着指针，如果发现了一个2，那么需要在队尾添加两个相同的数，但这个数要与前一个数不同，因此如果此时队尾元素是1那么<code>push_back</code>两个2，如果队尾元素是2那么<code>push_back</code>两个1；如果发现了一个1，那么<code>push_back</code>一个与队尾元素不同的数即可。<br>贴上AC的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,temp;</span><br><span class="line">    <span class="comment">//模拟过程</span></span><br><span class="line">    s.push_back(<span class="number">1</span>);</span><br><span class="line">    s.push_back(<span class="number">2</span>);</span><br><span class="line">    s.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">1e7</span>+<span class="number">5</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = s.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[temp] == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    s.push_back(<span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    s.push_back(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[temp] == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    s.push_back(<span class="number">1</span>);</span><br><span class="line">                    s.push_back(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    s.push_back(<span class="number">2</span>);</span><br><span class="line">                    s.push_back(<span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//模拟结束</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="l-loop-next"><a class="header-anchor" href="#l-loop-next">¶</a>L Loop next</h2><p>（待补）</p><h2 id="m-mystery"><a class="header-anchor" href="#m-mystery">¶</a>M Mystery</h2><p>（待补）</p><p>看看明天能补几道吧。。(┬＿┬)</p><h1>补题日记</h1><h2 id="7-3"><a class="header-anchor" href="#7-3">¶</a>7/3</h2><h3 id="h-hard-challenge-v2"><a class="header-anchor" href="#h-hard-challenge-v2">¶</a>H Hard challenge</h3><p>解题：大致解法与昨天写的差不多，不过实际写代码的时候有一些问题，因此做了一些改变，改变后的解题方法如下：<br>1.将所有点按照斜率k从大到小的顺序排序。<br>2.初始状态下让所画的直线竖置，这样将所有点分为直线左边的点与直线右边的点两组（特别注意在y轴上的点分在直线右边，此时可以认为直线并不完全竖置），输入时统计直线左边的点权和lsum和直线右边的点权和rsum。<br>3.维护lsum和rsum。按k从大到小的顺序遍历每一个点，每一次改变直线将这个点的分组改变（由于已经按k排序，每次移动直线只会有一个点的分组被改变），根据这个点的位置对lsum和rsum做出相应的变化。<br>4.昨天维护前缀和的问题在于0 ~ 360°并不是一个离散的范围而是一个连续的范围，前缀数组的维护有难度。<s>貌似也是可以的，但我懒得想了</s><br>以下是AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>+<span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">points</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,val;</span><br><span class="line">    <span class="keyword">double</span> k;<span class="comment">//斜率</span></span><br><span class="line">&#125;P[maxn];</span><br><span class="line"><span class="keyword">int</span> n,T;</span><br><span class="line">ll lsum,rsum,ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(points a,points b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.k&gt;b.k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        lsum = <span class="number">0</span>;rsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; P[i].x &gt;&gt; P[i].y &gt;&gt; P[i].val;</span><br><span class="line">            <span class="comment">//计算出斜率</span></span><br><span class="line">            P[i].k = <span class="built_in">atan</span>(<span class="number">1.0</span>*P[i].y/P[i].x); </span><br><span class="line">            <span class="comment">//预设lsum和rsum状态</span></span><br><span class="line">            <span class="keyword">if</span>(P[i].x &lt; <span class="number">0</span>) lsum += P[i].val;</span><br><span class="line">            <span class="keyword">else</span> rsum += P[i].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按斜率排序</span></span><br><span class="line">        sort(P,P+n,cmp);</span><br><span class="line">        <span class="comment">//预设ans状态</span></span><br><span class="line">        ans = lsum * rsum;</span><br><span class="line">        <span class="comment">//遍历，维护lsum、rsum和ans</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(P[i].x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                lsum += P[i].val;</span><br><span class="line">                rsum -= P[i].val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                lsum -= P[i].val;</span><br><span class="line">                rsum += P[i].val;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans,lsum*rsum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-build-a-tree-v2"><a class="header-anchor" href="#b-build-a-tree-v2">¶</a>B Build a tree</h3><p><s>我的数据结构是真的菜啊</s><br>解题：显然，题目给出的是一个有n个节点的完全k叉树，观察这课树，不难发现，除了第一层和最后一层，每一层至多只有一棵子树不是满k叉树，而这棵子树左边的所有子树是满k叉树，右边是深度小一的满k叉树（画张图就很清楚了），因此按以下步骤求解：<br>1.预处理，用一个数组记录每一层最后一个节点的编号，同时得到树的深度。<br>2.首先单独处理最后一层，将可能不是满k叉树的那几个节点单独挑出，并标记最后一个节点，其余统一进行异或。<br>3.向上遍历，每一层由三部分组成：①最深的满k叉树②不满的那棵k叉树③浅一层的k叉树。每次遍历一层将标记上传的父节点，这个节点就是那棵可能不满的k叉树，左边是较深的k叉树，右边是较浅的k叉树。很容易得到满k叉树的size和数目，因此统一异或。不满的k叉树的size等于这一层以下（包含这一层）的总节点数减去左边满k叉树的size之和再减去右边满k叉树的size之和。<br>4.一直遍历到树的第一层，结束遍历。<br><strong>5.显然遍历的时间复杂度是$logk(n)$，只要k&gt;=2，是很快就能遍历完的，但当k=1是遍历会很慢，因此打表特判。</strong><br>下面给出AC代码，<em>代码比较丑，将就一下吧</em>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="comment">//num记录每一层最后一个节点的编号，pos是非满k叉树节点的编号</span></span><br><span class="line"><span class="comment">//LSize是pos左边满k叉树的size，RSize同理</span></span><br><span class="line"><span class="comment">//ex是单独处理的子树的异或结果,restSize是非满k叉树的size</span></span><br><span class="line">ll n,k,num[<span class="number">70</span>],dep,pos,LSize,RSize,nowdep,ex,restSize;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res *= a;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a*=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="comment">//特判k=1的情况</span></span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line">            ll tmp = n % <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; n+<span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="number">3</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ll i = <span class="number">0</span>,ans = n;</span><br><span class="line">            num[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//找出每一层最后一个节点的编号以及树的深度</span></span><br><span class="line">            <span class="keyword">while</span>(num[i] &lt; n - <span class="number">1</span> &amp;&amp; num[i] &lt;= n - <span class="number">1</span> - qpow(k,i+<span class="number">1</span>))&#123;</span><br><span class="line">                num[i+<span class="number">1</span>] = num[i] + qpow(k,i+<span class="number">1</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            pos = n - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//可能组成非满2叉树的节点数</span></span><br><span class="line">            restSize = (pos-num[i])%k;</span><br><span class="line">            ans ^= (((pos-num[i])-restSize) &amp; <span class="number">1</span>);</span><br><span class="line">            ex = ((restSize&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//深度是i+1，原因自己看上面的while条件，主要是怕他溢出ll。。</span></span><br><span class="line">            dep = i + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//最后一层已经处理完，开始处理倒数第二层</span></span><br><span class="line">            nowdep = i;</span><br><span class="line">            LSize = <span class="number">1</span>;</span><br><span class="line">            RSize = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//ans初始化为n，因此不用再算第一层，算到第2层就可以结束了</span></span><br><span class="line">            <span class="keyword">while</span>(nowdep &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//上传标记</span></span><br><span class="line">                pos = (pos<span class="number">-1</span>)/k;</span><br><span class="line">                <span class="comment">//计算左满k叉树，右满k叉树以及非满k叉树的size</span></span><br><span class="line">                LSize = LSize * k + <span class="number">1</span>;</span><br><span class="line">                RSize = RSize * k + <span class="number">1</span>;</span><br><span class="line">                restSize = (n - <span class="number">1</span> - num[nowdep<span class="number">-1</span>])- (pos-num[nowdep<span class="number">-1</span>]<span class="number">-1</span>)*LSize - (num[nowdep]-pos)*RSize;</span><br><span class="line">                ex ^= restSize;</span><br><span class="line">                ans ^= (((pos-num[nowdep<span class="number">-1</span>]<span class="number">-1</span>)&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">0</span>)*LSize;</span><br><span class="line">                ans ^= (((num[nowdep]-pos)&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">0</span>)*RSize;</span><br><span class="line">                nowdep--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最终结果异或上单独处理的子树</span></span><br><span class="line">            ans ^= ex;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-color-the-chessboard-v2"><a class="header-anchor" href="#c-color-the-chessboard-v2">¶</a>C Color the chessboard</h3><p>解题：昨天想的没错，只要2 * 2的矩形满足，整个图就能满足，将各种2 * 2的矩形排列一下，你<s>或许</s>会发现，将R看做1，B看做0，所有答案一定满足2种情况之一：<br>1.不考虑列的情况，每一行一定是01循环或10循环之一。<br>2.不考虑行的情况，每一列一定是01循环或10循环之一。<br>其次，只要满足上述两种情况之一，那么一定是一种答案。<br>因此分2次暴力跑出能否满足上述2种情况之一，将两种情况的可能数相加。<br>有2种情况可能会被重复计算，也就是行和列同时满足01循环或10循环的情况，单独跑出能否满足这种情况，能满足则减一。<br>具体可以结合<a href="https://blog.csdn.net/hhhhhhxh/article/details/77277456" target="_blank" rel="noopener">这篇文章</a>一起理解，我的代码也是几乎照抄了一遍这篇文章的。。<br>以下是AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line">ll ans,ans1,ans2;</span><br><span class="line"><span class="keyword">int</span> M[<span class="number">2000</span>][<span class="number">2000</span>];</span><br><span class="line"><span class="keyword">char</span> C[<span class="number">2000</span>][<span class="number">2000</span>];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; C[i][j];</span><br><span class="line">            <span class="keyword">if</span>(C[i][j] == <span class="string">'R'</span>) M[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(C[i][j] == <span class="string">'B'</span>) M[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(C[i][j] == <span class="string">'?'</span>) M[i][j] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="comment">//cnt是每一行选择的可能性，显然总的可能性要相乘得出</span></span><br><span class="line">            ll cnt = <span class="number">0</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; M[i][j] == <span class="number">0</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; M[i][j] == <span class="number">1</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) cnt++;</span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; M[i][j] == <span class="number">1</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; M[i][j] == <span class="number">0</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) cnt++;</span><br><span class="line">            ans1 = (ans1*cnt)%mod;</span><br><span class="line">            <span class="keyword">if</span>(ans1 == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            ll cnt = <span class="number">0</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; M[i][j] == <span class="number">0</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; M[i][j] == <span class="number">1</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) cnt++;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; M[i][j] == <span class="number">1</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; M[i][j] == <span class="number">0</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) cnt++;</span><br><span class="line">            ans2 = (ans2*cnt)%mod;</span><br><span class="line">            <span class="keyword">if</span>(ans2 == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans1+ans2)%mod;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; M[i][j] == <span class="number">1</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; M[i][j] == <span class="number">0</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) ans = (ans<span class="number">-1</span>+mod)%mod;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; M[i][j] == <span class="number">0</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; M[i][j] == <span class="number">1</span>)&#123;flag = <span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) ans = (ans<span class="number">-1</span>+mod)%mod;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的break都是用来剪枝的，<s>剪枝以后变慢了</s>，姑且是能懂了，不过总感觉有些不能释怀，比赛时真的能想通吗。。。</p><h3 id="7-3补题小结"><a class="header-anchor" href="#7-3补题小结">¶</a>7/3补题小结</h3><p>今天暂时补到这了，感觉还是经验不够啊？？<s>还是我太菜了</s>这几题能看懂但总觉得比赛的时候想不到。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019/07/02 阴有雨&lt;br&gt;
又是自闭的一天&lt;br&gt;
2019/07/03 晴？阴？&lt;br&gt;
更新了B、C、H的题解&lt;/p&gt;
    
    </summary>
    
      <category term="ACM自闭日记" scheme="https://lotusir.github.io/categories/ACM%E8%87%AA%E9%97%AD%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="自闭" scheme="https://lotusir.github.io/tags/%E8%87%AA%E9%97%AD/"/>
    
  </entry>
  
  <entry>
    <title>图论最小生成树</title>
    <link href="https://lotusir.github.io/2019/07/02/minTree/"/>
    <id>https://lotusir.github.io/2019/07/02/minTree/</id>
    <published>2019-07-02T03:36:55.000Z</published>
    <updated>2019-07-03T16:07:28.355Z</updated>
    
    <content type="html"><![CDATA[<h1>最小生成树</h1><p>本文会介绍两种用于获取最小生成树的算法，同样只给出用法不给出证明。</p><a id="more"></a><hr><h2 id="引入"><a class="header-anchor" href="#引入">¶</a>引入</h2><p>最小生成树通常用于解决形如以下的这种问题：<br>给定若干个点和若干个边，保证这些边能将这些点全联通，试从这些边中选出部分边，使生成的树的边权之和最小。<br>当然ACM的题通常都会有一个场景，比如有许多城镇，现已知这些城镇间的距离，要在这些城镇间修路，保证联通所有城镇的同时使得所修的路最短。</p><h2 id="最小生成树算法"><a class="header-anchor" href="#最小生成树算法">¶</a>最小生成树算法</h2><p>下文会介绍两种算法Prim和Kruscal算法,这两种算法都会采用贪心的策略。</p><h3 id="prim"><a class="header-anchor" href="#prim">¶</a>Prim</h3><p>Prim是一种以点为主体的贪心算法。下面简述算法的过程：<br>1.在所有点中任取一点作为树的根，更新其他所有点到树的距离。<br>2.在未被选取的点中，找到离树最近的点并选入树中，再次更新其他所有点到树的距离。<br>3.重复第2步，直到所有点都被选入树中，Prim算法到此结束。<br><em>点到树的距离是指点到树上任意一点的最短距离</em><br>注意给出的图有多个最小生成树，根据选取的起点不同可能的到不同的最小生成树，但如果最小生成树唯一，那么起点的选取不会影响最终得到的最小生成树，所以放心大胆地去选取起点吧！</p><p>下面给出prim算法主体的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化，将1号点加入到生成树中</span></span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;++i) mndis[i]=dis[<span class="number">1</span>][i];</span><br><span class="line">    <span class="keyword">while</span>(cnt != N)&#123;</span><br><span class="line">        <span class="keyword">int</span> mn = inf,id;</span><br><span class="line">        <span class="comment">//找出所有点中距离生成树最近的点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; mndis[i] &lt; mn)&#123;</span><br><span class="line">                mn = mndis[i];</span><br><span class="line">                id = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将找到的点加入生成树</span></span><br><span class="line">        vis[id] = <span class="number">1</span>;</span><br><span class="line">        ans += mn;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="comment">//更新剩余点到树的距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) mndis[i] = min(mndis[i],dis[id][i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本算法中采用邻接矩阵以及暴力遍历找最小值的方式实现，理论上可以用优先队列和邻接表实现。</p><p>同样给出例题：<a href="https://vjudge.net/problem/HDU-1233" target="_blank" rel="noopener">hdu1233</a><br>以下是AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,dis[maxn][maxn],vis[maxn],ans,mndis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化，将1号点加入到生成树中</span></span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;++i) mndis[i]=dis[<span class="number">1</span>][i];</span><br><span class="line">    <span class="keyword">while</span>(cnt != N)&#123;</span><br><span class="line">        <span class="keyword">int</span> mn = inf,id;</span><br><span class="line">        <span class="comment">//找出所有点中距离生成树最近的点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; mndis[i] &lt; mn)&#123;</span><br><span class="line">                mn = mndis[i];</span><br><span class="line">                id = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将找到的点加入生成树</span></span><br><span class="line">        vis[id] = <span class="number">1</span>;</span><br><span class="line">        ans += mn;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="comment">//更新剩余点到树的距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) mndis[i] = min(mndis[i],dis[id][i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; N)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!N) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">int</span> T = N * (N - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            dis[a][b] = dis[b][a] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        prim();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kruscal"><a class="header-anchor" href="#kruscal">¶</a>Kruscal</h3><p>Kruscal是一种以边为主体的贪心算法，下面简述算法过程。<br>1.从所有没有使用过的边中找出最短的一条边，标记为使用过了。<br>2.如果边的两个端点不在一棵树中，那么将这条边加入到树中，否则不加入。<br>3.重复1、2步直到所有点被联通（显然联通n个点需要n-1条边）。</p><p>找最短边的过程可以用优先队列实现，而判断端点是否在同一棵树中，可以用并查集实现，如果不会并查集，可以先阅读<a href="/2019/07/03/UnionFind/#more">这篇文章</a>，下面代码中的Find和Union函数毁在这篇文章中给出模版。<br>下面给出Kruscal算法的主体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruscal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//选取最短边直到没有边可以再选或者图已经联通</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty() &amp;&amp; cnt != M<span class="number">-1</span>)&#123;</span><br><span class="line">        edge temp = Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">int</span> f = temp.from,t = temp.to,v = temp.val;</span><br><span class="line">        <span class="comment">//利用并查集判断是否在同一棵树中，如果不在则加入树中</span></span><br><span class="line">        <span class="keyword">if</span>(Find(t)!=Find(f))&#123;</span><br><span class="line">            Union(f,t);</span><br><span class="line">            cnt++;</span><br><span class="line">            ans+=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有选取到M-1条边（M为点的数量），说明图不能联通</span></span><br><span class="line">    <span class="keyword">if</span>(cnt != M<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">"?"</span>);</span><br><span class="line">    <span class="comment">//图已联通，输出最小边权和</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样给出例题：<a href="https://vjudge.net/problem/HDU-1863" target="_blank" rel="noopener">hdu1683</a><br>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    edge(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>,<span class="keyword">int</span> c = <span class="number">0</span>)&#123;from=a;to=b;val=c;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (edge a,edge b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.val &gt; b.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> N,M,father[maxn];</span><br><span class="line">priority_queue&lt; edge,<span class="built_in">vector</span>&lt;edge&gt;,greater&lt;edge&gt; &gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[a]==a) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> father[a]=Find(father[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1=Find(a),f2=Find(b);</span><br><span class="line">    father[f2] = f1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) father[i]=i;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty()) Q.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruscal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty() &amp;&amp; cnt != M<span class="number">-1</span>)&#123;</span><br><span class="line">        edge temp = Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">int</span> f = temp.from,t = temp.to,v = temp.val;</span><br><span class="line">        <span class="keyword">if</span>(Find(t)!=Find(f))&#123;</span><br><span class="line">            Union(f,t);</span><br><span class="line">            cnt++;</span><br><span class="line">            ans+=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt != M<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">"?"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N))&#123;</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;M);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            Q.push(edge(a,b,c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(N&lt;M<span class="number">-1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"?"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        kruscal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>以上就是两种最短路算法的实现过程了。<s>后记不知道写啥了，就这样吧</s></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;最小生成树&lt;/h1&gt;
&lt;p&gt;本文会介绍两种用于获取最小生成树的算法，同样只给出用法不给出证明。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="贪心" scheme="https://lotusir.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="图论" scheme="https://lotusir.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最小生成树" scheme="https://lotusir.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>图论最短路</title>
    <link href="https://lotusir.github.io/2019/07/01/minpath/"/>
    <id>https://lotusir.github.io/2019/07/01/minpath/</id>
    <published>2019-07-01T14:40:31.000Z</published>
    <updated>2019-07-02T03:19:36.772Z</updated>
    
    <content type="html"><![CDATA[<h1>最短路算法</h1><p>本文将介绍几种用于解决最短路问题的算法，仅给出用法，不给出证明（<s>因为不会证明</s>）。</p><a id="more"></a><hr><h2 id="问题简述"><a class="header-anchor" href="#问题简述">¶</a>问题简述</h2><p>最短路问题：给出若干个点和若干个带有边权的边，要求找出从某点到某点的最短路径。</p><h2 id="邻接表"><a class="header-anchor" href="#邻接表">¶</a>邻接表</h2><p>简单来说就是为每一个点建立一个边链表记录了与这个点所连的所有边。实现方法很多，本文用<code>vector</code>实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//edge为边的结构体，maxn为点的总数，E[i]中记录了与点i相连的所有边</span></span><br><span class="line"><span class="comment">//如果题目为无向图，注意要push_back两个方向的边</span></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; E[maxn];</span><br></pre></td></tr></table></figure><h2 id="单源最短路"><a class="header-anchor" href="#单源最短路">¶</a>单源最短路</h2><p>即仅要求求出从一个点到其他所有点（某一点）的最短距离的问题。</p><h3 id="dijkstra"><a class="header-anchor" href="#dijkstra">¶</a>dijkstra</h3><p>我将dijkstra认识为一个贪心的BFS过程，首先，我们需要用到两个结构体。<br>1.边，这个结构体必须包含目标点，边权，可以包含出发点（也可以不包含）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    edge(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>)&#123;to=a;val=b;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.状态，这个结构体需要包含当前所在的位置（影响联通路径的状态）和已经走过的距离，同时重载<code>&gt;</code>号，比较的依据为走过的距离，重载<code>&gt;</code>号是为了能够使用<code>priority_queue</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    nod(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>)&#123;pos=a;d=b;&#125;</span><br><span class="line">    <span class="comment">//优先队列重载大于符号</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (nod a, nod b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.d&gt;b.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了这两个结构体之后，我们就能开始dijkstra的主体了，简单地描述一下dijkstra的过程。<br>1.录入数据。<br>2.创建一个nod的优先队列，从小的开始出队列。<br>3.将初始态（初始位置，经过的距离为0）push进优先队列，设初始最短路径都为无穷大。<br>4.弹出队首元素，更新与队首位置相连的所有点，如果能够更新（距离变小了）某个点，则将这个点push进队列。<br>5.重复第4步直到队列为空，这意味着没有点能够再次被更新了，dijkstra算法到此结束。<br>下面给出算法主体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,inf,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    priority_queue&lt; nod,<span class="built_in">vector</span>&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; <span class="comment">//优先队列，从较小的开始出</span></span><br><span class="line">    Q.push(nod(N,<span class="number">0</span>));<span class="comment">//初始态,N为出发点</span></span><br><span class="line">    <span class="comment">//类似BFS过程</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        nod temp = Q.top();</span><br><span class="line">        <span class="keyword">int</span> pos = temp.pos;</span><br><span class="line">        <span class="keyword">int</span> d = temp.d;</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(d &gt; dis[pos]) <span class="keyword">continue</span>;</span><br><span class="line">        dis[pos]=d;</span><br><span class="line">        <span class="comment">//遍历邻接表更新相邻点的最短距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E[pos].size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> to = E[pos][i].to;</span><br><span class="line">            <span class="keyword">int</span> val = E[pos][i].val;</span><br><span class="line">            <span class="keyword">int</span> nd = d + val;</span><br><span class="line">            <span class="comment">//若能更新，则更新并把更新的点push进队列</span></span><br><span class="line">            <span class="keyword">if</span>(nd &lt; dis[to])&#123;</span><br><span class="line">                dis[to] = nd;</span><br><span class="line">                Q.push(nod(to,nd));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的是，dijkstra算法并不能判断负环，因此当题目中出现负边时慎用。</strong></p><p>这里给出一道例题：<a href="https://vjudge.net/problem/POJ-2387" target="_blank" rel="noopener">POJ2387</a><br>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    edge(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>)&#123;to=a;val=b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    nod(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>)&#123;pos=a;d=b;&#125;</span><br><span class="line">    <span class="comment">//优先队列重载大于符号</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (nod a, nod b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.d&gt;b.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//邻接表</span></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; E[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,N,dis[maxn];<span class="comment">//dis[i]为从X到i的最短距离，可以根据情况扩充为d[i][j][k].....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加边，无向图时添加两条边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    E[f].push_back(edge(t,v));</span><br><span class="line">    E[t].push_back(edge(f,v));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,inf,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    priority_queue&lt; nod,<span class="built_in">vector</span>&lt;nod&gt;,greater&lt;nod&gt; &gt; Q;</span><br><span class="line">    Q.push(nod(N,<span class="number">0</span>));<span class="comment">//初始态,N为出发点</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        nod temp = Q.top();</span><br><span class="line">        <span class="keyword">int</span> pos = temp.pos;</span><br><span class="line">        <span class="keyword">int</span> d = temp.d;</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(d &gt; dis[pos]) <span class="keyword">continue</span>;</span><br><span class="line">        dis[pos]=d;</span><br><span class="line">        <span class="comment">//遍历邻接表更新相邻点的最短距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E[pos].size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> to = E[pos][i].to;</span><br><span class="line">            <span class="keyword">int</span> val = E[pos][i].val;</span><br><span class="line">            <span class="keyword">int</span> nd = d + val;</span><br><span class="line">            <span class="keyword">if</span>(nd &lt; dis[to])&#123;</span><br><span class="line">                dis[to] = nd;</span><br><span class="line">                Q.push(nod(to,nd));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T &gt;&gt; N;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> from,to,val;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to &gt;&gt; val;</span><br><span class="line">        add(from,to,val);</span><br><span class="line">    &#125;</span><br><span class="line">    dij();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dis[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下内容较难，可跳过</strong><br>此外，虽然在上题中<code>dis[i]</code>表示从起点到<code>i</code>点的最短距离，但实际上这个<code>dis</code>数组的下标代表的是一个状态，本题中状态只有所在的点，因此<code>dis</code>数组也只需要一个下标，<code>dis</code>数组的下标可以根据需要扩充。<br>例如在<a href="https://vjudge.net/problem/HDU-6071" target="_blank" rel="noopener">hdu6071</a>中，<code>dis[i][j]</code>表示的就是跑到了i点且跑过的距离模mod后为j的一个状态，我们也可以将每一种状态抽象为不同的点。<br>同样给出AC代码（本题较难，可能另开文章单独解释）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e5</span>+<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll llinf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll from;</span><br><span class="line">    ll to;</span><br><span class="line">    ll val;</span><br><span class="line">    edge(ll a = <span class="number">0</span>,ll b = <span class="number">0</span>,ll c = <span class="number">0</span>)&#123;from=a;to=b;val=c;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line">    ll pos;</span><br><span class="line">    ll d;</span><br><span class="line">    nod(ll a=<span class="number">0</span>,ll b=<span class="number">0</span>)&#123;pos = a;d = b;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (nod a,nod b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.d &gt; b.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll T,k,d12,d23,d34,d41,m,dis[<span class="number">5</span>][maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; E[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,inf,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    priority_queue&lt; nod,<span class="built_in">vector</span>&lt;nod&gt;,greater&lt;nod&gt; &gt; Q;</span><br><span class="line">    Q.push(nod(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        nod t = Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(t.d &gt; dis[t.pos][t.d%m]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;edge&gt;::iterator it = E[t.pos].begin(); it != E[t.pos].end(); it++)&#123;</span><br><span class="line">            ll nd = t.d+(*it).val;</span><br><span class="line">            <span class="keyword">if</span>(nd &lt; dis[(*it).to][nd%m])&#123;</span><br><span class="line">                dis[(*it).to][nd%m] = nd;</span><br><span class="line">                Q.push(nod((*it).to,nd));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i) E[i].clear();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k &gt;&gt; d12 &gt;&gt; d23 &gt;&gt; d34 &gt;&gt; d41;</span><br><span class="line">        E[<span class="number">1</span>].push_back(edge(<span class="number">1</span>,<span class="number">2</span>,d12));E[<span class="number">2</span>].push_back(edge(<span class="number">2</span>,<span class="number">1</span>,d12));</span><br><span class="line">        E[<span class="number">2</span>].push_back(edge(<span class="number">2</span>,<span class="number">3</span>,d23));E[<span class="number">3</span>].push_back(edge(<span class="number">3</span>,<span class="number">2</span>,d23));</span><br><span class="line">        E[<span class="number">3</span>].push_back(edge(<span class="number">3</span>,<span class="number">4</span>,d34));E[<span class="number">4</span>].push_back(edge(<span class="number">4</span>,<span class="number">3</span>,d34));</span><br><span class="line">        E[<span class="number">4</span>].push_back(edge(<span class="number">4</span>,<span class="number">1</span>,d41));E[<span class="number">1</span>].push_back(edge(<span class="number">1</span>,<span class="number">4</span>,d41));</span><br><span class="line">        m = <span class="number">2</span> * min(d12,d23);</span><br><span class="line">        dij();</span><br><span class="line">        ll ans = llinf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[<span class="number">2</span>][i] &gt;= k) ans = min(ans,dis[<span class="number">2</span>][i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ll delt = k - dis[<span class="number">2</span>][i];</span><br><span class="line">                dis[<span class="number">2</span>][i] += (delt/m+(delt%m?<span class="number">1</span>:<span class="number">0</span>))*m;</span><br><span class="line">                ans=min(ans,dis[<span class="number">2</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，dijkstra算法的介绍告一段落。</p><h3 id="spfa-待补"><a class="header-anchor" href="#spfa-待补">¶</a>SPFA(待补)</h3><p>同样为单源最短路算法，相较于dijkstra的优势是可以判断负环，劣势是比较慢。是优化版的Bellman-Ford算法。<br><strong>模版及例题待补</strong></p><h3 id="bellman-ford"><a class="header-anchor" href="#bellman-ford">¶</a>Bellman-Ford</h3><p>他死了。</p><h2 id="多源最短路"><a class="header-anchor" href="#多源最短路">¶</a>多源最短路</h2><p>给定若干点以及点之间的距离(边)，要求求出任意两点间的最短距离。</p><h3 id="floyed算法"><a class="header-anchor" href="#floyed算法">¶</a>Floyed算法</h3><p>又名Warshall算法。暴力遍历O($n^3$)次点，对于任意两点i,j，如果以k为桥梁能使i ~ j的距离变短，那么更新i ~ j的距离。由于算法特性，只能用邻接矩阵来存图。<br>算法主体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">w[i][j] = min(w[i][j], w[i][k] + w[k][j]);</span><br></pre></td></tr></table></figure><p>给出一道例题：<a href="https://vjudge.net/problem/POJ-2139" target="_blank" rel="noopener">poj2139</a><br>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">303</span>][<span class="number">303</span>], tmp[<span class="number">303</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">memset</span>(w, inf, <span class="keyword">sizeof</span>(w));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">w[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">w[tmp[i]][tmp[j]] = w[tmp[j]][tmp[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">w[i][j] = min(w[i][j], w[i][k] + w[k][j]);</span><br><span class="line"><span class="keyword">double</span> ans = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">sum += w[i][j];</span><br><span class="line">ans = min(ans, sum * <span class="number">100</span> * <span class="number">1.0</span>/ (n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">int</span>)ans);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单的一个算法，但是他的空间复杂度和时间复杂度都过高，并不常用。</p><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>好吧，从篇幅上可以看出，最短路算法中最常用，最强大的算法就是dijkstra了，他的变形也有很多，需要好好掌握哦！<br>本文中一些STL会在将来的文章里补上用法。<s>emmm可能会吧</s></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;最短路算法&lt;/h1&gt;
&lt;p&gt;本文将介绍几种用于解决最短路问题的算法，仅给出用法，不给出证明（&lt;s&gt;因为不会证明&lt;/s&gt;）。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="贪心" scheme="https://lotusir.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="图论" scheme="https://lotusir.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路问题" scheme="https://lotusir.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Trie</title>
    <link href="https://lotusir.github.io/2019/07/01/Trie/"/>
    <id>https://lotusir.github.io/2019/07/01/Trie/</id>
    <published>2019-07-01T13:24:40.000Z</published>
    <updated>2019-07-02T14:50:53.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="trie"><a class="header-anchor" href="#trie">¶</a>Trie</h2><p>Trie，也叫做字典树，是一种树形结构，可以高效的存储字符串和查询字符串。</p><a id="more"></a><hr><p>Trie比较简单，这里只做简单的介绍，并给出例题和模版。<br>例题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1251" target="_blank" rel="noopener">hdu1251</a><br>题意简述：给定一系列字符串，再给出多个前缀，输出这些前缀在多少个字符串中出现过。</p><h3 id="trie的组成"><a class="header-anchor" href="#trie的组成">¶</a>Trie的组成</h3><p>这种树形结构只有一个根节点，根节点没有意义（虚节点）。<br>网上很多文章中将每一个节点视为一个字符，但事实并非如此，在Trie中，每一条边代表了一个字符，而从根节点走到某一节点路径上所有字符组成的字符串，则为该节点所代表的字符串。<br>为了方便讲解，这里直接给出Trie节点的定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    trie *nxt[<span class="number">26</span>]; <span class="comment">//子节点的指针数组，此处26为字符集的大小，可以根据需求修改</span></span><br><span class="line">    <span class="keyword">int</span> cnt; <span class="comment">//此题用于统计前缀，根据需求修改</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    trie()</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//初始化所有nxt为NULL</span></span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以认为，从一个节点p到节点p-&gt;nxt[id]的边所代表的字符即为id所映射的字符。<br>以a ~ z映射到0 ~ 25为例，root-&gt;nxt[0]-&gt;nxt[1]-&gt;nxt[2]节点所代表的的字符串就是<code>abc</code>。</p><h3 id="trie的构建"><a class="header-anchor" href="#trie的构建">¶</a>Trie的构建</h3><p>与线段树不同，Trie并不是输入完所有字符串后统一构建的(<s>当然你想这么做也是可以的，但是会MLE</s>),Trie的构建通常是输入一个字符串就插入一个字符串，插入的过程很简单，如果nxt[id]已经存在就沿着走，如果不存在就新建一个。<br>以下为代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历字符串</span></span><br><span class="line">    <span class="keyword">while</span>(s[i])&#123;</span><br><span class="line">        id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="comment">//如果存在，就沿着走，并操作路径上的统计量（此处用于统计前缀）</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;nxt[id])</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;nxt[id];</span><br><span class="line">            p -&gt; cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不存在，就新建，当然也要走过去</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p -&gt; nxt[id] = <span class="keyword">new</span> trie;</span><br><span class="line">            p = p -&gt; nxt[id];</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="trie的查询"><a class="header-anchor" href="#trie的查询">¶</a>Trie的查询</h3><p>字典树的查询视题意而定，在本次例题中，为统计前缀出现的次数。根据字符串沿着树遍历即可，若遇到nxt[id]==NULL的情况，说明没找到，直接返回0。<br>以下为代码实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i])</span><br><span class="line">    &#123;</span><br><span class="line">        id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="comment">//找得到就沿着走</span></span><br><span class="line">        <span class="keyword">if</span>(p -&gt; nxt[id]) p = p -&gt; nxt[id];</span><br><span class="line">        <span class="comment">//找不到直接返回0</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若找到了，返回最终节点的cnt值</span></span><br><span class="line">    <span class="keyword">return</span> p -&gt; cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="trie的删除"><a class="header-anchor" href="#trie的删除">¶</a>Trie的删除</h3><p>递归删除即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">(trie *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) <span class="keyword">if</span>(p -&gt; nxt[i] != <span class="literal">NULL</span>) Free(p-&gt;nxt[i]);</span><br><span class="line">    <span class="keyword">delete</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题-模版"><a class="header-anchor" href="#例题-模版">¶</a>例题+模版</h3><p>回到例题的解答，解题过程非常简单<s>毕竟是模版题</s><br>1.根据给出的字符串建立Trie<br>2.根据前缀在Trie上遍历</p><p>AC代码（模版）：<br><s>本题用C<ins>提交的，用G</ins>提交有惊喜哦</s><br>本题G<ins>提交会MLE，请用C</ins>提交</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    trie *nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    trie()</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">trie *root;</span><br><span class="line"><span class="keyword">int</span> i,id;</span><br><span class="line"><span class="keyword">char</span> S[maxn],s1[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i])&#123;</span><br><span class="line">        id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;nxt[id])</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;nxt[id];</span><br><span class="line">            p -&gt; cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p -&gt; nxt[id] = <span class="keyword">new</span> trie;</span><br><span class="line">            p = p -&gt; nxt[id];</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i])</span><br><span class="line">    &#123;</span><br><span class="line">        id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p -&gt; nxt[id]) p = p -&gt; nxt[id];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p -&gt; cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">(trie *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) <span class="keyword">if</span>(p -&gt; nxt[i] != <span class="literal">NULL</span>) Free(p-&gt;nxt[i]);</span><br><span class="line">    <span class="keyword">delete</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root = <span class="keyword">new</span> trie;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,S))&#123;</span><br><span class="line">        Insert(S);</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cin</span>.peek() == <span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1) != EOF)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(s1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;trie&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#trie&quot;&gt;¶&lt;/a&gt;Trie&lt;/h2&gt;
&lt;p&gt;Trie，也叫做字典树，是一种树形结构，可以高效的存储字符串和查询字符串。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构" scheme="https://lotusir.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="https://lotusir.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Trie" scheme="https://lotusir.github.io/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>AC自动机</title>
    <link href="https://lotusir.github.io/2019/07/01/ACautoman/"/>
    <id>https://lotusir.github.io/2019/07/01/ACautoman/</id>
    <published>2019-07-01T11:10:50.000Z</published>
    <updated>2019-07-03T17:07:16.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ac自动机"><a class="header-anchor" href="#ac自动机">¶</a>AC自动机</h2><p>AC自动机，用于多模字符串匹配，类似KMP+Trie。</p><a id="more"></a><hr><p>一种<s>最常见的</s>题目如下（裸题模版）<br>题意简述：首先输入多个单词（模式串），接着输入一串目标字符串，输出有多少个模式串在目标字符串中出现过。<br>解题步骤：<br>1.根据给出的模式串构造一个Trie树。<br>2.在Trie树上构造fail指针（构造Trie图）。<br>3.将目标字符串在Trie图上进行匹配。</p><h3 id="fail指针"><a class="header-anchor" href="#fail指针">¶</a>Fail指针</h3><p><strong>Fail指针的构造过程：</strong><br>1.用BFS的顺序逐层向下构造Fail指针。<br>2.当一个节点的父亲指针为Root时，将Fail指针指向Root。<br>3.当要获取一个节点（父节点不为Root）的Fail指针时，从其父亲指针的Fail指针开始查找与自己同名的子节点，若找到，则这个节点的Fail指针指向该与自己同名的子节点；若找不到，则沿着Fail指针继续寻找直到找到或直到指向Root时仍找不到。若指向根节点时仍然找不到，及当前节点没有Fail指针，将Fail指针指向Root。<br>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;trie*&gt; q;    <span class="comment">//用于BFS</span></span><br><span class="line">    q.push(root);</span><br><span class="line">    trie *temp,*p;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        p = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p -&gt; nxt[i])&#123;</span><br><span class="line">                <span class="comment">//父节点为root的节点fail指针指向root</span></span><br><span class="line">                <span class="keyword">if</span>(p == root)</span><br><span class="line">                    p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//从父节点的fail指针开始查找</span></span><br><span class="line">                    temp = p -&gt; fail;</span><br><span class="line">                    <span class="comment">//当temp为NULL时即没有找到同名的子节点</span></span><br><span class="line">                    <span class="keyword">while</span>(temp)&#123;</span><br><span class="line">                        <span class="comment">//找到了与自己同名的子节点，则让当前节点的fail指向该子节点，同时结束循环</span></span><br><span class="line">                        <span class="keyword">if</span>(temp -&gt; nxt[i])&#123;</span><br><span class="line">                            p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//沿着fail指针继续查找</span></span><br><span class="line">                        temp = temp -&gt; fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//temp为NULL，即没有找到同名的子节点，将fail指针指向root</span></span><br><span class="line">                    <span class="keyword">if</span>(!temp) p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//bfs</span></span><br><span class="line">                q.push(p -&gt; nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fail指针具有的特点：</strong><br>1.从任意节点沿着fail指针遍历，总能回到root节点。<br>2.一个节点的fail指针指向的节点所代表的字符串，为当前节点字符串的某一后缀，因此当匹配时匹配到某一节点时，这一节点fail指针所指向的字符串也一定出现过了，所以在匹配过程中每匹配一个字符，要沿着fail指针跳回root（例如当匹配到abcd时，bcd,cd,d都一定已经出现过了）。<br>3.这个性质与KMP中的next数组很想，可以结合理解。<br>下图是一张构建好的fail指针的图：<br><img src="https://github.com/LotusIR/IMG/blob/master/ACauto.png?raw=true" alt="avator"></p><h3 id="查询过程"><a class="header-anchor" href="#查询过程">¶</a>查询过程</h3><p>查询步骤：<br>1.如果当前字符匹配，则沿着nxt[id]向下走；如果当前字符不匹配，则沿着fail指针查找nxt[id]直到找到或指向root。<br>2.每匹配完一个字符，沿着fail指针跳回root同时统计路径上出现的单词数。<br>3.将匹配过的模式串打上标记避免重复统计。<br>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    trie *temp;</span><br><span class="line">    <span class="comment">//遍历字符串s</span></span><br><span class="line">    <span class="keyword">while</span>(s[i])&#123;</span><br><span class="line">        <span class="comment">//26个小写字母映射到0~25</span></span><br><span class="line">        <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="comment">//若没有找到nxt[id]且当前指针没有指向root（root的fail指针为NULL），则沿着fail指针遍历直到找到或指向root</span></span><br><span class="line">        <span class="keyword">while</span>(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail;</span><br><span class="line">        p = p -&gt; nxt[id];</span><br><span class="line">        <span class="comment">//若p==NULL，说明最终都没有找到，让p指向root</span></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>) p = root;</span><br><span class="line">        <span class="comment">//从p开始跳fail指针统计路径上的单词数</span></span><br><span class="line">        temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root &amp;&amp; temp -&gt; flag != <span class="number">0</span>)&#123;</span><br><span class="line">                res += temp -&gt; flag;</span><br><span class="line">                <span class="comment">//统计后打上标记（清零单词数量）</span></span><br><span class="line">                temp -&gt; flag = <span class="number">0</span>;</span><br><span class="line">                temp = temp -&gt; fail;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题-模版"><a class="header-anchor" href="#例题-模版">¶</a>例题+模版</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2222" target="_blank" rel="noopener">hdu2222</a><br>题意简述：首先输入多个单词（模式串），接着输入一个目标字符串，输出有多少个模式串在目标字符串中出现过。<br>以下为AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trie</span>&#123;</span></span><br><span class="line">    trie *nxt[<span class="number">26</span>];</span><br><span class="line">    trie *fail;</span><br><span class="line">    <span class="keyword">int</span> cnt; <span class="comment">//计算前缀时可用，本题无用</span></span><br><span class="line">    <span class="keyword">int</span> flag; <span class="comment">//记录当前节点结束的字符串个数</span></span><br><span class="line">    trie()&#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        fail = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(nxt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">trie *root;</span><br><span class="line"><span class="keyword">int</span> T,N,Q;</span><br><span class="line"><span class="keyword">char</span> S[maxn],s1[maxn],s2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;nxt[id] != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            p = p-&gt;nxt[id];</span><br><span class="line">            p -&gt; cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p -&gt; nxt[id] = <span class="keyword">new</span> trie;</span><br><span class="line">            p = p -&gt; nxt[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p -&gt; flag++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;trie*&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    trie *temp,*p;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        p = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p -&gt; nxt[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(p == root)</span><br><span class="line">                    p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    temp = p -&gt; fail;</span><br><span class="line">                    <span class="keyword">while</span>(temp)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(temp -&gt; nxt[i])&#123;</span><br><span class="line">                            p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        temp = temp -&gt; fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!temp) p -&gt; nxt[i] -&gt; fail = root;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(p -&gt; nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line">    trie *p = root;</span><br><span class="line">    trie *temp;</span><br><span class="line">    <span class="keyword">while</span>(s[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail;</span><br><span class="line">        p = p -&gt; nxt[id];</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>) p = root;</span><br><span class="line">        temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root &amp;&amp; temp -&gt; flag != <span class="number">0</span>)&#123;</span><br><span class="line">                res += temp -&gt; flag;</span><br><span class="line">                temp -&gt; flag = <span class="number">0</span>;</span><br><span class="line">                temp = temp -&gt; fail;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归释放Trie</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">(trie *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p -&gt; nxt[i] != <span class="literal">NULL</span>) Free(p-&gt;nxt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        root = <span class="keyword">new</span> trie;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">        <span class="keyword">while</span>(N--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,S);</span><br><span class="line">            Insert(S);</span><br><span class="line">        &#125;</span><br><span class="line">        getFail();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(s1));</span><br><span class="line">        Free(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ac自动机&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#ac自动机&quot;&gt;¶&lt;/a&gt;AC自动机&lt;/h2&gt;
&lt;p&gt;AC自动机，用于多模字符串匹配，类似KMP+Trie。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM算法基础" scheme="https://lotusir.github.io/categories/ACM%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="AC自动机" scheme="https://lotusir.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="字符串" scheme="https://lotusir.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="kmp" scheme="https://lotusir.github.io/tags/kmp/"/>
    
      <category term="Trie" scheme="https://lotusir.github.io/tags/Trie/"/>
    
  </entry>
  
</feed>
