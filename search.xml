<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[暑期集训——图论1（最短路、最小生成树）]]></title>
    <url>%2F2019%2F08%2F02%2FTrainTulun1%2F</url>
    <content type="text"><![CDATA[卑微的我只做了板子题。。更新一个一句话题解的博客？ A Networking(POJ-1287)题目地址：VJ题意：裸的不能再裸的最小生成树题，prim或kruscal任选一个就能过了，记得重边时取最短边。 B Constructing Roads(POJ-2421)题目地址：VJ题意：最小生成树，但是有一些边已经被添加了，要求求出还需添加多少边才能形成最小数。解题：用kruscal，对于已经被添加的边，额外添加一条权值为0的边即可。 C Building a Space Station(POJ-2031)题目地址：VJ题意：给出若干个球，对于每个球，给出它的x,y,z坐标以及它的半径r，有重叠部分的球我们认为已经连通，在此基础上求最小生成树。解题：kruscal或prim都可以，两个球之间的边的长度是max(d-r1-r2,0)，d为两个球球心的距离，n^2的到边即可。 D Til the Cows Come Home(POJ-2387)题目地址：vj题意：最短路裸题，跑一遍dij就可以了。 E Invitation Cards(POJ-1511)题目地址：vj题意：给若干个点，问从出发点到这些点再回来至少需要多少距离（如果要到2和3，那么必须经过1→2→1→3→1，即使在走到2的过程中走到3也一样），数据保证可以从任何点到达任何点。解题：正向边跑一遍最短路，反向边再跑一遍最短路，把所有最短路相加就是答案（可以思考一下为什么，其实也不是很难理解，重点是数据保证可以从任何点到达任何点）。tips：由于这道题的数据量十分大，建议使用链式前向星存图，如果使用邻接表存图，那么请事先记录下每一条边的信息重复利用同一个邻接表多次赋值，使用两个邻接表跑两边最短路会超时（我也不知道为什么。。）。链式前向星的代码就不给了，用链式前向星基本不可能T，不管用SPFA还是DIJ都一样，这里给出邻接表的代码。AC代码：(运行时间约5000ms) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;typedef long long ll;const int maxn = 1e6+5;const int inf = 0x3f3f3f3f;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0):to(a),val(b)&#123;&#125;&#125;;struct nod&#123; int pos; int d; nod(int a = 0,int b = 0):pos(a),d(b)&#123;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q;int T,N,M,dis[maxn],from[maxn],to[maxn],val[maxn];ll ans;void dij()&#123; memset(dis,inf,sizeof(dis)); dis[1]=0; Q.push(nod(1,0));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125; for(int i = 1; i &lt;= N; ++i) ans+=dis[i];&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;N,&amp;M); for(int i = 0; i &lt; M; ++i)&#123; int f,t,v; scanf("%d%d%d",&amp;f,&amp;t,&amp;v); from[i]=f;to[i]=t;val[i]=v; E[from[i]].push_back(edge(to[i],val[i])); &#125; ans = 0; dij(); for(int i = 1; i &lt;= N; ++i) E[i].clear(); for(int i = 0; i &lt; M; ++i) E[to[i]].push_back(edge(from[i],val[i])); dij(); for(int i = 1; i &lt;= N; ++i) E[i].clear(); printf("%lld\n",ans); &#125; return 0;&#125; F Heavy Transportation(POJ-1797)题目地址：VJ题意：给若干个点和边，求一条从1号点到N号点的路径，使路径上最长边的值最大。解题：类似最短路，只不过最短路的定义变了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int maxn = 1000+50;const int inf = 1e6;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; int d; nod(int a = 0,int b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &lt; (nod a, nod b)&#123; return a.d&lt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];int T,N,dis[maxn],m,kase;//dis[i]为从X到i的最短距离，可以根据情况扩充为d[i][j][k].....//加边，无向图时添加两条边void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); return;&#125;void dij()&#123; memset(dis,0,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt; &gt; Q; Q.push(nod(1,inf));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &lt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = min(d,val); if(nd &gt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; N &gt;&gt; m; while(m--)&#123; int f,t,v; cin &gt;&gt; f &gt;&gt; t &gt;&gt; v; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); &#125; dij(); cout &lt;&lt; "Scenario #" &lt;&lt; ++kase &lt;&lt; ":\n"; cout &lt;&lt; dis[N] &lt;&lt; endl &lt;&lt; endl; memset(dis,0,sizeof(dis)); for(int i = 1; i &lt;= N; ++i) E[i].clear(); &#125;&#125; G Arbitrage(POJ-2240)题目地址：VJ题意：能不能套汇？解题：floyd裸题（以前的代码对每一个点做Bellman-Ford竟然过了hdu的这题。。POJ这题只能用floyd）。 H Wormholes(poj-3259)题目地址：VJ解题：SPFA判负环裸题。 I Subway(POJ-2502)题目地址：VJ题意：小明要从家到学校，可以走路或走地铁，给出家、学校、地铁站的坐标（有多条地铁），求到学校至少要多久。解题：最短路，家为1号点，学校为2号点，地铁站为后面的点，同一条地铁线路上的点之间的时间为距离/地铁速度，除此之外的为距离/步行速度，最后从1号点到2号点的最短时间就是答案。tips：需要注意的是这道题里的距离是欧几里得距离而不是曼哈顿距离，以及注意单位的换算。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;const int maxn = 1000+50;const int inf = 0x3f3f3f3f;const double subspeed = 40 * 1000 / 60;const double conspeed = 10 * 1000 / 60;using namespace std;struct point&#123; double x,y; point(double a=0,double b=0):x(a),y(b)&#123;&#125;&#125;po[maxn];struct edge&#123; int to; double val; edge(int a = 0,double b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; double d; nod(int a = 0,double b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];int N;//dis[i]为从X到i的最短距离，可以根据情况扩充为d[i][j][k].....double dis[maxn];//加边，无向图时添加两条边void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); return;&#125;void dij()&#123; for(int i = 1; i &lt;= N; ++i) dis[i] = 1e10; priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; Q.push(nod(1,0));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; double d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; double val = E[pos][i].val; double nd = d + val; if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; po[1].x &gt;&gt; po[1].y; cin &gt;&gt; po[2].x &gt;&gt; po[2].y; N=2; double tx,ty; while(true)&#123; double ttlen = 0; bool flag=0; int st = N+1; while(cin &gt;&gt; tx &gt;&gt; ty)&#123; if(tx==-1 &amp;&amp; ty==-1) break; N++; po[N].x=tx;po[N].y=ty; if(flag==0) flag=1; else&#123; double dx = abs(tx-po[N-1].x),dy = abs(ty-po[N-1].y); double dis = sqrt(dx*dx+dy*dy); E[N].push_back(edge(N-1,dis/subspeed)); E[N-1].push_back(edge(N,dis/subspeed)); &#125; &#125; if(cin.peek()==EOF) break; &#125; for(int i = 1; i &lt;= N; ++i) for(int j = i+1; j &lt;= N; ++j)&#123; double dx = abs(po[i].x-po[j].x),dy = abs(po[i].y-po[j].y); double dis = sqrt(dx*dx+dy*dy); E[i].push_back(edge(j,dis/conspeed)); E[j].push_back(edge(i,dis/conspeed)); &#125; dij(); cout &lt;&lt; round(dis[2]) &lt;&lt; endl; return 0;&#125; 就到这了，后面两题还没做，也不想补。。（咸鱼.jpg）]]></content>
      <categories>
        <category>ACM暑期集训</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
        <tag>最短路问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暑期集训--线段树篇]]></title>
    <url>%2F2019%2F07%2F31%2FTrainSegTree%2F</url>
    <content type="text"><![CDATA[线段树还是一个很神奇的东西，对区间加法有了新的认识。 VJ帐号：LotusIR，代码基本上都共享了（除了少数实在觉得丢脸的）。很多代码直接复制的板子，有比较多的注释，可以忽略。今天正好有空就把这个补了吧比赛地址：VJ A HDU-1166线段树单点加减和查询板子题，不贴代码了，占空间。。 B HDU-1754同A，这题是单点直接修改的。 C HDU-1394题意自己看吧。解题：总而言之统计出初始状态下数列中的逆序对，你可以用归并排序统计，当然今天的主题是线段树，所以就用权值线段树统计吧。接着开始滚动，我们很容易发现，如果我们把开头的第一个数a1放到数列的末尾，那么会多出n-1-a1个逆序对，同时会减少a1个逆序对，滚动一遍这个数列每次更新答案就能的到最小值了。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 5000+200;int tree[maxn],a[maxn],n;void pushup(int rt)&#123; tree[rt] = tree[rt&lt;&lt;1] + tree[rt&lt;&lt;1|1];&#125;//插入一个数字void Insert(int x,int l, int r, int rt)&#123; if(l==r)&#123;tree[rt]++;return;&#125; int m = (l+r) &gt;&gt; 1; if(x &lt;= m) Insert(x,l,m,rt&lt;&lt;1); else Insert(x,m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//查询某个区间中数字出现的次数int queryseg(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return tree[rt]; int res = 0; int m = (l+r) &gt;&gt; 1; if(L &lt;= m) res += queryseg(L,R,l,m,rt&lt;&lt;1); if(R &gt;= m+1) res += queryseg(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); while(cin &gt;&gt; n)&#123; memset(tree,0,sizeof(tree)); int sum = 0; for(int i = 1; i &lt;= n; ++i)&#123; cin &gt;&gt; a[i]; Insert(a[i],0,n-1,1); sum+=queryseg(a[i]+1,n-1,0,n-1,1); &#125; int ans = sum; for(int i = 1; i &lt;= n; ++i)&#123; sum += n-1-a[i]; sum -= a[i]; ans = min(ans,sum); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; D HDU-1698区间改值的求和线段树板子题，不贴代码了。 E POJ-3468同D，这题是区间加减的板子题。 F POJ-2777状态压缩的线段树，还挺有意思的。题意还是自己看~解题：线段树的节点上存储一个统计量，表示这个线段中所有的颜色的种类。具体的说，如果这个区间上有1,2,3,4，那么这个统计量就是0b1111(二进制，存下来以后是一个int或者ll)，同样的，如果有1,3而没有2,4,那么这个统计量就是0b0101，由于颜色的种类小于30种，所以用int就能存了，以防万一可以用ll，在区间合并的时候采用按位或运算(|)就可以了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;iostream&gt;#include &lt;cstring&gt;#define FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)typedef long long ll;const int maxn = 1e5+300;const int inf = 0x3f3f3f3f;using namespace std;ll N,a[maxn],Sum[maxn&lt;&lt;2],lazy[maxn&lt;&lt;2],T,O;//更新当前节点void pushup(int rt)&#123; Sum[rt] = Sum[rt&lt;&lt;1] | Sum[rt&lt;&lt;1|1];&#125;//下传函数void pushdown(int l,int r,int rt)&#123; //区间改值 if(lazy[rt])&#123; lazy[rt&lt;&lt;1] = lazy[rt]; lazy[rt&lt;&lt;1|1] = lazy[rt]; Sum[rt&lt;&lt;1] = lazy[rt]; Sum[rt&lt;&lt;1|1] = lazy[rt]; lazy[rt] = 0; &#125; //区间增减 /*if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] += lazy[rt]; lazy[rt&lt;&lt;1|1] += lazy[rt]; Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m); lazy[rt] = 0; &#125;*/&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123; Sum[rt] = a[l]; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间ll query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Sum[rt]; int m = (l+r) &gt;&gt; 1; ll res = 0; pushdown(l,r,rt); if(L &lt;= m) res |= query(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) res |= query(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;void segupdate(int L,int R,int l,int r,int rt,int lzy)&#123; if(L &lt;= l &amp;&amp; R &gt;= r)&#123; //区间改值 lazy[rt]=lzy; Sum[rt]=lzy; //区间加减 /*lazy[rt]+=lzy; sum[rt]+=(r-l+1) * lzy;*/ return; &#125; int m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1,lzy); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1,lzy); pushup(rt); return;&#125;int getans(ll a)&#123; int cnt = 0; while(a)&#123; if(a&amp;1) cnt++; a &gt;&gt;= 1; &#125; return cnt;&#125;int main()&#123; FAST; cin &gt;&gt; N &gt;&gt; T &gt;&gt; O; memset(lazy,0,sizeof(lazy)); for(int i = 1; i &lt;= N; ++i) a[i]=1; build(1,N,1); char op; while(O--)&#123; cin &gt;&gt; op; if(op=='C')&#123; int L,R,C; cin &gt;&gt; L &gt;&gt; R &gt;&gt; C; if(L&gt;R) swap(L,R); segupdate(L,R,1,N,1,(1&lt;&lt;(C-1))); &#125; else if(op=='P')&#123; int L,R; cin &gt;&gt; L &gt;&gt; R; if(L&gt;R) swap(L,R); cout &lt;&lt; getans(query(L,R,1,N,1))&lt;&lt;endl; &#125; &#125;&#125; G HDU-1542矩形平面交面积，还没做也还没看，下次看情况更新吧，如果还有下次的话 H HDU-4027区间开根号，按照ppt上的做法找着码就能过了。其实就是在暴力修改每一个值的基础上加了一个剪枝。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;bits/stdc++.h&gt;#define FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)typedef long long ll;const int maxn = 1e5+300;const int inf = 0x3f3f3f3f;using namespace std;ll N,M,a[maxn],Sum[maxn&lt;&lt;2],T,X,Y,kase;//更新当前节点void pushup(int rt)&#123; Sum[rt] = Sum[rt&lt;&lt;1] + Sum[rt&lt;&lt;1|1];&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123; Sum[rt] = a[l]; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间ll query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Sum[rt]; int m = (l+r) &gt;&gt; 1; ll res = 0; if(L &lt;= m) res += query(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) res += query(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;void segupdate(int L,int R,int l,int r,int rt)&#123; if(l==r)&#123;Sum[rt] = floor(sqrt(Sum[rt]));return;&#125; if(query(l,r,1,N,1)==r-l+1) return; int m = (l+r) &gt;&gt; 1; if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1); pushup(rt); return;&#125;int main()&#123; FAST; while(cin &gt;&gt; N)&#123; cout &lt;&lt; "Case #" &lt;&lt; ++kase &lt;&lt; ":\n"; for(int i = 1; i &lt;= N; ++i) cin &gt;&gt; a[i]; build(1,N,1); cin &gt;&gt; M; while(M--)&#123; cin &gt;&gt; T &gt;&gt; X &gt;&gt; Y; if(X&gt;Y) swap(X,Y); if(T==0) segupdate(X,Y,1,N,1); if(T==1) cout &lt;&lt; query(X,Y,1,N,1) &lt;&lt; endl; &#125; cout &lt;&lt; endl; &#125;&#125; I HYSBZ-1018神奇的一道题，线段树的节点维护区间内4个顶点的连通性以及中点的联通性，合并区间时按着图合并就行了。（应该可以用向右的延伸性代替中点的联通性，带我改了没过，可能还有啥细节吧。。）AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 1e5+300;const int inf = 0x3f3f3f3f;using namespace std;int N;struct node&#123; bool lt_rt; bool lt_rb; bool lt_lb; bool lb_rt; bool lb_rb; bool rt_rb; bool t_m; bool b_m;&#125;tree[maxn &lt;&lt; 2];void pushup(node &amp;now,node l,node r)&#123; now.lt_rt =(l.lt_rt &amp; now.t_m &amp; r.lt_rt) | (l.lt_rb &amp; now.b_m &amp; r.lb_rt); now.lt_rb =(l.lt_rt &amp; now.t_m &amp; r.lt_rb) | (l.lt_rb &amp; now.b_m &amp; r.lb_rb); now.lb_rt =(l.lb_rt &amp; now.t_m &amp; r.lt_rt) | (l.lb_rb &amp; now.b_m &amp; r.lb_rt); now.lb_rb =(l.lb_rt &amp; now.t_m &amp; r.lt_rb) | (l.lb_rb &amp; now.b_m &amp; r.lb_rb); now.lt_lb =l.lt_lb | (l.lt_rt &amp; now.t_m &amp; r.lt_lb &amp; now.b_m &amp; l.lb_rb); now.rt_rb =r.rt_rb | (r.lt_rt &amp; now.t_m &amp; l.rt_rb &amp; now.b_m &amp; r.lb_rb);&#125;void build(int l,int r,int rt)&#123; if(l==r)&#123; tree[rt].lt_rt=tree[rt].lb_rb=1; tree[rt].t_m=tree[rt].b_m=1; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1);&#125;void update1(int c,int r,int val,int L,int R,int rt)&#123; int m = (L+R) &gt;&gt; 1; if(m==c)&#123; if(r==1) tree[rt].t_m=val; if(r==2) tree[rt].b_m=val; pushup(tree[rt],tree[rt&lt;&lt;1],tree[rt&lt;&lt;1|1]); return; &#125; if(c&lt;=m)update1(c,r,val,L,m,rt&lt;&lt;1); else update1(c,r,val,m+1,R,rt&lt;&lt;1|1); pushup(tree[rt],tree[rt&lt;&lt;1],tree[rt&lt;&lt;1|1]);&#125;void update2(int c,int val,int l,int r,int rt)&#123; if(l==r)&#123; tree[rt].lt_rb=tree[rt].lt_lb=tree[rt].rt_rb=tree[rt].lb_rt=val; return; &#125; int m = (l+r) &gt;&gt; 1; if(c&lt;=m)update2(c,val,l,m,rt&lt;&lt;1); else update2(c,val,m+1,r,rt&lt;&lt;1|1); pushup(tree[rt],tree[rt&lt;&lt;1],tree[rt&lt;&lt;1|1]);&#125;node query(int c1,int c2,int l,int r,int rt)&#123; int m = (l+r) &gt;&gt; 1; if(c1&lt;=l&amp;&amp;c2&gt;=r) return tree[rt]; if(c2 &lt;= m) return query(c1,c2,l,m,rt&lt;&lt;1); else if(c1 &gt;= m+1) return query(c1,c2,m+1,r,rt&lt;&lt;1|1); else&#123; node res = tree[rt]; pushup(res,query(c1,c2,l,m,rt&lt;&lt;1),query(c1,c2,m+1,r,rt&lt;&lt;1|1)); return res; &#125;&#125;int main()&#123; scanf("%d",&amp;N); build(1,N,1); char op[10]; while(scanf("%s",op))&#123; if(op[0]=='E') break; int c1,c2,r1,r2,val; scanf("%d%d%d%d",&amp;r1,&amp;c1,&amp;r2,&amp;c2); if(c1&gt;c2) swap(c1,c2),swap(r1,r2); if(op[0] == 'A')&#123; node n1=query(1,c1,1,N,1),n2=query(c1,c2,1,N,1),n3=query(c2,N,1,N,1); bool ans; if(r1==1 &amp;&amp; r2==1) ans = n2.lt_rt | (n1.rt_rb &amp; n2.lb_rt) | (n3.lt_lb &amp; n2.lt_rb) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lb_rb); if(r1==1 &amp;&amp; r2==2) ans = n2.lt_rb | (n1.rt_rb &amp; n2.lb_rb) | (n3.lt_lb &amp; n2.lt_rt) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lb_rt); if(r1==2 &amp;&amp; r2==1) ans = n2.lb_rt | (n1.rt_rb &amp; n2.lt_rt) | (n3.lt_lb &amp; n2.lb_rb) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lt_rb); if(r1==2 &amp;&amp; r2==2) ans = n2.lb_rb | (n1.rt_rb &amp; n2.lt_rb) | (n3.lt_lb &amp; n2.lb_rt) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lt_rt); puts(ans?"Y":"N"); &#125; else&#123; val = (op[0]=='O'?1:0); if(c1==c2) update2(c1,val,1,N,1); else update1(c1,r1,val,1,N,1); &#125; &#125;&#125; 区间加法好了今天的题就到这里了，最后说一下区间加法。什么是区间加法呢？简单来说，把一个大的区间分割成两个小的区间，如果能从小区间的统计量推算出大区间的统计量，那么这个统计量就是符合区间加法的。比如在今天的H题中，显然可以从小区间的颜色种类推出大区间的颜色种类，当然也有更复杂也更神奇一些的，比如在I题中，从小区间的联通性可以推知大区间的联通性，再比如说实际上gcd也是符合区间加法的，诸如此类的还有很多，都可以用线段树来进行维护。在线段树的代码中，有一个叫做pushup的函数，实际上这个函数就是用子区间做区间加法来更新母区间，尽管平时我们只用它来自下而上地更新线段树，但如果区间加法的过程较为复杂，我们也可以用这个函数来做区间加法，就像I题中那样。]]></content>
      <categories>
        <category>ACM暑期集训</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暑期集训第一周]]></title>
    <url>%2F2019%2F07%2F29%2FTrain1st%2F</url>
    <content type="text"><![CDATA[前言暑期集训开始了呢！一点都不兴奋呢！好吧不扯淡了，第一周学了STL、动态规划、搜索、数论等相关内容。 STL讲道理STL、C++的训练题真是一点意思也没有，全是模拟，没什么特别的题，先贴一个或许会用的到的函数吧（貌似以前就说过但不怎么用。。）。lower_bound(a,a+N,ask)函数,找到在a~a[N-1]范围内第一个比ask大的元素（可能是数字也可能是字符串、字符等）。返回一个指针，将这个指针减去a可以得到下标，由于是用二分实现，复杂度为log(n)。然后的话队列套队列挺有意思的（也可以各种STL嵌套），就贴这道题吧。 UVA-540VJ地址：UVA540题意简述：有若干个人排队，每个人有一个所属的队伍，当一个新来的人进入队列时，如果有队友在队列中，则插入最后一个队友的后面，否则排到队尾。ENQUEUE x代表x号进入队伍，DEQUEUE代表队列第一人出队，对于每一次DEQUEUE输出出队的人的编号，STOP停止模拟。解题：模拟就完事了，维护一个队伍的队列和队伍内的队列。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;const int maxn = 1e3+200;using namespace std;queue&lt;int&gt; teamqueue;queue&lt;int&gt; manqueue[maxn];map&lt;int,int&gt; Team;bool inqueue[maxn];int t,a,n,kase;string op;int main()&#123; while(cin &gt;&gt; t)&#123; if(t==0) break; cout &lt;&lt; "Scenario #" &lt;&lt; ++kase &lt;&lt; endl; for(int i = 1; i &lt;= t; ++i)&#123; cin &gt;&gt; n; while(n--)&#123; cin &gt;&gt; a; Team[a]=i; &#125; &#125; while(cin &gt;&gt; op)&#123; if(op=="STOP") break; if(op=="ENQUEUE")&#123; cin &gt;&gt; a; if(inqueue[Team[a]]) manqueue[Team[a]].push(a); else&#123; manqueue[Team[a]].push(a); teamqueue.push(Team[a]); inqueue[Team[a]]=true; &#125; &#125; if(op=="DEQUEUE")&#123; int teamid=teamqueue.front(); int manid=manqueue[teamid].front(); manqueue[teamid].pop(); if(manqueue[teamid].empty())&#123; teamqueue.pop(); inqueue[teamid]=false; &#125; cout &lt;&lt; manid &lt;&lt; endl; &#125; &#125; cout &lt;&lt; endl; for(int i = 1; i &lt;= t; ++i) while(!manqueue[i].empty()) manqueue[i].pop(); while(!teamqueue.empty()) teamqueue.pop(); memset(inqueue,0,sizeof(inqueue)); &#125; return 0;&#125; 其实也挺无聊的。。而且UVA的格式要求真的是有毒。。 贪心贪心算法怎么说呢。。反正我不太擅长，可能我不够贪吧。。直接上题了。 POJ1700-Crossing RiverVJ地址：POJ1700题意简述：经典的过河问题。有N个人和1条船，第i个人过河需要的时间为ai，船能载两个人，船过河的时间是两个人中较慢的那个人的时间，问把所有人运过河至少需要多少时间。解题：想着让最快的人不停带人过去再回来，然后发现是错的。。因为还有另一种策略，最快的和第二快的一起过去，然后最快的回来，接着最慢的和第二慢的过去，b回来。这两种策略中选择一个较快的就是答案，此外当人数小于等于3时直接处理即可。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#include &lt;string&gt;typedef long long ll;const int inf = 0x3f3f3f3f;const int maxn = 1500;using namespace std;int T,N,a[maxn],ans;int main()&#123; cin &gt;&gt; T; while(T--)&#123; ans=0; cin &gt;&gt; N; for(int i = 0; i &lt; N; ++i) cin &gt;&gt; a[i]; sort(a,a+N); if(N &lt;= 3)&#123; if(N==1) ans = a[0]; if(N==2) ans = a[1]; if(N==3) ans = a[0]+a[1]+a[2]; &#125; else&#123; for(int i = N-1; i &gt; 1; i-=2)&#123; if(i &gt;= 3)&#123; if(a[0]+a[i-1]&gt;=2*a[1]) ans+=a[1]+a[0]+a[i]+a[1]; else ans+=a[i]+a[0]+a[i-1]+a[0]; &#125; else ans += a[2] + a[0]; &#125; ans += a[1]; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; POJ3253-Fence RepaierVJ地址：POJ3253题意：哈夫曼树经典例题。AC代码： 12345678910111213141516171819202122232425262728#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;typedef long long ll;const int inf = 0x3f3f3f3f;const int maxn = 5e4+500;using namespace std;ll n,input,sum,ans;int main()&#123; priority_queue&lt; ll,vector&lt;ll&gt;,greater&lt;ll&gt; &gt; pq; cin &gt;&gt; n; for(ll i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; input; pq.push(input); &#125; while(pq.size()&gt;1)&#123; ll min1 = pq.top(); pq.pop(); ll min2 = pq.top(); pq.pop(); ans += min1+min2; pq.push(min1+min2); &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 剩下几道比较简单或者不会，不想补了（咸鱼） 搜索搜索比较简单，暴力就完事了，贴两道状压搜索。 HDU1429-胜利大逃亡VJ地址：HDU1429题意：捡钥匙走迷宫，问能否在指定时间走出迷宫。解题：在BFS的基础上用一个int来存储角色获得的钥匙的状态，然后进行朴素的BFS即可。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;using namespace std;const int zt=0b111111111111;const int maxn = 22;const int dir[4][2]=&#123;1,0,-1,0,0,1,0,-1&#125;;struct node&#123; int x,y,dep,key; node(int a,int b,int c,int d):x(a),y(b),dep(c),key(d)&#123;&#125;&#125;;char mp[maxn][maxn];int stx,sty,ans,dep[maxn][maxn][zt],n,m,t;void solve()&#123; memset(dep,-1,sizeof(dep)); ans = -1; queue&lt;node&gt; q; dep[stx][sty][0]=0; q.push(node(stx,sty,0,0)); while(!q.empty())&#123; node u = q.front(); q.pop(); int nkey=u.key; if(u.dep&gt;=t) break; if(mp[u.x][u.y]=='^')&#123; ans=u.dep; break; &#125; if(mp[u.x][u.y] &gt;= 'a' &amp;&amp; mp[u.x][u.y] &lt;= 'j') nkey |= (1 &lt;&lt; (mp[u.x][u.y]-'a')); for(int i = 0; i &lt; 4; ++i)&#123; int nx=u.x+dir[i][0],ny=u.y+dir[i][1]; if(nx &lt; 1 || nx &gt; n || ny &lt; 1 || ny &gt; m) continue; if(mp[nx][ny]=='*') continue; if(mp[nx][ny]=='.' || mp[nx][ny]=='@' || (mp[nx][ny] &gt;= 'a' &amp;&amp; mp[nx][ny] &lt;= 'j') || mp[nx][ny] == '^') if(dep[nx][ny][nkey]==-1)&#123; dep[nx][ny][nkey]=u.dep+1; q.push(node(nx,ny,u.dep+1,nkey)); &#125; if(mp[nx][ny]&gt;='A'&amp;&amp;mp[nx][ny]&lt;='J') if(nkey &amp; (1 &lt;&lt; mp[nx][ny]-'A')) if(dep[nx][ny][nkey]==-1)&#123; dep[nx][ny][nkey]=u.dep+1; q.push(node(nx,ny,u.dep+1,nkey)); &#125; &#125; &#125;&#125;int main()&#123; while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; t)&#123; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j)&#123; cin &gt;&gt; mp[i][j]; if(mp[i][j]=='@')&#123; stx=i; sty=j; &#125; &#125; solve(); cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 代码可能丑了点，不过难得搜索题一发AC！ CF||SHU||牛客-CSL的校园卡VJ地址：CSL的校园卡解题：不仅加入了一个状态记录走过的路径，而且有两个点，于是VIS[x][y]变成了vis[path][x1][y1][x2][y2]。接着进行BFS就行了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;const int maxn = 0b1111111111111111;const int inf = 0x3f3f3f3f;int n,m,tar,vis[maxn][5][5][5][5],mp[5][5],stx,sty,ans;int dir[4][2]=&#123;&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,1&#125;,&#123;0,-1&#125;&#125;;char input;struct node&#123; int x1,y1; int x2,y2; int now; int dep; node(int a=0,int b=0,int c=0,int d=0,int e=0,int f=0):x1(a),y1(b),x2(c),y2(d),now(e),dep(f)&#123;&#125;&#125;;bool legal(int x,int y)&#123; if(x&gt;=0&amp;&amp;y&gt;=0&amp;&amp;x&lt;n&amp;&amp;y&lt;m&amp;&amp;mp[x][y]==1) return true; else return false;&#125;void BFS()&#123; queue&lt;node&gt; q; q.push(node(stx,sty,stx,sty,1&lt;&lt;(stx*m+sty),0)); vis[1&lt;&lt;(stx*m+sty)][stx][sty][stx][sty]=1; while(!q.empty())&#123; int x1,y1,x2,y2,now,dep; x1=q.front().x1; y1=q.front().y1; x2=q.front().x2; y2=q.front().y2; now=q.front().now; dep=q.front().dep; q.pop(); //cout &lt;&lt; x1 &lt;&lt; " " &lt;&lt; y1 &lt;&lt; " " &lt;&lt; x2 &lt;&lt; " " &lt;&lt; y2 &lt;&lt; " " &lt;&lt; now &lt;&lt; " " &lt;&lt; dep &lt;&lt; " " &lt;&lt; tar &lt;&lt; endl; if(now==tar)&#123; ans=dep; break; &#125; for(int i = 0; i &lt; 4; i++)&#123; int newx1,newy1,tmp; newx1=x1+dir[i][0];newy1=y1+dir[i][1]; if(!legal(newx1,newy1)) continue; for(int j = 0; j &lt; 4; j++)&#123; int newx2,newy2; newx2=x2+dir[j][0];newy2=y2+dir[j][1]; if(legal(newx2,newy2)) tmp = now | (1&lt;&lt;(newx2*m+newy2)) | (1&lt;&lt;(newx1*m+newy1)); else continue; if(!vis[tmp][newx1][newy1][newx2][newy2])&#123; vis[tmp][newx1][newy1][newx2][newy2]=1; q.push(node(newx1,newy1,newx2,newy2,tmp,dep+1)); &#125; &#125; &#125; &#125;&#125;int main()&#123; cin &gt;&gt; n &gt;&gt; m; for(int i = 0; i &lt; n; ++i) for(int j = 0; j &lt; m; ++j)&#123; cin &gt;&gt; input; if(input == 'X') mp[i][j]=0; else&#123; mp[i][j]=1; tar |= (1&lt;&lt;(i*m+j)); &#125; if(input == 'S')&#123; stx=i; sty=j; &#125; &#125; BFS(); cout &lt;&lt; ans;&#125; 倒也不难，但没接触过状压搜索的话估计想不到。 搜索就这样了，反正就是各种暴力。 动态规划DP。。。DP咋办呢，我实在时不会啊emmmm LCS（最长公共子序列）VJ地址：HDU1159题意：LCS裸题，经典DP应用，直接上代码了。AC代码： 1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;const int maxn = 200;using namespace std;string s1,s2;int lcs(string s1, string s2) &#123; int len1 = s1.size(); int len2 = s2.size(); vector&lt;vector&lt;int&gt;&gt; c(len1+1, vector&lt;int&gt;(len2+1, 0)); for (int i = 1 ; i &lt;= len1; i++) &#123; for(int j = 1; j &lt;=len2 ; j++) &#123; if (s1[i-1] == s2[j-1]) c[i][j] = c[i - 1][j - 1] + 1; else if (c[i - 1][j] &gt;= c[i][j - 1]) c[i][j] = c[i - 1][j]; else c[i][j] = c[i][j - 1]; &#125; &#125; return c[len1][len2];&#125;int main()&#123; while(cin &gt;&gt; s1 &gt;&gt; s2)&#123; cout &lt;&lt; lcs(s1,s2) &lt;&lt; endl; &#125; return 0;&#125; CF1105C-Ayoub and Lost ArrayVJ地址：CF1105C题意：给定l,r,n，求在[l,r]内选n个数(可以重复选)，要求这些数的和能被3整除，有几种选法。解题：求出[l,r]范围内被3除余0,1,2的数的个数，从小到大更新dp。dp[i][j]表示选i个数，余数为j的方案数。显然dp[0][0]=0,且有：dp[i+1][0]=dp[i][0]*MOD[0]+dp[i][1]*MOD[2]+dp[i][2]*MOD[1]以此类推，注意取模，最后输出dp[n][0]就是答案，另外统计[l,r]内被3除余数不同的数的个数时不能暴力。。AC代码： 12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;const int maxn = 2e5+100;const int mod = 1e9+7;using namespace std;long long n,l,r,MOD[3],dp[maxn][3];int main()&#123; cin &gt;&gt; n &gt;&gt; l &gt;&gt; r; for(int i = 0; i &lt; 3; ++i) MOD[i]=(r-l+1)/3; for(int i = 0; i &lt; (r-l+1)%3; ++i)&#123; if((l+i)%3==0)MOD[0]++; if((l+i)%3==1)MOD[1]++; if((l+i)%3==2)MOD[2]++; &#125; dp[0][0]=1; for(int i = 1; i &lt;= n; ++i)&#123; dp[i][0] = (dp[i-1][0]*MOD[0]%mod+dp[i-1][1]*MOD[2]%mod+dp[i-1][2]*MOD[1]%mod)%mod; dp[i][1] = (dp[i-1][0]*MOD[1]%mod+dp[i-1][1]*MOD[0]%mod+dp[i-1][2]*MOD[2]%mod)%mod; dp[i][2] = (dp[i-1][0]*MOD[2]%mod+dp[i-1][1]*MOD[1]%mod+dp[i-1][2]*MOD[0]%mod)%mod; &#125; cout &lt;&lt; dp[n][0] &lt;&lt; endl; return 0;&#125; CF1096D-Easy ProblemVJ地址:CF1096D题意：给一个字符串，删去若干个字符，删去每个字符的cost不同，问让这个字符串不含”hard”子序列至少需要多少cost。解题：对于’h’，只能删去所有的’h’，对于’a’，可以删去所有’h’或所有’a’或所有符合顺序的’ha’，以此类推。AC代码： 1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;const int maxn = 1e5+100;using namespace std;int n;int val[maxn];string s;long long ans,h,a,r,d;int main()&#123; cin &gt;&gt; n; cin &gt;&gt; s; for(int i = 0; i &lt; n; ++i) cin &gt;&gt; val[i]; for(int i = 0; i &lt; n; ++i)&#123; if(s[i]=='h') h+=val[i]; if(s[i]=='a') a=min(h,a+val[i]); if(s[i]=='r') r=min(a,r+val[i]); if(s[i]=='d') d=min(r,d+val[i]); &#125; cout &lt;&lt; d &lt;&lt; endl; return 0;&#125; h,a,r,d分别记录到i位置对于该字母的最优策略，显然后面的字母的最优策略会优于前面的或者等于前面的，其实就是一个dp[4][n]被压缩到1维的结果; HDU1024-Max Sum Plus Plusvj地址：HDU1024题意：自己看吧。。解题：挺神奇的，把2维的dp压缩的过程。（还没很弄懂，以后再回来看看吧）AC代码： 123456789101112131415161718192021222324252627#include &lt;bits/stdc++.h&gt;const int maxn = 1e6+100;const int mod = 1e9+7;const long long inf = 0x3f3f3f3f;using namespace std;int m,n;long long dp[maxn],a[maxn],pre[maxn],mx;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(); while(cin &gt;&gt; m &gt;&gt; n)&#123; memset(dp,0,sizeof(dp)); memset(pre,0,sizeof(pre)); for(int i = 1; i &lt;= n; ++i) cin &gt;&gt; a[i]; for(int i = 1; i &lt;= m; ++i)&#123; mx = -inf; for(int j = i; j &lt;= n; ++j)&#123; dp[j]=max(dp[j-1],pre[j-1])+a[j]; pre[j-1]=mx; mx=max(mx,dp[j]); &#125; &#125; cout &lt;&lt; mx &lt;&lt; endl; &#125; return 0;&#125; 做了一天的DP感觉自己的DP还是很菜。。 数论今天累了明天吧。 - 2019/7/29]]></content>
      <categories>
        <category>ACM暑期集训</category>
      </categories>
      <tags>
        <tag>-STL -动态规划 -搜索 -数论 -贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU09]]></title>
    <url>%2F2019%2F07%2F08%2FHDU09%2F</url>
    <content type="text"><![CDATA[比赛地址：HDU09做了四道。。还行吧。 HDU09A Big binary tree待补 B Ch’s gift题意：给一棵树，点有点权，给两个点，给最小值和最大值，求两点间的路径上点权在[最小值，最大值]范围内的点权之和。解题：树链剖分？还没学，明天看情况补吧。 C CSGO计算几何？大陀螺，待补。 D Dying Light看着像计算几何，待补。 FFF at Valentine题意：给一张有向图，问存不存在两点互不联通。解题：方法一：暴力万岁！对每个点进行BFS判断联通即可。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;bits/stdc++.h&gt;const int maxn = 1100;using namespace std;int T,m,n,able[maxn][maxn],vis[maxn];vector&lt;int&gt; E[maxn];void BFS(int pos)&#123; memset(vis,0,sizeof(vis)); queue&lt;int&gt; q; q.push(pos); while(!q.empty())&#123; int t = q.front(); q.pop(); if(vis[t]) continue; vis[t]=1; able[pos][t] = 1; for(int i = 0; i &lt; E[t].size(); ++i) if(!vis[E[t][i]]) q.push(E[t][i]); &#125;&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;n,&amp;m); while(m--)&#123; int f,t; scanf("%d%d",&amp;f,&amp;t); E[f].push_back(t); &#125; for(int i = 1; i &lt;= n; ++i) BFS(i); bool flag = true; for(int i = 1; i &lt;= n &amp;&amp; flag; ++i)&#123; for(int j = 1; j &lt;= n &amp;&amp; flag; ++j)&#123; if(!able[i][j] &amp;&amp; !able[j][i]) flag = false; &#125; &#125; if(!flag) puts("Light my fire!"); else puts("I love you my love and our love save us!"); for(int i = 1; i &lt;= n; ++i) E[i].clear(); memset(able,0,sizeof(able)); &#125; return 0;&#125; 时间卡的比较紧。。还好数据不强。 方法二：tarjan+拓扑排序=我不会代码：CSDN博客 Senior Pan题意：给一张有向图，给一个点集，求点集中最短路的最小值。解题：方法一：构造一个超级源点，连接所有点集中的点且边权为0。超级源点到点集中点的最短路的最小值就是点集中最短路的最小值，跑一次dij就好了。注意最小值可能是一个点到自己的距离，要把这种情况排除。 tips:添加超级源点可以通过把所有与超级源点相连的点push进queue实现，不必真的添加源点。 AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;const int maxn = 100000+400;const int inf = 0x3f3f3f3f;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; int d; int from; nod(int a = 0,int b = 0,int c = 0)&#123;pos=a;d=b;from=c;&#125; friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;vector&lt;edge&gt; E[maxn];vector&lt;int&gt; beg;int T,n,m,k,dis[maxn],mndis = inf,vis[maxn];void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); return;&#125;void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; for(int i = 0; i &lt; beg.size(); ++i) Q.push(nod(beg[i],0,beg[i])); while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; int from = temp.from; Q.pop(); if(d &gt; dis[pos]) continue; for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; if(vis[to] &amp;&amp; to != from) mndis = min(mndis,nd); if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd,vis[to]?to:from)); &#125; &#125; &#125;&#125;void reset()&#123; beg.clear(); for(int i = 1; i &lt;= n; ++i) E[i].clear(); mndis = inf; memset(vis,0,sizeof(vis));&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; int kase = 0; while(T--)&#123; cin &gt;&gt; n &gt;&gt; m; while(m--)&#123; int from,to,val; cin &gt;&gt; from &gt;&gt; to &gt;&gt; val; add(from,to,val); &#125; cin &gt;&gt; k; while(k--)&#123; int x; cin &gt;&gt; x; beg.push_back(x); vis[x]=1; &#125; dij(); cout &lt;&lt; "Case #" &lt;&lt; ++kase &lt;&lt; ": " &lt;&lt; mndis &lt;&lt; endl; reset(); &#125; return 0;&#125; 方法二：最短路+随机=我又不会代码：CSDN博客 G Missile Interception待补 H Numbers题意：给两个数列a和数列b，数列b中的每一个数的值是数列a中两个数的和。如a为1，2，3，那么b为1+2，1+3，2+3也就是3，4，5。解题：前两个数一定是a中的数，他们的和一定是b中的一个数，向后循环，每在a中加入一个数从数列中删去所有这个数能产生的和。用map维护。总之就是暴力模拟。。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 125251;const int INF = 0x3f3f3f3f;int str[maxn];int m,n;vector&lt;int&gt; a;map&lt;int,int&gt; b; //记录first在b中出现的次数int main()&#123; while(scanf("%d",&amp;m)!=EOF) &#123; n = (-1 + sqrt(1 + 8 * m)) / 2; for(int i=0;i&lt;m;i++) scanf("%d",&amp;str[i]); sort(str,str+m); a.clear(); b.clear(); a.push_back(str[0]); a.push_back(str[1]); b[a[0] + a[1]]++; for(int i=2;i&lt;m;i++) &#123; if(b[str[i]]) &#123; b[str[i]]--; continue; &#125; else &#123; a.push_back(str[i]); for(int j=0;j&lt;a.size()-1;j++) &#123; int sum = a[j] + str[i]; b[sum]++; &#125; &#125; &#125; printf("%d\n",n); for(int i=0;i&lt;n-1;i++) &#123; printf("%d ",a[i]); &#125; printf("%d\n",a[n-1]); &#125;&#125; I Senior PanⅡ待补。 J Two strings字符串匹配，dp，队友太猛了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 2500 + 10;char a[maxn],b[maxn];int dp[maxn][maxn];int main()&#123; int T;scanf("%d",&amp;T); while(T --) &#123; scanf("%s%s",a+1,b+1); int la = strlen(a+1),lb = strlen(b+1); bool flag = true; int j = 1;memset(dp,0,sizeof(dp)); dp[0][0] = 1; for(int i = 1; i &lt;= la; i ++) &#123; for(int j = 1; j &lt;= lb; j ++) &#123; if(a[i] == b[j]) &#123; if( (b[j + 1] == '*' &amp;&amp; dp[i][j - 1]) || dp[i - 1][j - 1] == 1)dp[i][j] = 1; if(b[j - 1] == '*' &amp;&amp; ( dp[i - 1][j - 3] || dp[i][j - 1]) )dp[i][j] = 1; &#125; else if(b[j] == '.') &#123; if(dp[i - 1][j - 1])dp[i][j] = 1; &#125; else if(b[j] == '*') &#123; if(a[i - 1] == a[i] &amp;&amp; (dp[i - 1][j] || dp[i - 1][j - 1]) )dp[i][j] = 1; if(b[j - 1] == '.' &amp;&amp; dp[i - 1][j - 1] &amp;&amp; a[i] == a[i - 1])dp[i][j] = 1; if(dp[i][j - 2] || dp[i][j - 1] )dp[i][j] = 1; &#125; else dp[i][j] = 0; &#125; &#125; if(dp[la][lb]) printf("yes\n"); else printf("no\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM自闭日记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排列组合笔记]]></title>
    <url>%2F2019%2F07%2F04%2Fcombination%2F</url>
    <content type="text"><![CDATA[密码是我学号~（小技巧怎么能分享呢hhhhhhh） Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM暑期训练赛（HDU08）]]></title>
    <url>%2F2019%2F07%2F04%2FHDU08%2F</url>
    <content type="text"><![CDATA[2019/7/4 真TM热今天的比赛是英语阅读专场。 比赛地址：HDU08由于是英语阅读专场（星战粉专场）只给做出来的题的题意和题解了。。真的不想翻译有多阅读专场？建议阅读H题。 HDU08A Army Formations数据结构题，不会。 B Battlestation Operational没看，天澜大佬做出来了，不知道有多难。 C Casual Podracing没看，不翻译了。 D Death Podracing没看。 E Engineering of the Clones没看。 F Fleet of the Eternal Throne题意：有点难解释，自己看吧。。解题：杭电真喜欢AC自动机把给出的模式串构造AC自动机，AC自动机的节点记录当前字符串的长度，对于给出的X和Y，先把字符串X在AC自动机上跑一遍，记录所有匹配到的节点（包括fail节点，不一定是字符串的结束节点），这些匹配到的节点既是某个模式串的前缀，又是X的子串。再把字符串Y在AC自动机上跑一遍，匹配到已经被标记过的节点时更新最长长度，最后输出即可。这题的输入有点坑，模式串一共1e5行，但模式串的总长又不超过1e5，写输入写了好久。。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166#include &lt;bits/stdc++.h&gt;const int maxn = 1e5 + 500;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[26]; trie *fail; int len; bool flag; trie() &#123; len = 0; flag = 0; fail = NULL; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root;int T,n,m,x,y,pos[maxn];char S[maxn],s1[maxn],s2[maxn];void Insert(char *s)&#123; trie *p = root; int len = strlen(s); for(int i = 0; i &lt; len; i++) &#123; int id = s[i] - 'a'; if(p-&gt;nxt[id] != NULL) &#123; p -&gt; nxt[id] -&gt; len = p -&gt; len + 1; p = p-&gt;nxt[id]; &#125; else &#123; p -&gt; nxt[id] = new trie; p -&gt; nxt[id] -&gt; len = p -&gt; len + 1; p = p -&gt; nxt[id]; &#125; &#125;&#125;void getFail()&#123; queue&lt;trie*&gt; q; q.push(root); trie *temp,*p; while(!q.empty()) &#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 26; ++i) &#123; if(p -&gt; nxt[i]) &#123; if(p == root) p -&gt; nxt[i] -&gt; fail = root; else &#123; temp = p -&gt; fail; while(temp) &#123; if(temp -&gt; nxt[i]) &#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; temp = temp -&gt; fail; &#125; if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125;void queryx(char* s)&#123; int i = 0; trie *p = root; trie *temp; while(s[i]) &#123; int id = s[i] - 'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root) &#123; temp -&gt; flag = 1; temp = temp -&gt; fail; &#125; i++; &#125; return;&#125;int queryy(char* s)&#123; int i = 0,mxlen = 0; trie *p = root; trie *temp; while(s[i]) &#123; int id = s[i] - 'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root) &#123; if(temp -&gt; flag == 1) mxlen = max(mxlen,temp-&gt;len); temp = temp -&gt; fail; &#125; i++; &#125; return mxlen;&#125;void Free(trie *p)&#123; for(int i = 0; i &lt; 26; ++i) &#123; if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); &#125; delete(p); p = NULL;&#125;void reset(trie *p)&#123; for(int i = 0; i &lt; 26; ++i) &#123; if(p -&gt; nxt[i] != NULL) reset(p-&gt;nxt[i]); &#125; p -&gt; flag = 0;&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; root = new trie; scanf("%d",&amp;n); int d = 0; getchar(); for(int i = 1; i &lt;= n; ++i)&#123; gets(S+d); Insert(S+d); pos[i] = d; d += strlen(S+d) + 1; &#125; getFail(); scanf("%d",&amp;m); while(m--)&#123; reset(root); scanf("%d%d",&amp;x,&amp;y); queryx(S+pos[x]); printf("%d\n",queryy(S+pos[y])); &#125; Free(root); &#125;&#125; G Galaxy at War没看 H Hybrid Crystals题意：给出数组a1,a2,a3….an，同时给出字符数组b1,b2,b3….bn,如果bi是N，那么ai可正可负，如果bi是L，那么ai是正的，如果bi是D，那么ai是负的，给出一个整数k，询问能否从ai中取出若干个使它们的和为k。此外还有一个奇怪的不等式$ai≤∑j=1i−1aj[bj=N]+∑j=1i−1aj[bi=L∩bj=L]+∑j=1i−1aj[bi=D∩bj=D]( 2 ≤ i ≤ n ).$解题：这个不等式保证了相邻的ai至多只会差1，初始状态下只有a1可以构成[-1,1]间所有的整数，此时如果来了一个正数1，那么能构成的值变成了[0,1]，如果来了一个负数1，那么能构成[-2,0]，若是正负1,那么能构成[-2,2]，区间的扩展是连续的，例如对于a1，只有出现一个3才会打断区间的连续性变成[2,4]，也就是只有当ai+1=ai+2时才会打断连续性，而不等式保证了不会出现这种情况。换句话说，每一个数都只会连续地扩大能够得到的和的范围，因此只要统计出最大负值和最大正值再判断k是否在这个区间呢就可以了。AC代码： 123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;const int maxn = 1e3+200;using namespace std;int T,n,k,a[maxn],psum,nsum;char in;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; psum = 0;nsum = 0; cin &gt;&gt; n &gt;&gt; k; for(int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; a[i]; &#125; for(int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; in; if(in == 'L') psum+=a[i]; else if(in == 'D') nsum+=a[i]; else&#123;psum+=a[i];nsum+=a[i];&#125; &#125; if(k &gt; 0)&#123; if(k &lt;= psum) puts("yes"); else puts("no"); &#125; else&#123; if(-k &lt;= nsum) puts("yes"); else puts("no"); &#125; &#125; return 0;&#125; I I am your Father!没看。 J Jedi Council没看。 K Killer Names题意：给出两个整数n和m，要求在大小为m的字符集中选出若干个字符，组成两段长度为n的字符串，要求两串字符串中不能有相同的字符（如在第一个字符串中出现了’a’，那么第二个字符串中就不能再出现’a’，但同一个字符串内可以有重复的字符）。题解：排列组合题，学到了新的东西——第二类斯特林数，第二类斯特林数是将m个格子分成n个集合有多少种不同的分法，我准备单独写一篇排列组合的文章了。。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;bits/stdc++.h&gt;typedef long long ll;const ll mod = 1e9+7;using namespace std;ll T,n,m,fac[3000],c[3000][3000],s[3000][3000];ll qpow(ll a,ll b)&#123; ll res=1; while(b)&#123; if(b&amp;1) res = res * a % mod; b &gt;&gt;= 1; a = a * a % mod; &#125; return res;&#125;void init()&#123; //阶乘 fac[0]=fac[1]=1; for(int i = 2; i &lt;= 2000; ++i) fac[i] = fac[i-1] * i % mod; //组合数（杨辉三角） for(int i=0;i&lt;=2000;i++) &#123; for(int j=0;j&lt;=i;j++) &#123; if(j==0 || j==i) c[i][j]=1; else c[i][j] = (c[i-1][j-1]+c[i-1][j])%mod; &#125; &#125; //斯特林数 for(int i=0;i&lt;=2000;i++) s[i][i]=1,s[i][0]=0; for(int i=1;i&lt;=2000;i++) &#123; for(int j=1;j&lt;=i-1;j++) &#123; s[i][j]=(j*s[i-1][j]+s[i-1][j-1])%mod; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); init(); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n &gt;&gt; m; ll ans=0; for(ll i = 1; i &lt;= m - 1; ++i)&#123; ll tmp = c[m][i] * s[n][i] % mod * fac[i] % mod; for(ll j = 1; j &lt;= m - i; ++j)&#123; ans = ans + tmp * c[m-i][j] % mod * s[n][j] % mod * fac[j] % mod; ans %= mod; &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 后记题面实在太长了，连补的欲望都没有了。。]]></content>
      <categories>
        <category>ACM自闭日记</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>排列组合</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树的区间修改]]></title>
    <url>%2F2019%2F07%2F04%2FSegmentChange%2F</url>
    <content type="text"><![CDATA[又是线段树相关的内容！这次的文章会介绍线段树的区间修改（包括加减和改值） 在开始区间修改的介绍前，如果你对线段树没有任何了解，请移步线段树基础。 懒惰标记区间修改用到了一个很巧妙的思想——懒惰标记。在某个节点上的懒惰标记，就是它的子节点需要做出的变化，为节点加上懒惰标记后，不需要急于将标记下传，当以后的查询过程或修改过程遍历到它是再进行下传。于是线段树的结构体中又多了一个lazy变量，当然也可以用lazy数组实现。本文代码为求和线段树 下传函数将懒惰标记下传的函数，在修改、查询等过程中用到，记得下传后消除自己的懒惰标记。比较简单，自己理解。 1234567891011121314151617181920void pushdown(int l,int r,int rt)&#123; //区间改值 if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] = lazy[rt]; lazy[rt&lt;&lt;1|1] = lazy[rt]; Sum[rt&lt;&lt;1] = lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] = lazy[rt] * (r-m); lazy[rt] = 0; &#125; //区间增减 /*if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] += lazy[rt]; lazy[rt&lt;&lt;1|1] += lazy[rt]; Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m); lazy[rt] = 0; &#125;*/&#125; 区间修改区间修改包含了改值和加减，它的过程与区间查询的过程类似，当要修改的区间完全包含某一节点，直接给该节点打上lazy标记，否则继续拆分。 123456789101112131415161718void segupdate(int L,int R,int l,int r,int rt,int lzy)&#123; if(L &lt;= l &amp;&amp; R &gt;= r)&#123; //区间改值 lazy[rt]=lzy; Sum[rt] = (r-l+1) * lzy; //区间加减 /*lazy[rt]+=lzy; sum[rt]+=(r-l+1) * lzy;*/ return; &#125; ll m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1,lzy); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1,lzy); pushup(rt); return;&#125; 完整模版线段树区间修改新增的东西到此结束，但是由于懒惰标记和下传函数的加入，单点修改和查询函数也要做出相应的修改（添加下传函数）。下面给出完整的模版（数组实现求和线段树），不含主函数。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;bits/stdc++.h&gt;#define FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)typedef long long ll;const int maxn = 2e5+300;const int inf = 0x3f3f3f3f;using namespace std;int a[maxn],Sum[maxn&lt;&lt;2],lazy[maxn];//更新当前节点void pushup(int rt)&#123; Sum[rt] = Sum[rt&lt;&lt;1] + Sum[rt&lt;&lt;1|1];&#125;//下传函数void pushdown(int l,int r,int rt)&#123; //区间改值 if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] = lazy[rt]; lazy[rt&lt;&lt;1|1] = lazy[rt]; Sum[rt&lt;&lt;1] = lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] = lazy[rt] * (r-m); lazy[rt] = 0; &#125; //区间增减 /*if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] += lazy[rt]; lazy[rt&lt;&lt;1|1] += lazy[rt]; Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m); lazy[rt] = 0; &#125;*/&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123; Sum[rt] = a[l]; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间int query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Sum[rt]; int m = (l+r) &gt;&gt; 1; int res = 0; pushdown(l,r,rt); if(L &lt;= m) res += query(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) res += query(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 将L的值改为Vvoid update(int L,int V,int l,int r,int rt)&#123; if(l==r)&#123;Sum[rt]=V;return;&#125; int m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) update(L,V,l,m,rt&lt;&lt;1); else update(L,V,m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;void segupdate(int L,int R,int l,int r,int rt,int lzy)&#123; if(L &lt;= l &amp;&amp; R &gt;= r)&#123; //区间改值 lazy[rt]=lzy; Sum[rt] = (r-l+1) * lzy; //区间加减 /*lazy[rt]+=lzy; sum[rt]+=(r-l+1) * lzy;*/ return; &#125; int m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1,lzy); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1,lzy); pushup(rt); return;&#125;]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU6096-String（AC自动机）]]></title>
    <url>%2F2019%2F07%2F04%2FHDU6096%2F</url>
    <content type="text"><![CDATA[题目地址：HDU6096Problem DescriptionBob has a dictionary with N words in it.Now there is a list of words in which the middle part of the word has continuous letters disappeared. The middle part does not include the first and last character.We only know the prefix and suffix of each word, and the number of characters missing is uncertain, it could be 0. But the prefix and suffix of each word can not overlap.For each word in the list, Bob wants to determine which word is in the dictionary by prefix and suffix.There are probably many answers. You just have to figure out how many words may be the answer. InputThe first line of the input gives the number of test cases T; T test cases follow.Each test case contains two integer N and Q, The number of words in the dictionary, and the number of words in the list.Next N line, each line has a string Wi, represents the ith word in the dictionary (0&lt;|Wi|≤100000)Next Q line, each line has two string Pi , Si, represents the prefix and suffix of the ith word in the list (0&lt;|Pi|,|Si|≤100000,0&lt;|Pi|+|Si|≤100000)All of the above characters are lowercase letters.The dictionary does not contain the same words. LimitsT≤50&lt;N,Q≤100000∑Si+Pi≤500000∑Wi≤500000 OutputFor each test case, output Q lines, an integer per line, represents the answer to each word in the list. Sample Input14 4abacdeacdefacdefa acd efac ace f Sample Output2110 题意：给若干个字符串，进行若干次询问，每次询问给出一个前缀和后缀，问同时有这个前缀和后缀的字符串有几个，前缀与后缀不能重叠。解题：一道构造很巧妙的AC自动机题，首先存下给出的字符串，接着将给出的前缀(s1)和后缀(s2)以s2 + ‘{‘ + s1的形式插入字典树，构造AC自动机Fail指针，然后将每个字符串S转换成S + ‘{‘ + S的形式在AC自动机上跑，每经过一个结束节点就在这个节点的计数器上加一，不过要注意由于前缀和后缀不能重叠，因此s2+s1的长度不能超过S，最后按照询问的顺序输出结束节点的计数器即可。之所以用’{‘是因为它等于’a’+26容易建树，当然也可以用别的字符。以cd ef的查询为例，他被构造成了”ef{cd”插入了字典树，那么当用cdef{cdef跑AC自动机时就会找到这个子串。如果不用’{‘分割，那么ab cd就会匹配到aabcde，显然是不对的。最后是AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include &lt;bits/stdc++.h&gt;const int maxn = 1e5 + 200;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[27]; trie *fail; int len; int cnt; trie() &#123; len = 0; cnt = 0; fail = NULL; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root,*tr[maxn];int T,N,Q,tot;string S[maxn],s1,s2;void Insert(string s)&#123; trie *p = root; for(int i = 0; i &lt; s.length(); i++) &#123; int id = s[i]-'a'; if(p-&gt;nxt[id] != NULL) &#123; p = p-&gt;nxt[id]; &#125; else &#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; &#125; tr[tot++] = p; p -&gt; len = s.length();&#125;void getFail()&#123; queue&lt;trie*&gt; q; q.push(root); trie *temp,*p; while(!q.empty()) &#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 27; ++i) &#123; if(p -&gt; nxt[i]) &#123; if(p == root) p -&gt; nxt[i] -&gt; fail = root; else &#123; temp = p -&gt; fail; while(temp) &#123; if(temp -&gt; nxt[i]) &#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; temp = temp -&gt; fail; &#125; if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125;void query(string s)&#123; trie *p = root; trie *temp; for(int i = 0; i &lt; s.length(); ++i)&#123; int id = s[i]-'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root) &#123; if(temp-&gt;len &lt;= (s.length()-1)/2+1) temp-&gt;cnt++; temp = temp -&gt; fail; &#125; &#125;&#125;void Free(trie *p)&#123; for(int i = 0; i &lt; 27; ++i) &#123; if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); &#125; delete(p); p = NULL;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; tot = 0; root = new trie; cin &gt;&gt; N &gt;&gt; Q; for(int i = 0; i &lt; N; ++i)&#123; cin &gt;&gt; S[i]; S[i] = S[i] + '&#123;' + S[i]; &#125; while(Q--)&#123; cin &gt;&gt; s1 &gt;&gt; s2; Insert(s2+'&#123;'+s1); &#125; getFail(); for(int i = 0;i &lt; N; ++i) query(S[i]); for(int i = 0;i &lt; tot;i++) cout &lt;&lt; tr[i]-&gt;cnt&lt;&lt; endl; Free(root); &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM解题报告</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集]]></title>
    <url>%2F2019%2F07%2F03%2FUnionFind%2F</url>
    <content type="text"><![CDATA[并查集并查集是一种数据结构，用于快速合并多个集合以及查询两个节点是否在同一个集合中。 引言思考一个简单的问题：有若干个点，每一次将其中两点连起来，若干次操作后，询问任意两点是否被联通。这样的问题要怎么解决呢？废话，当然就是要依靠本文下面将介绍的并查集的算法啦！ 思考问题对于这样的问题，显然我们可以直接将两点相连，但如果这么做，询问时就会遇到麻烦。DFS?BFS?当点的数目非常多时，这么做的复杂度似乎太高了。 并查集的作用顾名思义，并查集主要有两个作用，“并”和“查”。“并”，就是将两个集合合并到一起；“查”就是是查询两点是否在同一集合中。它的主要作用就是用来解决形如引言中那样的问题。并查集采用的是一种类树形结构，那么为什么要采用类树形结构呢？因为无论是合并还是查询，树形结构都很方便，也很快。大家知道，一棵k叉树的查询复杂度是O(logk(n))，除非k等于一，否则查询的速度是非常可观的。同时，要合并两棵树也非常容易——只要将两棵树的根直接相连就可以了。 并查集的结构体实现并查集既可以用结构体实现，也可以用数组实现，这里首先给出结构体的实现和讲解，文末给出数组实现，留给读者自己思抄考写。 节点的定义首先是并查集节点的定义，之所以说并查集是一种类树形结构，是因为它与树形结构有所不同，它的节点指针方向是与树相反的。树形结构的指针方向，由父节点指向子节点，而并查集节点的指针方向则由子节点指向父节点。（可以把并查集的这种数据结构看做一棵倒着的树）。所以，并查集的结构体非常简单，只需要一个指向父节点的指针以及原始数据即可。 123456struct node&#123; //数据 int id; //父节点 node *father = NULL;&#125; 路径压缩在开始具体代码的实现前，我们来理一理逻辑。要怎么合并两棵树？连接两棵树的根节点即可。要怎么连接两棵树的根节点呢？很简单，让某一个根节点的父亲指针指向另一个就行了，不过在这之前我们必须要先找到他们的根节点。因此下面会首先给出寻找根节点的代码实现，那么路径压缩又是什么呢？我们知道，一棵树的深度越浅，我们寻找根节点的效率也就越高，最优的情况下是怎样的呢？所有的节点都紧紧围绕着根节点就像全中国人民紧密团结在习主席周围。要单独进行这样的优化比较浪费时间，因此我们可以在寻根的过程中一并递归处理，当然这样并不能保证所有节点直接连接根节点，但已经足够紧密了。 并查集的寻根知道路径压缩以后，我们可以开始寻找根节点了。寻根过程很简单，一路沿着某一节点搜索父节点指针，直到没有父节点或者父节点是其自身（这两种情况是等价的，与代码实现有关）就可以了。那么路径压缩呢？只要将寻根过程碰到的所有节点的父指针直接指向根节点就可以了，这个操作可以用递归的方式简单实现。代码如下： 1234node* FindRoot(node *a)&#123; if(a-&gt;father == NULL) return a; else return a-&gt;father = FindRoot(a-&gt;father);&#125; 并查集的合并合并过程在之前就已经说过了，对于两个节点，如果根节点不同，将一个的根节点的父亲指针指向另一个根节点，如果相同，那么不需要进行合并操作。因为已经有了寻根的函数，合并的实现就变得非常简单，代码如下： 12345void Union(node *from,node *to)&#123; node *f1 = FindRoot(from),*f2 = FindRoot(to); if(f1 == f2) return; f2-&gt;father=f1;&#125; 例题及数组实现解释完并查集的结构体实现，那么又到了喜闻乐见的模版和例题环节了，模版中用数组实现了并查集。例题：HDU1232题意：给出若干个点和若干条边，询问要将整张图联通起来，至少还需要几条边。解题思路：这是一道模版题，时间很充裕，用并查集可以简单得出结果。步骤如下1.对于给出的每一条边，对边的两个端点进行“并”的操作。2.完成第1步后，整张图被分为了多个互相之间不连通的集合，要让整张图连通，需要的边数就是集合数减一。 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;const int maxn = 1500;using namespace std;int N,M,father[maxn],a,b,vis[maxn],cnt;int Find(int a)&#123; if(father[a]==a) return a; return father[a]=Find(father[a]);&#125;void Union(int a,int b)&#123; int f1=Find(a),f2=Find(b); father[f2] = f1;&#125;void init()&#123; for(int i = 1; i &lt;= N; ++i) father[i]=i; memset(vis,0,sizeof(vis)); cnt=0;&#125;int main()&#123; //用于加速输入输出，忽视就行了 ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); while(cin &gt;&gt; N)&#123; if(N==0)break; cin &gt;&gt; M; init(); while(M--)&#123; cin &gt;&gt; a &gt;&gt; b; Union(a,b); &#125; for(int i = 1; i &lt;= N; ++i)&#123; int tmp = Find(i); if(!vis[tmp])&#123; cnt++; vis[tmp]=1; &#125; &#125; cout &lt;&lt; cnt - 1 &lt;&lt; endl; &#125; return 0;&#125; 后记并查集的介绍到此结束，这是一种比较简单的数据结构，在Kruscal算法中会用到并查集的算法。]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[置顶]]></title>
    <url>%2F2019%2F07%2F03%2Ftop%2F</url>
    <content type="text"><![CDATA[大佬队友的博客 SHU-SSYZE 模版地址：模版我又来更新这个没人看的博客了，加入ACM暑期菜鸡集训和神经网络相关的东西。]]></content>
  </entry>
  <entry>
    <title><![CDATA[线段树基础]]></title>
    <url>%2F2019%2F07%2F02%2FSegmentTree%2F</url>
    <content type="text"><![CDATA[线段树线段树是一种树形数据结构，用于快速统计和修改区间上的统计量。 线段树能做什么？线段树是一种完全二叉树，建树的时间复杂度为O(nlogn)，查询以及修改的复杂度都是O(logn)，可以高效的查询和修改区间统计量。 线段树的组成线段树的每一个节点上隐式地存储着这个节点所“掌管”的区间，显式地存储着节点所“掌管”区间上的某一或某些统计量。需要注意的是，这些统计量必须满足区间加法（如区间最大值是子区间最大值中的最大值，区间和为子区间和的和等），众数、最长上升子序列等不符合区间加法。如果要用结构体实现，它的节点定义将会是这样的: 1234struct node&#123; node *ls,*rs; //ls为节点左子节点的指针，rs为右子节点的指针 int sum,mx; //统计量，常用的是区间和以及区间最值&#125; 显然，如果给定一个数组a1,a2…an,以[1,n]为范围建立线段树，那么根节点所掌管的区间（这里的区间是指数组下标，而不是数字范围）就是[1,n]，而其左子节点掌管的区间是[1,n/2],右子节点掌管的区间是[n/2+1,n]。以此类推可以知道每一个节点所掌管的区间，这也就是为什么我说每一个节点上隐式地存储着这个节点所“掌管”的区间的原因。以区间[1,10]为例，一棵建好的线段树每一个节点所掌管的区间情况如下图所示： 线段树的结构体实现线段树可以用结构体和指针来实现，也可以用数组来实现，结构体的实现较为容易理解，因此本文将先用结构体来实现线段树，在本文最后会给出数组的实现方法。 区间加法用一个节点两个子节点的统计量来更新自己的统计量。具体见代码： 1234void pushup(node *rt)&#123; rt-&gt;mx = max(rt-&gt;ls-&gt;mx,rt-&gt;rs-&gt;mx); rt-&gt;sum = rt-&gt;ls-&gt;sum + rt-&gt;rs-&gt;sum;&#125; 这个函数在构造和修改值的过程中都会用到。 线段树的构造线段树的构造是一个递归建树的过程，这里直接贴上代码，边读代码边解释。 1234567891011121314//首先解释一下这5个参数//[L,R]是建立线段树所依赖的数组范围，在递归过程中不变//rt是当前递归到的指针，[l,r]是当前指针所掌管的区间，这3个变量将作为状态在递归过程中传递void build(int L,int R,int l,int r,node *rt)&#123; //如果当前指针掌管的范围只有一个元素，直接赋值并返回 if(l == r)&#123;rt -&gt; sum = a[l];rt -&gt; mx = a[r];return;&#125; //找到区间的中点 int m = (l+r) &lt;&lt; 1; //递归构造左子树和右子树 build(L,R,l,m,rt-&gt;ls); build(L,R,m+1,r,rt-&gt;rs); pushup(rt); return;&#125; 在主函数中呼叫构造函数时的初始状态通常为build(1,N,1,N,root)。 线段树的修改线段树的修改步骤大致分为两步：1.从根节点开始查找我要修改的值所在的叶节点。（没有子节点的节点称为叶节点）2.修改叶节点，沿着查找路径递归更新与该叶节点相连的所有节点。代码如下： 123456789101112131415//再来解释一下这5个参数//P是我要修改的值所在的位置，V是我要将其修改为的值//l,r,rt的含义与build中相同void update(int P,int V,int l,int r,node *rt)&#123; //找到了目标叶节点，更新叶节点的值，显然此时l=r=P if(l==r)&#123;rt-&gt;sum=V;rt-&gt;mx=V;return&#125;; //同样找出区间中点 int m = (l+r) &lt;&lt; 1; //如果目标叶节点在区间左半，向左子树找，否则向右子树找 if(P&lt;=m) update(P,V,l,m,rt-&gt;ls); else update(P,V,m+1,r,rt-&gt;rs); //递归更新与被修改的叶节点相连的所有节点 pushup(rt); return;&#125; 在主函数中呼叫时的方式是update(P,V,1,N,root)其中P、V的含义见代码注释。 线段树的查询到了最重要的查询步骤了，查询最值与查询区间和的方法大同小异。从根节点开始向下搜索，如果要查询的区间完全包含（可以相等）某一节点所掌管的区间，将这个区间的统计量加入到最终结果中；如果要查询的区间不能完全包含某一节点所掌管的区间，继续拆分这个区间直到要查询的区间能够完全包含它。具体见代码实现： 1234567891011121314151617//查询最值//[L,R]是要查询的区间//l,r,rt的含义与之前相同int querymx(int L,int R,int l,int r,node *rt)&#123; //如果查询区间完全包含当前节点所掌管的区间，返回最大值 if(L &lt;= l &amp;&amp; R &gt;= r) return rt-&gt;mx; //初始化最大值为负无穷 int res = -inf; //求出线段中点 int m = (l+r) &lt;&lt; 1; //L&lt;=m说明要查询的区间可以继续往左子树拆分 if(L &lt;= m) res = max(res,querymx(L,R,l,m,rt-&gt;ls)); //R&gt;=m+1说明要查询的区间可以继续往右子树拆分 if(R &gt;= m+1) res = max(res,querymx(L,R,m+1,r,rt-&gt;rs)); //最终得出结果 return res;&#125; 注意在上述代码中L&lt;=m和R&gt;=m+1并不是if和else的关系，一个线段可以同时既可以往左拆分也可以往右拆分（例如要查询的区间是[4,6]而当前节点掌管的区间是[1,10]），但2种情况至少成立1种（否则L就会大于R），因此-inf并不会被计算到最终结果中去。查询区间和的方法类似，只要进行简单修改就可以了： 12345678int querysum(int L,int R,int l,int r,node *rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return rt-&gt;sum; int res = 0; int m = (l+r) &lt;&lt; 1; if(L &lt;= m) res += querysum(L,R,l,m,rt-&gt;ls); if(R &gt;= m+1) res += querysum(L,R,m+1,r,rt-&gt;rs); return res;&#125; 其实只是改变了统计量的“区间加法”部分的代码，注意此时res只能被初始化为0。 线段树的数组实现说明完线段树的结构体实现，接下来就是线段树的数组实现了，大部分代码与结构体实现类似，只是把节点抽象到了统计量数组的下标上，此时对于任意一个节点$rt$，它的左子节点是$rt * 2$,它的右子节点是$rt * 2+1$,个人习惯用rt&lt;&lt;1表示$rt * 2$,用rt&lt;&lt;1|1表示$rt * 2+1$。数组实现线段树的方法代码较为简洁，但理解起来稍有些抽象。这里是一道例题：HDU1754以下给出完整的AC代码（数组实现线段树的模版）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;const int maxn = 200000 + 5;const int inf = 0x3f3f3f3f;int N,M,mark[maxn],Max[maxn&lt;&lt;2]; //数组要开到区间长度的4倍确保空间够用//更新当前节点void pushup(int rt)&#123; Max[rt] = max(Max[rt&lt;&lt;1],Max[rt&lt;&lt;1|1]);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123;Max[rt] = mark[l];return;&#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间int query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Max[rt]; int m = (l+r) &gt;&gt; 1; int res = 0; if(L &lt;= m) res = max(res,query(L,R,l,m,rt&lt;&lt;1)); if(R &gt; m) res = max(res,query(L,R,m+1,r,rt&lt;&lt;1|1)); return res;&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 将L的值改为Vvoid update(int L,int V,int l,int r,int rt)&#123; if(l==r)&#123;Max[rt]=V;return;&#125;; int m = (l+r) &gt;&gt; 1; if(L &lt;= m) update(L,V,l,m,rt&lt;&lt;1); else update(L,V,m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;int main()&#123; while(scanf("%d%d",&amp;N,&amp;M) != EOF)&#123; for(int i = 1; i &lt;= N; ++i) scanf("%d",&amp;mark[i]); build(1,N,1); char c; int a,b; while(M--)&#123; scanf(" %c%d%d",&amp;c,&amp;a,&amp;b); if(c=='Q') printf("%d\n",query(a,b,1,N,1)); else update(a,b,1,N,1); &#125; &#125; return 0;&#125; 读者可以结合注释与前文结构体实现的代码进行对照理解。 后记又一个数据结构写完了，当然以后还会更新线段树的加强版：主席树、红黑树等，敬请期待咯~更新了区间修改的内容，欢迎阅读:线段树区间修改。]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模版]]></title>
    <url>%2F2019%2F07%2F02%2FTemplate%2F</url>
    <content type="text"><![CDATA[密码是我的学号哟o(∩_∩)o Incorrect Password! No content to display! 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]]></content>
  </entry>
  <entry>
    <title><![CDATA[素数相关]]></title>
    <url>%2F2019%2F07%2F02%2Fprime%2F</url>
    <content type="text"><![CDATA[素数素数，就是因数只有1和自己的数，本文将介绍一些素数相关的内容。 素数筛一种快速找出一定范围内所有素数的方法。 埃拉托斯特尼筛法简称埃氏筛或埃筛，是一种十分好写也十分容易理解的素数筛法。原理十分简单，如果一个数是素数，那么他的任意倍数一定不是素数。因此我们首先假设所有数都是素数，接着从2开始找，2是素数，那么把它的所有倍数标记为非素数，从小到大开始筛，这样当我们找到一个数还没有被标记为非素数的话，它一定是一个素数，再次标记它的所有倍数为非素数，依此循环。下面给出代码： 1234567891011121314151617#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 4e3;//只筛到maxn以内的质数using namespace std;int not_prime[maxn],prime[maxn];void getprime()&#123; int cnt = 0; for(int i = 2; i &lt;= maxn; ++i)&#123; if(!not_prime[i])&#123; prime[cnt++] = i; for(int j = i + i; j &lt;= maxn; j+=i) not_prime[j] = 1; &#125; &#125;&#125; 欧拉筛法又名快速素数筛或欧筛，一听名字就知道它很快。那么为什么欧拉筛法比埃氏筛快呢，或者说，埃氏筛法哪里慢了？观察埃氏筛法，我们发现，同一个合数，它有可能被多个素数筛到，比如6被2筛到之后又会被3筛到，这就造成了多余的运算。而欧拉筛避免了这一点，在欧拉筛中每一个合数都只会被筛到一次，实现了线性复杂度O(n)。 过程简述欧筛的过程简述如下：1.与埃筛一样，将所有数假设为素数。2.从2开始遍历，如果遇到一个素数，那么将这个素数加入素数表。3.无论遇到的是不是素数，都遍历素数表（为了方便表述，设这个数为N，当前遍历到的素数为P），将$N*P$标记为非素数，如果此时N能够被P整除，那么结束素数表的遍历，否则继续遍历素数表。 过程模拟为了方便理解，这里给出10以内的素数的遍历过程。（已经理解的跳过分割线内的内容） 初始状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 0 0 0 0 0 0 0 素数表为空遍历到2时，2是素数，将2加入素数表，遍历素数表，$22=4$标记为非素数，因为2能整除2，结束素数表的遍历。此时状态：*not_prime数组**(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 0 0 0 0 0 素数表 2 接着遍历3，3是素数，将3加入素数表，遍历素数表会将6和9标记为非素数。此时状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 1 0 0 1 0 素数表 2 3 遍历4，4不是素数，不加入素数表，遍历素数表，会将8标记为素数（2能整除4，因此只遍历到2就结束素数表的遍历）此时状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 1 0 1 1 0 素数表 2 3 遍历5，5是素数，将5加入素数表，遍历素数表会把10，15，25标记为非素数。此时状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 1 0 1 1 1 素数表 2 3 5 实际上至此10以内的所有素数已经全部被筛出了，接着遍历6会将12标记为非素数，而遍历7会把14、21、35、49标记为非素数……在这个过程中，每一个合数都只会被筛到一次，证明略。 具体代码给出代码实现： 123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 1e6;using namespace std;int not_prime[maxn],prime[maxn];void getprime()&#123; not_prime[1] = 1; int tot = 0; for(int i = 2; i &lt;= maxn; ++i)&#123; if(!not_prime[i]) prime[tot++] = i; for(int j = 0; prime[j]*i &lt;= maxn; j++)&#123; int x = prime[j]*i; not_prime[x] = 1; if(i % prime[j] == 0) break; &#125; &#125;&#125; 相较于埃氏筛，欧拉筛法更快，且没有其他缺点，因此实际上只要记住欧拉筛就可以了埃氏筛比较好记就是了 分解素因数将一个大合数N分解成素因数的乘积，方法如下：1.用欧拉筛或埃氏筛得到素数表。2.从素数表中最小的素数P开始，如果N能够被P整除，那么将N /= P，并将P作为素因数的指数加一，重复这个步骤直到N不能被P整除。3.用下一个较大的素数重复第2步，直到取出大于$sqrt(N)$的第一个素数。4.如果N已经被除到了1，那么素因数分解完毕，如果N还没有被除到1，那么N最终的值是它自己的最后一个素因数。 用途较少，这里给出一道可用这种方法解答的例题：SHUOJ2只能用校内网连上，连不上就算了。。题意简述：给定正整数A,B（1&lt;=A,B&lt;=1000）,求$GCD(A,B^B)$。解题思路：由于B较大，显然不能直接求出$B^B$再求GCD，因此对A和B进行素因数分解，再将B的每一个素因数的指数乘以B，就能得出$B^B$的素因数，A和B的公共素因数的乘积就是所求的答案。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 1e3;using namespace std;int not_prime[maxn],prime[maxn],cnt[2][35],A,B;void getprime()&#123; not_prime[1] = 1; int tot = 0; for(int i = 2; i &lt;= maxn; ++i)&#123; if(!not_prime[i]) prime[tot++] = i; for(int j = 0; j&lt;tot &amp;&amp; prime[j]*i &lt;= maxn; j++)&#123; int x = prime[j]*i; not_prime[x] = 1; if(i % prime[j] == 0) break; &#125; &#125;&#125;//快速幂int qpow(int x,int y)&#123; int res = 1; while(y)&#123; if(y&amp;1) res = res * x; y &gt;&gt;= 1; x = x * x; &#125; return res;&#125;int main()&#123; getprime(); while(cin &gt;&gt; A &gt;&gt; B)&#123; memset(cnt,0,sizeof(cnt)); int t = B; for(int i = 0; i &lt;= 30; i++)&#123; while(A % prime[i] == 0)&#123;cnt[0][i]++;A /= prime[i];&#125; while(B % prime[i] == 0)&#123;cnt[1][i]++;B /= prime[i];&#125; cnt[1][i] *= t; &#125; int ans = 1; for(int i = 0; i &lt;= 30; i++)&#123; ans *= qpow(prime[i],min(cnt[0][i],cnt[1][i])); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; 本题还有另一种做法,之后可能会补上。此外，有一件很奇怪的事就是当maxn取某些值的时候，prime[0]会莫名其妙变成1，暂时没有发现原因。。 后记素数相关的算法和思想还是比较重要的，HDU的多校赛经常出现GCD等相关问题。今天的训练赛打的真是自闭]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>素数筛</tag>
        <tag>分解因数</tag>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM暑期训练赛（HDU07）]]></title>
    <url>%2F2019%2F07%2F02%2FHDU07%2F</url>
    <content type="text"><![CDATA[2019/07/02 阴有雨又是自闭的一天2019/07/03 晴？阴？更新了B、C、H的题解 比赛地址：HDU07 HDU07A All Kill（待补） B Build a Tree题意：给出一棵有N个节点的完全K叉树，求这棵树所有子树大小异或后的答案。解题：待补，考虑将子树分为完整的K叉树和不完整的K叉树，不完整的k叉树至多只有一棵，单独处理这棵树，从树的最底层向上递归求解。 C Color the chessboard题意：给出一张矩形图，图上每一个单位矩形初始状态下被涂为白色或红色或蓝色，现在要将这张图上的每一个白色的单位矩形染上色，要求所有具有偶数行数和偶数列数的矩形中所含有的蓝色矩形和红色矩形数量相等。解题：待补，显然只要所有的2*2的矩形都满足条件，那么就能满足条件，DFS or DP？ D Destroy the cube(待补) E Euler theorem题意：给出若干个整数，对于每一个整数，要求输出这个整数余除以任意一个数能得到的余数的个数。（如，对于3，3%3=0,3%4=3,3%2=1,任何数都不能让3余2，因此有3个余数）。解题：签到题打表就能得到答案。显然，对于一个数N，任何数不可能让它余超过$(N-1)/2$，而任意不超过N/2的余数都是有可能得到的，因此最终的答案就是$N/2+2$(1~N/2以及0和N)。简单证明：要让$N$余一个数$m$，只要让他余除$N-m$就可以了，但当$m&gt;(N-1)/2$时$2(N-m)&lt;N+1$,即$2(N-m)&lt;=N$,这时$N$余除$(N-m)$的值就变成了$N$余除$2(N-m)$的值，显然这是一个小于$(N-1)/2$的值。 F Free from square题意：给出两个整数n,K（小于500），要求从1 ~ K中挑出n个整数，这些整数的乘积不能被任何完全平方数（除了1）整除，输出可行的方案数。解题：待补，显然不能选相同的数字，且选了一个数以后不能再选任何它的倍数。然后不会了 G Give out candies（待补） H Hard challenge题意：在二维坐标平面上给出若干个点的坐标和权值，保证任意两点所连成的直线不经过原点，任意两点间的边的权值等于这两点权值的乘积，现在要求过原点画一条直线，这条直线所穿过的边的权值之和最大，输出最大的权值。解题：代码待补1.首先，任何一条过原点的直线所穿过的边的权值之和，等于直线一边所有点的权值之和乘以直线另一边所有点的权值之和。2.根据原点到每一个点连线的斜率，可以将所画直线的斜率分成若干个区间，枚举这些区间就能得出答案。3.为了得到区间，首先需要将点按照斜率的不同进行排序（极序排序），接着按照第0个点到第1个点间，第1个点到第2个点间……的顺序进行枚举。4.可以在0 ~ 360°的区间内维护一个前缀和快速得出某一直线两边的点的权值之和。 I Inverse of sum（待补） J Just do it题意：给出一个数列a0a1a2……an，要求进行一种运算m次，这种运算就是将每一个ai变成bi，切bi的值等于原数列ai从a0异或到ai的结果。解题：待补，找规律？我找了个规律然后T了(┬＿┬) K Kolakoski题意：有一种特殊的数列，它的第一项是1，这个数列形如：1，2，2，1，1，2，1，2，2……，将这个数列相同的项合并会变成1，22，11，2，1，22……，计算每一项的位数作为新数列这一项的值会变成1，2，2，1，1，2……，我们发现这个数列变回了最初的数列，现在要求输出这个数列的第n项（n&lt;1e7）。解题：n的数值较小，直接用vector暴力模拟即可。简述模拟过程：1.首先初始化数列的前3项为1，2，22.接着将指针指向第3项（2）。3.沿着指针，如果发现了一个2，那么需要在队尾添加两个相同的数，但这个数要与前一个数不同，因此如果此时队尾元素是1那么push_back两个2，如果队尾元素是2那么push_back两个1；如果发现了一个1，那么push_back一个与队尾元素不同的数即可。贴上AC的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;bits/stdc++.h&gt;using namespace std;vector&lt;int&gt; s;int main()&#123; int t,temp; //模拟过程 s.push_back(1); s.push_back(2); s.push_back(2); for(int i=2;i&lt;1e7+5;i++) &#123; temp = s.size() - 1; if(s[i] == 1) &#123; if(s[temp] == 1) &#123; s.push_back(2); &#125; else &#123; s.push_back(1); &#125; &#125; else &#123; if(s[temp] == 2) &#123; s.push_back(1); s.push_back(1); &#125; else &#123; s.push_back(2); s.push_back(2); &#125; &#125; &#125; //模拟结束 cin&gt;&gt;t; while(t--) &#123; int n; cin&gt;&gt;n; cout&lt;&lt;s[n-1]&lt;&lt;endl; &#125;&#125; L Loop next（待补） M Mystery（待补） 看看明天能补几道吧。。(┬＿┬) 补题日记7/3H Hard challenge解题：大致解法与昨天写的差不多，不过实际写代码的时候有一些问题，因此做了一些改变，改变后的解题方法如下：1.将所有点按照斜率k从大到小的顺序排序。2.初始状态下让所画的直线竖置，这样将所有点分为直线左边的点与直线右边的点两组（特别注意在y轴上的点分在直线右边，此时可以认为直线并不完全竖置），输入时统计直线左边的点权和lsum和直线右边的点权和rsum。3.维护lsum和rsum。按k从大到小的顺序遍历每一个点，每一次改变直线将这个点的分组改变（由于已经按k排序，每次移动直线只会有一个点的分组被改变），根据这个点的位置对lsum和rsum做出相应的变化。4.昨天维护前缀和的问题在于0 ~ 360°并不是一个离散的范围而是一个连续的范围，前缀数组的维护有难度。貌似也是可以的，但我懒得想了以下是AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 5e4+200;const int inf = 0x3f3f3f3f;using namespace std;struct points&#123; int x,y,val; double k;//斜率&#125;P[maxn];int n,T;ll lsum,rsum,ans;bool cmp(points a,points b)&#123; return a.k&gt;b.k;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n; lsum = 0;rsum = 0; for(int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; P[i].x &gt;&gt; P[i].y &gt;&gt; P[i].val; //计算出斜率 P[i].k = atan(1.0*P[i].y/P[i].x); //预设lsum和rsum状态 if(P[i].x &lt; 0) lsum += P[i].val; else rsum += P[i].val; &#125; //按斜率排序 sort(P,P+n,cmp); //预设ans状态 ans = lsum * rsum; //遍历，维护lsum、rsum和ans for(int i = 0; i &lt; n; ++i)&#123; if(P[i].x &gt; 0)&#123; lsum += P[i].val; rsum -= P[i].val; &#125; else&#123; lsum -= P[i].val; rsum += P[i].val; &#125; ans = max(ans,lsum*rsum); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; B Build a tree我的数据结构是真的菜啊解题：显然，题目给出的是一个有n个节点的完全k叉树，观察这课树，不难发现，除了第一层和最后一层，每一层至多只有一棵子树不是满k叉树，而这棵子树左边的所有子树是满k叉树，右边是深度小一的满k叉树（画张图就很清楚了），因此按以下步骤求解：1.预处理，用一个数组记录每一层最后一个节点的编号，同时得到树的深度。2.首先单独处理最后一层，将可能不是满k叉树的那几个节点单独挑出，并标记最后一个节点，其余统一进行异或。3.向上遍历，每一层由三部分组成：①最深的满k叉树②不满的那棵k叉树③浅一层的k叉树。每次遍历一层将标记上传的父节点，这个节点就是那棵可能不满的k叉树，左边是较深的k叉树，右边是较浅的k叉树。很容易得到满k叉树的size和数目，因此统一异或。不满的k叉树的size等于这一层以下（包含这一层）的总节点数减去左边满k叉树的size之和再减去右边满k叉树的size之和。4.一直遍历到树的第一层，结束遍历。5.显然遍历的时间复杂度是$logk(n)$，只要k&gt;=2，是很快就能遍历完的，但当k=1是遍历会很慢，因此打表特判。下面给出AC代码，代码比较丑，将就一下吧： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;bits/stdc++.h&gt;typedef long long ll;using namespace std;int T;//num记录每一层最后一个节点的编号，pos是非满k叉树节点的编号//LSize是pos左边满k叉树的size，RSize同理//ex是单独处理的子树的异或结果,restSize是非满k叉树的sizell n,k,num[70],dep,pos,LSize,RSize,nowdep,ex,restSize;ll qpow(ll a,ll b)&#123; ll res = 1; while(b)&#123; if(b&amp;1) res *= a; b &gt;&gt;= 1; a*=a; &#125; return res;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n &gt;&gt; k; //特判k=1的情况 if(k == 1)&#123; ll tmp = n % 4; if(tmp == 0) cout &lt;&lt; n &lt;&lt; '\n'; if(tmp == 1) cout &lt;&lt; 1 &lt;&lt; '\n'; if(tmp == 2) cout &lt;&lt; n+1 &lt;&lt; '\n'; if(tmp == 3) cout &lt;&lt; 0 &lt;&lt; '\n'; continue; &#125; else&#123; ll i = 0,ans = n; num[0] = 0; //找出每一层最后一个节点的编号以及树的深度 while(num[i] &lt; n - 1 &amp;&amp; num[i] &lt;= n - 1 - qpow(k,i+1))&#123; num[i+1] = num[i] + qpow(k,i+1); i++; &#125; pos = n - 1; //可能组成非满2叉树的节点数 restSize = (pos-num[i])%k; ans ^= (((pos-num[i])-restSize) &amp; 1); ex = ((restSize&amp;1)?1:0); //深度是i+1，原因自己看上面的while条件，主要是怕他溢出ll。。 dep = i + 1; //最后一层已经处理完，开始处理倒数第二层 nowdep = i; LSize = 1; RSize = 0; //ans初始化为n，因此不用再算第一层，算到第2层就可以结束了 while(nowdep &gt; 0)&#123; //上传标记 pos = (pos-1)/k; //计算左满k叉树，右满k叉树以及非满k叉树的size LSize = LSize * k + 1; RSize = RSize * k + 1; restSize = (n - 1 - num[nowdep-1])- (pos-num[nowdep-1]-1)*LSize - (num[nowdep]-pos)*RSize; ex ^= restSize; ans ^= (((pos-num[nowdep-1]-1)&amp;1)?1:0)*LSize; ans ^= (((num[nowdep]-pos)&amp;1)?1:0)*RSize; nowdep--; &#125; //最终结果异或上单独处理的子树 ans ^= ex; cout &lt;&lt; ans &lt;&lt; endl; &#125; &#125; return 0;&#125; C Color the chessboard解题：昨天想的没错，只要2 * 2的矩形满足，整个图就能满足，将各种2 * 2的矩形排列一下，你或许会发现，将R看做1，B看做0，所有答案一定满足2种情况之一：1.不考虑列的情况，每一行一定是01循环或10循环之一。2.不考虑行的情况，每一列一定是01循环或10循环之一。其次，只要满足上述两种情况之一，那么一定是一种答案。因此分2次暴力跑出能否满足上述2种情况之一，将两种情况的可能数相加。有2种情况可能会被重复计算，也就是行和列同时满足01循环或10循环的情况，单独跑出能否满足这种情况，能满足则减一。具体可以结合这篇文章一起理解，我的代码也是几乎照抄了一遍这篇文章的。。以下是AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;typedef long long ll;using namespace std;const ll mod = 998244353;int T,n,m;ll ans,ans1,ans2;int M[2000][2000];char C[2000][2000];bool flag;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n &gt;&gt; m; for(int i = 1; i &lt;= n; ++i) for(int j = 1; j &lt;= m; ++j)&#123; cin &gt;&gt; C[i][j]; if(C[i][j] == 'R') M[i][j] = 1; if(C[i][j] == 'B') M[i][j] = 0; if(C[i][j] == '?') M[i][j] = -1; &#125; ans1 = 1; for(int i = 1; i &lt;= n; ++i)&#123; //cnt是每一行选择的可能性，显然总的可能性要相乘得出 ll cnt = 0; flag = true; for(int j = 1; j &lt;= m; ++j)&#123; if(j%2==1 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; if(j%2==0 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; flag = true; for(int j = 1; j &lt;= m; ++j)&#123; if(j%2==1 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; if(j%2==0 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; ans1 = (ans1*cnt)%mod; if(ans1 == 0) break; &#125; ans2 = 1; for(int j = 1; j &lt;= m; ++j)&#123; ll cnt = 0; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; if(i%2==1 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; if(i%2==0 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; if(i%2==1 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; if(i%2==0 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; ans2 = (ans2*cnt)%mod; if(ans2 == 0) break; &#125; ans = (ans1+ans2)%mod; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; for(int j = 1; j &lt;= m; ++j)&#123; if((i+j)%2==1 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; if((i+j)%2==0 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; &#125; if(!flag) break; &#125; if(flag) ans = (ans-1+mod)%mod; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; for(int j = 1; j &lt;= m; ++j)&#123; if((i+j)%2==1 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; if((i+j)%2==0 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; &#125; if(!flag) break; &#125; if(flag) ans = (ans-1+mod)%mod; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 代码中的break都是用来剪枝的，剪枝以后变慢了，姑且是能懂了，不过总感觉有些不能释怀，比赛时真的能想通吗。。。 7/3补题小结今天暂时补到这了，感觉还是经验不够啊？？还是我太菜了这几题能看懂但总觉得比赛的时候想不到。]]></content>
      <categories>
        <category>ACM自闭日记</category>
      </categories>
      <tags>
        <tag>自闭</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图论最小生成树]]></title>
    <url>%2F2019%2F07%2F02%2FminTree%2F</url>
    <content type="text"><![CDATA[最小生成树本文会介绍两种用于获取最小生成树的算法，同样只给出用法不给出证明。 引入最小生成树通常用于解决形如以下的这种问题：给定若干个点和若干个边，保证这些边能将这些点全联通，试从这些边中选出部分边，使生成的树的边权之和最小。当然ACM的题通常都会有一个场景，比如有许多城镇，现已知这些城镇间的距离，要在这些城镇间修路，保证联通所有城镇的同时使得所修的路最短。 最小生成树算法下文会介绍两种算法Prim和Kruscal算法,这两种算法都会采用贪心的策略。 PrimPrim是一种以点为主体的贪心算法。下面简述算法的过程：1.在所有点中任取一点作为树的根，更新其他所有点到树的距离。2.在未被选取的点中，找到离树最近的点并选入树中，再次更新其他所有点到树的距离。3.重复第2步，直到所有点都被选入树中，Prim算法到此结束。点到树的距离是指点到树上任意一点的最短距离注意给出的图有多个最小生成树，根据选取的起点不同可能的到不同的最小生成树，但如果最小生成树唯一，那么起点的选取不会影响最终得到的最小生成树，所以放心大胆地去选取起点吧！ 下面给出prim算法主体的代码： 123456789101112131415161718192021222324void prim()&#123; //初始化，将1号点加入到生成树中 ans = 0; int cnt = 1; vis[1] = 1; for(int i = 1;i &lt;= N;++i) mndis[i]=dis[1][i]; while(cnt != N)&#123; int mn = inf,id; //找出所有点中距离生成树最近的点 for(int i = 1; i &lt;= N; i++)&#123; if(!vis[i] &amp;&amp; mndis[i] &lt; mn)&#123; mn = mndis[i]; id = i; &#125; &#125; //将找到的点加入生成树 vis[id] = 1; ans += mn; cnt++; //更新剩余点到树的距离 for(int i = 1; i &lt;= N; i++) mndis[i] = min(mndis[i],dis[id][i]); &#125;&#125; 本算法中采用邻接矩阵以及暴力遍历找最小值的方式实现，理论上可以用优先队列和邻接表实现。 同样给出例题：hdu1233以下是AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;const int maxn = 200;const int inf = 0x3f3f3f3f;using namespace std;int N,dis[maxn][maxn],vis[maxn],ans,mndis[maxn];void prim()&#123; //初始化，将1号点加入到生成树中 ans = 0; int cnt = 1; vis[1] = 1; for(int i = 1;i &lt;= N;++i) mndis[i]=dis[1][i]; while(cnt != N)&#123; int mn = inf,id; //找出所有点中距离生成树最近的点 for(int i = 1; i &lt;= N; i++)&#123; if(!vis[i] &amp;&amp; mndis[i] &lt; mn)&#123; mn = mndis[i]; id = i; &#125; &#125; //将找到的点加入生成树 vis[id] = 1; ans += mn; cnt++; //更新剩余点到树的距离 for(int i = 1; i &lt;= N; i++) mndis[i] = min(mndis[i],dis[id][i]); &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); while(cin &gt;&gt; N)&#123; if(!N) break; memset(dis,0,sizeof(dis)); memset(vis,0,sizeof(vis)); int T = N * (N - 1) / 2; while(T--)&#123; int a,b,c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; dis[a][b] = dis[b][a] = c; &#125; prim(); cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; KruscalKruscal是一种以边为主体的贪心算法，下面简述算法过程。1.从所有没有使用过的边中找出最短的一条边，标记为使用过了。2.如果边的两个端点不在一棵树中，那么将这条边加入到树中，否则不加入。3.重复1、2步直到所有点被联通（显然联通n个点需要n-1条边）。 找最短边的过程可以用优先队列实现，而判断端点是否在同一棵树中，可以用并查集实现，如果不会并查集，可以先阅读这篇文章，下面代码中的Find和Union函数毁在这篇文章中给出模版。下面给出Kruscal算法的主体代码： 12345678910111213141516171819void kruscal()&#123; int ans = 0,cnt = 0; //选取最短边直到没有边可以再选或者图已经联通 while(!Q.empty() &amp;&amp; cnt != M-1)&#123; edge temp = Q.top(); Q.pop(); int f = temp.from,t = temp.to,v = temp.val; //利用并查集判断是否在同一棵树中，如果不在则加入树中 if(Find(t)!=Find(f))&#123; Union(f,t); cnt++; ans+=v; &#125; &#125; //没有选取到M-1条边（M为点的数量），说明图不能联通 if(cnt != M-1) puts("?"); //图已联通，输出最小边权和 else printf("%d\n",ans);&#125; 同样给出例题：hdu1683AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;bits/stdc++.h&gt;const int maxn = 200;using namespace std;struct edge&#123; int from; int to; int val; edge(int a = 0,int b = 0,int c = 0)&#123;from=a;to=b;val=c;&#125; friend bool operator &gt; (edge a,edge b)&#123; return a.val &gt; b.val; &#125;&#125;;int N,M,father[maxn];priority_queue&lt; edge,vector&lt;edge&gt;,greater&lt;edge&gt; &gt; Q;int Find(int a)&#123; if(father[a]==a) return a; return father[a]=Find(father[a]);&#125;void Union(int a,int b)&#123; int f1=Find(a),f2=Find(b); father[f2] = f1;&#125;void init()&#123; for(int i = 1; i &lt;= M; ++i) father[i]=i; while(!Q.empty()) Q.pop();&#125;void kruscal()&#123; int ans = 0,cnt = 0; while(!Q.empty() &amp;&amp; cnt != M-1)&#123; edge temp = Q.top(); Q.pop(); int f = temp.from,t = temp.to,v = temp.val; if(Find(t)!=Find(f))&#123; Union(f,t); cnt++; ans+=v; &#125; &#125; if(cnt != M-1) puts("?"); else printf("%d\n",ans);&#125;int main()&#123; while(scanf("%d",&amp;N))&#123; if(N==0) break; scanf("%d",&amp;M); init(); for(int i = 0; i &lt; N; i++)&#123; int a,b,c; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); Q.push(edge(a,b,c)); &#125; if(N&lt;M-1)&#123;puts("?");continue;&#125; kruscal(); &#125; return 0;&#125; 后记以上就是两种最短路算法的实现过程了。后记不知道写啥了，就这样吧]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>贪心</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图论最短路]]></title>
    <url>%2F2019%2F07%2F01%2Fminpath%2F</url>
    <content type="text"><![CDATA[最短路算法本文将介绍几种用于解决最短路问题的算法，仅给出用法，不给出证明（因为不会证明）。 问题简述最短路问题：给出若干个点和若干个带有边权的边，要求找出从某点到某点的最短路径。 邻接表简单来说就是为每一个点建立一个边链表记录了与这个点所连的所有边。实现方法很多，本文用vector实现。 123//edge为边的结构体，maxn为点的总数，E[i]中记录了与点i相连的所有边//如果题目为无向图，注意要push_back两个方向的边vector&lt;edge&gt; E[maxn]; 单源最短路即仅要求求出从一个点到其他所有点（某一点）的最短距离的问题。 dijkstra我将dijkstra认识为一个贪心的BFS过程，首先，我们需要用到两个结构体。1.边，这个结构体必须包含目标点，边权，可以包含出发点（也可以不包含）。 12345struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;; 2.状态，这个结构体需要包含当前所在的位置（影响联通路径的状态）和已经走过的距离，同时重载&gt;号，比较的依据为走过的距离，重载&gt;号是为了能够使用priority_queue。 123456789struct nod&#123; int pos; int d; nod(int a = 0,int b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;; 有了这两个结构体之后，我们就能开始dijkstra的主体了，简单地描述一下dijkstra的过程。1.录入数据。2.创建一个nod的优先队列，从小的开始出队列。3.将初始态（初始位置，经过的距离为0）push进优先队列，设初始最短路径都为无穷大。4.弹出队首元素，更新与队首位置相连的所有点，如果能够更新（距离变小了）某个点，则将这个点push进队列。5.重复第4步直到队列为空，这意味着没有点能够再次被更新了，dijkstra算法到此结束。下面给出算法主体代码： 12345678910111213141516171819202122232425void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; //优先队列，从较小的开始出 Q.push(nod(N,0));//初始态,N为出发点 //类似BFS过程 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; //若能更新，则更新并把更新的点push进队列 if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125; 需要注意的是，dijkstra算法并不能判断负环，因此当题目中出现负边时慎用。 这里给出一道例题：POJ2387AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int maxn = 1000+50;const int inf = 0x3f3f3f3f;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; int d; nod(int a = 0,int b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];int T,N,dis[maxn];//dis[i]为从X到i的最短距离，可以根据情况扩充为d[i][j][k].....//加边，无向图时添加两条边void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); return;&#125;void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; Q.push(nod(N,0));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T &gt;&gt; N; while(T--)&#123; int from,to,val; cin &gt;&gt; from &gt;&gt; to &gt;&gt; val; add(from,to,val); &#125; dij(); cout &lt;&lt; dis[1] &lt;&lt; endl; return 0;&#125; 以下内容较难，可跳过此外，虽然在上题中dis[i]表示从起点到i点的最短距离，但实际上这个dis数组的下标代表的是一个状态，本题中状态只有所在的点，因此dis数组也只需要一个下标，dis数组的下标可以根据需要扩充。例如在hdu6071中，dis[i][j]表示的就是跑到了i点且跑过的距离模mod后为j的一个状态，我们也可以将每一种状态抽象为不同的点。同样给出AC代码（本题较难，可能另开文章单独解释） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 6e5+20;const int mod = 998244353;const int inf = 0x3f3f3f3f;const ll llinf = 0x3f3f3f3f3f3f3f3f;using namespace std;struct edge&#123; ll from; ll to; ll val; edge(ll a = 0,ll b = 0,ll c = 0)&#123;from=a;to=b;val=c;&#125;&#125;;struct nod&#123; ll pos; ll d; nod(ll a=0,ll b=0)&#123;pos = a;d = b;&#125; friend bool operator &gt; (nod a,nod b)&#123; return a.d &gt; b.d; &#125;&#125;;ll T,k,d12,d23,d34,d41,m,dis[5][maxn];vector&lt;edge&gt; E[5];void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; Q.push(nod(2,0)); while(!Q.empty())&#123; nod t = Q.top(); Q.pop(); if(t.d &gt; dis[t.pos][t.d%m]) continue; for(vector&lt;edge&gt;::iterator it = E[t.pos].begin(); it != E[t.pos].end(); it++)&#123; ll nd = t.d+(*it).val; if(nd &lt; dis[(*it).to][nd%m])&#123; dis[(*it).to][nd%m] = nd; Q.push(nod((*it).to,nd)); &#125; &#125; &#125;｝int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; for(int i = 1; i &lt;= 4; ++i) E[i].clear(); cin &gt;&gt; k &gt;&gt; d12 &gt;&gt; d23 &gt;&gt; d34 &gt;&gt; d41; E[1].push_back(edge(1,2,d12));E[2].push_back(edge(2,1,d12)); E[2].push_back(edge(2,3,d23));E[3].push_back(edge(3,2,d23)); E[3].push_back(edge(3,4,d34));E[4].push_back(edge(4,3,d34)); E[4].push_back(edge(4,1,d41));E[1].push_back(edge(1,4,d41)); m = 2 * min(d12,d23); dij(); ll ans = llinf; for(int i = 0; i &lt; m; i++)&#123; if(dis[2][i] &gt;= k) ans = min(ans,dis[2][i]); else&#123; ll delt = k - dis[2][i]; dis[2][i] += (delt/m+(delt%m?1:0))*m; ans=min(ans,dis[2][i]); &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; 至此，dijkstra算法的介绍告一段落。 SPFA(待补)同样为单源最短路算法，相较于dijkstra的优势是可以判断负环，劣势是比较慢。是优化版的Bellman-Ford算法。模版及例题待补 Bellman-Ford他死了。 多源最短路给定若干点以及点之间的距离(边)，要求求出任意两点间的最短距离。 Floyed算法又名Warshall算法。暴力遍历O($n^3$)次点，对于任意两点i,j，如果以k为桥梁能使i ~ j的距离变短，那么更新i ~ j的距离。由于算法特性，只能用邻接矩阵来存图。算法主体代码： 1234for(int k = 1; k &lt;= n; k++)for(int i = 1; i &lt;= n; i++)for(int j = 1; j &lt;= n; j++)w[i][j] = min(w[i][j], w[i][k] + w[k][j]); 给出一道例题：poj2139AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;typedef long long ll;const int inf = 0x3f3f3f3f;using namespace std;int w[303][303], tmp[303];int main()&#123; int n, m, t; scanf("%d %d", &amp;n, &amp;m); memset(w, inf, sizeof(w)); for(int i = 1; i &lt;= n; i++) w[i][i] = 0; while(m--) &#123; cin &gt;&gt; t; for(int i = 0; i &lt; t; i++) &#123; cin &gt;&gt; tmp[i]; &#125; for(int i = 0; i &lt; t; i++) for(int j = 0; j &lt; i; j++) w[tmp[i]][tmp[j]] = w[tmp[j]][tmp[i]] = 1; &#125; for(int k = 1; k &lt;= n; k++) for(int i = 1; i &lt;= n; i++) for(int j = 1; j &lt;= n; j++) w[i][j] = min(w[i][j], w[i][k] + w[k][j]); double ans = inf; for(int i = 1; i &lt;= n; i++) &#123; int sum = 0; for(int j = 1; j &lt;= n; j++) sum += w[i][j]; ans = min(ans, sum * 100 * 1.0/ (n - 1)); &#125; printf("%d\n", (int)ans); return 0;&#125; 非常简单的一个算法，但是他的空间复杂度和时间复杂度都过高，并不常用。 后记好吧，从篇幅上可以看出，最短路算法中最常用，最强大的算法就是dijkstra了，他的变形也有很多，需要好好掌握哦！本文中一些STL会在将来的文章里补上用法。emmm可能会吧]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>贪心</tag>
        <tag>最短路问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Trie]]></title>
    <url>%2F2019%2F07%2F01%2FTrie%2F</url>
    <content type="text"><![CDATA[TrieTrie，也叫做字典树，是一种树形结构，可以高效的存储字符串和查询字符串。 Trie比较简单，这里只做简单的介绍，并给出例题和模版。例题：hdu1251题意简述：给定一系列字符串，再给出多个前缀，输出这些前缀在多少个字符串中出现过。 Trie的组成这种树形结构只有一个根节点，根节点没有意义（虚节点）。网上很多文章中将每一个节点视为一个字符，但事实并非如此，在Trie中，每一条边代表了一个字符，而从根节点走到某一节点路径上所有字符组成的字符串，则为该节点所代表的字符串。为了方便讲解，这里直接给出Trie节点的定义： 123456789101112struct trie&#123; trie *nxt[26]; //子节点的指针数组，此处26为字符集的大小，可以根据需求修改 int cnt; //此题用于统计前缀，根据需求修改 //初始化 trie() &#123; cnt = 1; //初始化所有nxt为NULL memset(nxt,NULL,sizeof(nxt)); &#125;&#125;; 我们可以认为，从一个节点p到节点p-&gt;nxt[id]的边所代表的字符即为id所映射的字符。以a ~ z映射到0 ~ 25为例，root-&gt;nxt[0]-&gt;nxt[1]-&gt;nxt[2]节点所代表的的字符串就是abc。 Trie的构建与线段树不同，Trie并不是输入完所有字符串后统一构建的(当然你想这么做也是可以的，但是会MLE),Trie的构建通常是输入一个字符串就插入一个字符串，插入的过程很简单，如果nxt[id]已经存在就沿着走，如果不存在就新建一个。以下为代码实现： 12345678910111213141516171819202122void Insert(char *s)&#123; trie *p = root; i = 0; //遍历字符串 while(s[i])&#123; id = s[i] - 'a'; //如果存在，就沿着走，并操作路径上的统计量（此处用于统计前缀） if(p-&gt;nxt[id]) &#123; p = p-&gt;nxt[id]; p -&gt; cnt++; &#125; //如果不存在，就新建，当然也要走过去 else &#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; i++; &#125;&#125; Trie的查询字典树的查询视题意而定，在本次例题中，为统计前缀出现的次数。根据字符串沿着树遍历即可，若遇到nxt[id]==NULL的情况，说明没找到，直接返回0。以下为代码实现 12345678910111213141516int query(char* s)&#123; trie *p = root; i = 0; while(s[i]) &#123; id = s[i] - 'a'; //找得到就沿着走 if(p -&gt; nxt[id]) p = p -&gt; nxt[id]; //找不到直接返回0 else return 0; i++; &#125; //若找到了，返回最终节点的cnt值 return p -&gt; cnt;&#125; Trie的删除递归删除即可 123456void Free(trie *p)&#123; for(i = 0; i &lt; 26; ++i) if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); delete(p); p = NULL;&#125; 例题+模版回到例题的解答，解题过程非常简单毕竟是模版题1.根据给出的字符串建立Trie2.根据前缀在Trie上遍历 AC代码（模版）：本题用C++提交的，用G++提交有惊喜哦本题G++提交会MLE，请用C++提交 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;typedef unsigned long long ull;const int maxn = 11;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[26]; int cnt; trie() &#123; cnt = 1; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root;int i,id;char S[maxn],s1[maxn];void Insert(char *s)&#123; trie *p = root; i = 0; while(s[i])&#123; id = s[i] - 'a'; if(p-&gt;nxt[id]) &#123; p = p-&gt;nxt[id]; p -&gt; cnt++; &#125; else &#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; i++; &#125;&#125;int query(char* s)&#123; trie *p = root; i = 0; while(s[i]) &#123; id = s[i] - 'a'; if(p -&gt; nxt[id]) p = p -&gt; nxt[id]; else return 0; i++; &#125; return p -&gt; cnt;&#125;void Free(trie *p)&#123; for(i = 0; i &lt; 26; ++i) if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); delete(p); p = NULL;&#125;int main()&#123; root = new trie; while(scanf("%s",S))&#123; Insert(S); cin.get(); if(cin.peek() == '\n') break; &#125; while(scanf("%s",s1) != EOF)&#123; printf("%d\n",query(s1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>字符串</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AC自动机]]></title>
    <url>%2F2019%2F07%2F01%2FACautoman%2F</url>
    <content type="text"><![CDATA[AC自动机AC自动机，用于多模字符串匹配，类似KMP+Trie。最近越来越觉得AC自动机又神奇有有意思，顶上来再看看。 一种最常见的题目如下（裸题模版）题意简述：首先输入多个单词（模式串），接着输入一串目标字符串，输出有多少个模式串在目标字符串中出现过。解题步骤：1.根据给出的模式串构造一个Trie树。2.在Trie树上构造fail指针（构造Trie图）。3.将目标字符串在Trie图上进行匹配。 2019-07-07补充几个AC自动机的特点：1.将目标串在由模式串组成组成的AC自动机上跑一遍以后，只要任一节点所代表的字符串是目标串的子串，它就会被遍历到。2.即使节点不是字符串的结束节点，它也会被遍历到，且在目标串中出现几次就会被遍历到几次，如果希望不要重复遍历要打上标记。3.以上两点都是由fail指针的特点和匹配过程导出的。4.通常AC自动机的题都是构造题，我们需要把问题转换成多模子串匹配问题。 Fail指针Fail指针的构造过程：1.用BFS的顺序逐层向下构造Fail指针。2.当一个节点的父亲指针为Root时，将Fail指针指向Root。3.当要获取一个节点（父节点不为Root）的Fail指针时，从其父亲指针的Fail指针开始查找与自己同名的子节点，若找到，则这个节点的Fail指针指向该与自己同名的子节点；若找不到，则沿着Fail指针继续寻找直到找到或直到指向Root时仍找不到。若指向根节点时仍然找不到，及当前节点没有Fail指针，将Fail指针指向Root。具体代码如下： 12345678910111213141516171819202122232425262728293031323334void getFail()&#123; queue&lt;trie*&gt; q; //用于BFS q.push(root); trie *temp,*p; while(!q.empty())&#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 26; ++i)&#123; if(p -&gt; nxt[i])&#123; //父节点为root的节点fail指针指向root if(p == root) p -&gt; nxt[i] -&gt; fail = root; else&#123; //从父节点的fail指针开始查找 temp = p -&gt; fail; //当temp为NULL时即没有找到同名的子节点 while(temp)&#123; //找到了与自己同名的子节点，则让当前节点的fail指向该子节点，同时结束循环 if(temp -&gt; nxt[i])&#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; //沿着fail指针继续查找 temp = temp -&gt; fail; &#125; //temp为NULL，即没有找到同名的子节点，将fail指针指向root if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; //bfs q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125; Fail指针具有的特点：1.从任意节点沿着fail指针遍历，总能回到root节点。2.一个节点的fail指针指向的节点所代表的字符串，为当前节点字符串的某一后缀，因此当匹配时匹配到某一节点时，这一节点fail指针所指向的字符串也一定出现过了，所以在匹配过程中每匹配一个字符，要沿着fail指针跳回root（例如当匹配到abcd时，bcd,cd,d都一定已经出现过了）。3.这个性质与KMP中的next数组很想，可以结合理解。下图是一张构建好的fail指针的图： 查询过程查询步骤：1.如果当前字符匹配，则沿着nxt[id]向下走；如果当前字符不匹配，则沿着fail指针查找nxt[id]直到找到或指向root。2.每匹配完一个字符，沿着fail指针跳回root同时统计路径上出现的单词数。3.将匹配过的模式串打上标记避免重复统计。具体代码如下： 12345678910111213141516171819202122232425int query(char* s)&#123; int i = 0,res = 0; trie *p = root; trie *temp; //遍历字符串s while(s[i])&#123; //26个小写字母映射到0~25 int id = s[i] - 'a'; //若没有找到nxt[id]且当前指针没有指向root（root的fail指针为NULL），则沿着fail指针遍历直到找到或指向root while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; //若p==NULL，说明最终都没有找到，让p指向root if(p == NULL) p = root; //从p开始跳fail指针统计路径上的单词数 temp = p; while(temp != root &amp;&amp; temp -&gt; flag != 0)&#123; res += temp -&gt; flag; //统计后打上标记（清零单词数量） temp -&gt; flag = 0; temp = temp -&gt; fail; &#125; i++; &#125; return res;&#125; 例题+模版hdu2222题意简述：首先输入多个单词（模式串），接着输入一个目标字符串，输出有多少个模式串在目标字符串中出现过。以下为AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;bits/stdc++.h&gt;typedef unsigned long long ull;const int P = 1e9+7;const int maxn = 5e5 + 200;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[26]; trie *fail; int cnt; //计算前缀时可用，本题无用 int flag; //记录当前节点结束的字符串个数 trie()&#123; cnt = 1; flag = 0; fail = NULL; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root;int T,N,Q;char S[maxn],s1[maxn],s2[maxn];void Insert(char *s)&#123; trie *p = root; int len = strlen(s); for(int i = 0; i &lt; len; i++)&#123; int id = s[i] - 'a'; if(p-&gt;nxt[id] != NULL)&#123; p = p-&gt;nxt[id]; p -&gt; cnt++; &#125; else&#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; &#125; p -&gt; flag++;&#125;void getFail()&#123; queue&lt;trie*&gt; q; q.push(root); trie *temp,*p; while(!q.empty())&#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 26; ++i)&#123; if(p -&gt; nxt[i])&#123; if(p == root) p -&gt; nxt[i] -&gt; fail = root; else&#123; temp = p -&gt; fail; while(temp)&#123; if(temp -&gt; nxt[i])&#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; temp = temp -&gt; fail; &#125; if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125;int query(char* s)&#123; int i = 0,res = 0; trie *p = root; trie *temp; while(s[i])&#123; int id = s[i] - 'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root &amp;&amp; temp -&gt; flag != 0)&#123; res += temp -&gt; flag; temp -&gt; flag = 0; temp = temp -&gt; fail; &#125; i++; &#125; return res;&#125;//递归释放Trievoid Free(trie *p)&#123; for(int i = 0; i &lt; 26; ++i)&#123; if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); &#125; delete(p); p = NULL;&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; root = new trie; scanf("%d",&amp;N); while(N--) &#123; scanf("%s",S); Insert(S); &#125; getFail(); scanf("%s",s1); printf("%d\n",query(s1)); Free(root); &#125;&#125;]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>kmp</tag>
        <tag>Trie</tag>
        <tag>AC自动机</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
</search>
