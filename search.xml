<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ICPC随笔]]></title>
    <url>%2F2019%2F09%2F09%2Ficpc20190909%2F</url>
    <content type="text"><![CDATA[好久没更新了。。打了几场ICPC网络赛，把一些收获写一下记录一下吧 离散化当数据很大而询问较小时，常常用到的方法，只考虑被询问的元素，以前写的离散化过于暴力，这里整理一个简单的模版。 1234567891011121314151617181920212223#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e7+100;//num是将a数组升序后去重的数组，n为a的元素数，cnt是num数组的元素数。int a[maxn],num[maxn],cnt,n;//idx用于获取a被离散化后x的id。int idx(int x)&#123; return lower_bound(num,num+cnt,x)-num;&#125;int main()&#123; //录入a的数据，复制到num中 cin &gt;&gt; n; for(int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; a[i]; num[i]=a[i]; &#125; //离散化过程 sort(num,num+n); cnt = unique(num,num+n)-num;&#125; 链式前向星一个简单实用的小技巧？存图的边在初始化时会快很多，本质是多个链表(从后往前)。在链式前向星用到的数组中head[i]表示最后一条被加入的从i出发的边的编号，nxt[i]表示第i条边的上一条和它出发点相同的边的编号，并且nxt[]数组最终都指向-1，因此从head[u]开始遍历，沿着nxt[]数组指向的方向直到-1就能遍历所有从u出发的边。 123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e7+100;int head[maxn],nxt[maxn],cur;pair&lt;int,int&gt; E[maxn];//加边函数，无向图时添加一条反向边即可void addedge(int u,int v,int w)&#123; E[cur]=make_pair(v,w); nxt[cur]=head[u]; head[u]=cur++; //反向边的添加 /* E[cur]=make_pair(u,w); nxt[cur]=head[v]; head[v]=cur++; */&#125;//初始化函数，理论上重置head就行了？void init()&#123; memset(head,-1,sizeof(head)); memset(nxt,-1,sizeof(nxt));&#125;//遍历从u出发的每一条边，这里只是把代码块单独抽出，实际写的时候写进算法中void explore(int u)&#123; for(int i = head[u]; i != -1; i = nxt[i])&#123; pair&lt;int,int&gt; edge = E[i]; //function(); &#125;&#125; 欧拉降幂及大数模除欧拉降幂一个公式:实现: 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;//获取单个数字的欧拉函数的值，复杂度为根号nll phi(ll n) &#123; ll ans = n ; for(int i = 2 ; i*i&lt;=n ; i++ ) &#123; if(!(n%i))&#123; ans = ans/i*(i-1) ; while(n%i == 0 )&#123; n/=i ; &#125; &#125; &#125; if(n&gt;1) ans = ans/n*(n-1) ; return ans ;&#125;//快速幂ll qpow(ll x,ll y,ll mod)&#123; ll res = 1; while(y)&#123; if(y&amp;1) res = res*x&gt;mod?res*x%mod+mod:res*x; x = x*x&gt;mod?x*x%mod+mod:x*x; y &gt;&gt;= 1; &#125; return res%mod;&#125;int main()&#123; ll a,b,c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; ll phi_c = phi(c); cout &lt;&lt; qpow(a,b%phi_c,c) &lt;&lt; endl;&#125; 大数模除在上题中我们使用long long来存储的b，那么当b非常大时如何计算b%phi_c呢？很简单，从b的最左边开始边读边模就行了。核心代码如下 1234string b;cin &gt;&gt; b;ll tmp = 0,phi_c = phi(c);for(int i = 0; i &lt; b.length(); ++i) tmp = (tmp*10+b[i]-'0') % phi_c; 代码最后得到的tmp就是b%phi_c的结果。 a^b%c结合上述两个算法，可以实现a^b%c问题，其中b可以非常大。 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;//获取单个数字的欧拉函数的值，复杂度为根号nll phi(ll n) &#123; ll ans = n ; for(int i = 2 ; i*i&lt;=n ; i++ ) &#123; if(!(n%i))&#123; ans = ans/i*(i-1) ; while(n%i == 0 )&#123; n/=i ; &#125; &#125; &#125; if(n&gt;1) ans = ans/n*(n-1) ; return ans ;&#125;//快速幂ll qpow(ll x,ll y,ll mod)&#123; ll res = 1; while(y)&#123; if(y&amp;1) res = res*x&gt;mod?res*x%mod+mod:res*x; x = x*x&gt;mod?x*x%mod+mod:x*x; y &gt;&gt;= 1; &#125; return res%mod;&#125;int main()&#123; ll a,c; string b; while(cin &gt;&gt; a &gt;&gt; b &gt;&gt; c)&#123; ll tmp = 0,phi_c = phi(c); for(int i = 0; i &lt; b.length(); ++i) tmp = (tmp*10+b[i]-'0') % phi_c; cout &lt;&lt; qpow(a,tmp,c) &lt;&lt; endl; &#125;&#125;]]></content>
      <tags>
        <tag>离散化</tag>
        <tag>链式前向星</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暑期集训——KMP和字典树]]></title>
    <url>%2F2019%2F08%2F03%2FTrainString%2F</url>
    <content type="text"><![CDATA[还不知道KMP原理只会用的路过。。 前言在讲题之前，说一下next[]数组的含义，next[i]是指在第i个位置前（不包含i）的最大前后缀长度。 以及一个结论：设有字符串str，使len=strlen(str)以及length=len-next[len]，如果len%length==0，那么这个str是一个循环字符串，且循环节的长度为len/length。至于原理：quote 假设我们有一个字符串ababab,那么next[6]=4对吧，由于next的性质是，匹配失败后，下一个能继续进行匹配的位置，也就是说，把字符串的前四个字母，abab,平移2个单位，这个abab一定与原串的abab重合（否则就不满足失败函数的性质），这说明了什么呢，由于字符串进行了整体平移，而平移后又要重叠，那么必有s[1]=s[3],s[2]=s[4],s[3]=s[5],s[4]=s[6].说明长度为2的字符串在原串中一定重复出现，这就是len-next[len]的含义！ unquote好了就是这些，接着看一下题吧。（代码都共享了） A Hat’s Words(hdu-1247)题目地址：vj题意：给若干个单词，若其中的一个单词是由另外两个单词拼成的，那么称这个单词为hat’s word，要求按字典序输出所有的hat’s word。解题：一开始没什么思路，查了一下百度，发现这题真的是有够暴力。。用给出的所有单词建立字典树，接着对每一个单词的每一种分割，都在字典树上搜索，如果被分割的两边都能被搜索到，那么就是hat’s word，数据比较弱，速度很快，记得按字典序输出，可以用sort排序也可以用set存下后输出。 B 统计难题(hdu-1251)题目地址：vj题意：给若干个单词和若干个前缀，对于每一个前缀，要求输出它在多少个单词中是前缀。解题：字典树板子题（我的模版就是照着这道题打的），插入单词时每经过一个节点就让这个节点的cnt加一，搜索时前缀的结束节点的cnt数就是答案。tips：这道题如果用G++交可能会MLE，用C++交就不会，好像是内存管理方法的问题。 C Phone List(hdu-1671)题目地址：vj题意：给若干个数字串，如果他们之间有两个数字串有公共前缀，那么输出NO，否则输出YES。解题：和B类似，建立完字典树后搜索每一个数字串，如果搜索路径上某一节点的cnt大于等于2，那么就存在公共前缀。 D 单词数(hdu-2072)题目地址：vj题意：给一篇文章，统计文章中不同单词的数量。解题：解法一：直接用set存单词，最后set.size()就是答案。解法二：用单词建立字典树，每次插入新的单词时在末节点打上记号并让ans++，如果已经被打上记号说明是重复的单词。tips：用字典树做这道的话注意一下输入格式，我前几次不知道为啥wa了，改成sstream输入过了。 E Oulipo(hdu-1686)题目地址：vj题意：给一个模式串，给一个主串，问模式串在主串中出现了几次（可以重叠）。解题：KMP算法经典例题，在模式串匹配成功后ans++，让模式串的指针j指向next[j]即可。参考博客：https://shu-ssyze.github.io/2019/07/03/KMP-Algorithm/ F Seek the Name, Seek the Fame(poj-2752)题目地址：vj题意：给一个字符串，输出这个字符串所有满足既是前缀又是后缀的子串的长度。解题：还记得next[i]的含义吗？next[i]是在i位置之前最大公共前后缀的长度，那么我们从next[len]开始遍历直到遍历到0，就是这个字符串所有公共前后缀的长度，最后倒序输出一下就可以了。（如果看不懂可以对着代码自己模拟一下）AC代码： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int maxn = 1e6 + 5;char p[maxn];int t;int next1[maxn+1];int ans[maxn];void getNext()&#123; int plen = strlen(p); int j = 0, k = -1; next1[0] = -1; while(j &lt; plen) &#123; if(k == -1 || p[k] == p[j]) &#123; ++j; ++k; next1[j] = k; &#125; else k = next1[k]; &#125;&#125;int main()&#123; while(~scanf("%s",p))&#123; getNext(); int len = strlen(p); int tmp = next1[len],cnt=0; while(tmp != 0)&#123; ans[cnt++]=tmp; tmp=next1[tmp]; &#125; for(int i = cnt-1; i &gt;= 0; --i) printf("%d ",ans[i]); printf("%d\n",len); &#125;&#125; G 剪花布条(hdu-2087)题目地址：vj题意：给一个模式串和一个主串，问模式串在主串中出现了几次(不可重叠)。解题：仍然是KMP，与E题类似，只不过这一次匹配成功后不再让j指向next[j]而是直接指向0。 H Period(poj-1961)题目地址：vj题意：给一个字符串，问这个字符串从头开始的子串中，有多少个子串是循环字符串(诸如”abab”,”abcabc”，”abababab”的就是循环字符串，即可由某一个循环节字符串组成)，输出这些子串的长度和循环节循环的次数。解题：还记得前言中的结论吗？对字符串的每一个位置应用那个结论就能的到答案了（不懂得再去看两遍，再不懂。。就把结论记住吧）tips: 即使能被整除，整除的结果有可能是1，这种情况我们并不认为他是循环字符串，记得特判一下。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int maxn = 1e6 + 5;char p[maxn];int t;int next1[maxn];void getNext()&#123; int plen = strlen(p); int j = 0, k = -1; next1[0] = -1; while(j &lt; plen) &#123; if(k == -1 || p[k] == p[j]) &#123; ++j; ++k; next1[j] = k; &#125; else k = next1[k]; &#125;&#125;int main()&#123; int kase = 0; while(scanf("%d",&amp;t) &amp;&amp; t)&#123; scanf("%s",p); getNext(); int len = strlen(p); printf("Test case #%d\n",++kase); for(int i = 2; i &lt;= len; ++i)&#123; int length = i-next1[i]; if(i % length || i/length == 1) continue; else printf("%d %d\n",i,i/length); &#125; puts(""); &#125;&#125; I Power Strings(poj-2406)题目地址：vj题意：给一个字符串，如果它是一个循环字符串，输出他的最大循环节循环的次数，否则输出1（即循环节为字符串本身）。解题：与H题相同，而且这次不用对每个子串应用那个结论了。AC代码： 12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int maxn = 1e6 + 5;char p[maxn];int t;int next1[maxn];void getNext()&#123; int plen = strlen(p); int j = 0, k = -1; next1[0] = -1; while(j &lt; plen) &#123; if(k == -1 || p[k] == p[j]) &#123; ++j; ++k; next1[j] = k; &#125; else k = next1[k]; &#125;&#125;int main()&#123; while(~scanf("%s",p))&#123; if(p[0]=='.') break; getNext(); int len = strlen(p); int length = len - next1[len]; if(len % length) puts("1"); else printf("%d\n",len/length); &#125;&#125; 好了就到这里，今天题比较友好，大概是人生第一次AK吧hhhhhhh]]></content>
      <tags>
        <tag>KMP</tag>
        <tag>字典树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暑期集训——图论1（最短路、最小生成树）]]></title>
    <url>%2F2019%2F08%2F02%2FTrainTulun1%2F</url>
    <content type="text"><![CDATA[卑微的我只做了板子题。。更新一个一句话题解的博客？ A Networking(POJ-1287)题目地址：VJ题意：裸的不能再裸的最小生成树题，prim或kruscal任选一个就能过了，记得重边时取最短边。 B Constructing Roads(POJ-2421)题目地址：VJ题意：最小生成树，但是有一些边已经被添加了，要求求出还需添加多少边才能形成最小数。解题：用kruscal，对于已经被添加的边，额外添加一条权值为0的边即可。 C Building a Space Station(POJ-2031)题目地址：VJ题意：给出若干个球，对于每个球，给出它的x,y,z坐标以及它的半径r，有重叠部分的球我们认为已经连通，在此基础上求最小生成树。解题：kruscal或prim都可以，两个球之间的边的长度是max(d-r1-r2,0)，d为两个球球心的距离，n^2的到边即可。 D Til the Cows Come Home(POJ-2387)题目地址：vj题意：最短路裸题，跑一遍dij就可以了。 E Invitation Cards(POJ-1511)题目地址：vj题意：给若干个点，问从出发点到这些点再回来至少需要多少距离（如果要到2和3，那么必须经过1→2→1→3→1，即使在走到2的过程中走到3也一样），数据保证可以从任何点到达任何点。解题：正向边跑一遍最短路，反向边再跑一遍最短路，把所有最短路相加就是答案（可以思考一下为什么，其实也不是很难理解，重点是数据保证可以从任何点到达任何点）。tips：由于这道题的数据量十分大，建议使用链式前向星存图，如果使用邻接表存图，那么请事先记录下每一条边的信息重复利用同一个邻接表多次赋值，使用两个邻接表跑两边最短路会超时（我也不知道为什么。。）。链式前向星的代码就不给了，用链式前向星基本不可能T，不管用SPFA还是DIJ都一样，这里给出邻接表的代码。AC代码：(运行时间约5000ms) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;typedef long long ll;const int maxn = 1e6+5;const int inf = 0x3f3f3f3f;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0):to(a),val(b)&#123;&#125;&#125;;struct nod&#123; int pos; int d; nod(int a = 0,int b = 0):pos(a),d(b)&#123;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q;int T,N,M,dis[maxn],from[maxn],to[maxn],val[maxn];ll ans;void dij()&#123; memset(dis,inf,sizeof(dis)); dis[1]=0; Q.push(nod(1,0));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125; for(int i = 1; i &lt;= N; ++i) ans+=dis[i];&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;N,&amp;M); for(int i = 0; i &lt; M; ++i)&#123; int f,t,v; scanf("%d%d%d",&amp;f,&amp;t,&amp;v); from[i]=f;to[i]=t;val[i]=v; E[from[i]].push_back(edge(to[i],val[i])); &#125; ans = 0; dij(); for(int i = 1; i &lt;= N; ++i) E[i].clear(); for(int i = 0; i &lt; M; ++i) E[to[i]].push_back(edge(from[i],val[i])); dij(); for(int i = 1; i &lt;= N; ++i) E[i].clear(); printf("%lld\n",ans); &#125; return 0;&#125; F Heavy Transportation(POJ-1797)题目地址：VJ题意：给若干个点和边，求一条从1号点到N号点的路径，使路径上最长边的值最大。解题：类似最短路，只不过最短路的定义变了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int maxn = 1000+50;const int inf = 1e6;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; int d; nod(int a = 0,int b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &lt; (nod a, nod b)&#123; return a.d&lt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];int T,N,dis[maxn],m,kase;//dis[i]为从X到i的最短距离，可以根据情况扩充为d[i][j][k].....//加边，无向图时添加两条边void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); return;&#125;void dij()&#123; memset(dis,0,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt; &gt; Q; Q.push(nod(1,inf));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &lt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = min(d,val); if(nd &gt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; N &gt;&gt; m; while(m--)&#123; int f,t,v; cin &gt;&gt; f &gt;&gt; t &gt;&gt; v; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); &#125; dij(); cout &lt;&lt; "Scenario #" &lt;&lt; ++kase &lt;&lt; ":\n"; cout &lt;&lt; dis[N] &lt;&lt; endl &lt;&lt; endl; memset(dis,0,sizeof(dis)); for(int i = 1; i &lt;= N; ++i) E[i].clear(); &#125;&#125; G Arbitrage(POJ-2240)题目地址：VJ题意：能不能套汇？解题：floyd裸题（以前的代码对每一个点做Bellman-Ford竟然过了hdu的这题。。POJ这题只能用floyd）。 H Wormholes(poj-3259)题目地址：VJ解题：SPFA判负环裸题。 I Subway(POJ-2502)题目地址：VJ题意：小明要从家到学校，可以走路或走地铁，给出家、学校、地铁站的坐标（有多条地铁），求到学校至少要多久。解题：最短路，家为1号点，学校为2号点，地铁站为后面的点，同一条地铁线路上的点之间的时间为距离/地铁速度，除此之外的为距离/步行速度，最后从1号点到2号点的最短时间就是答案。tips：需要注意的是这道题里的距离是欧几里得距离而不是曼哈顿距离，以及注意单位的换算。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;const int maxn = 1000+50;const int inf = 0x3f3f3f3f;const double subspeed = 40 * 1000 / 60;const double conspeed = 10 * 1000 / 60;using namespace std;struct point&#123; double x,y; point(double a=0,double b=0):x(a),y(b)&#123;&#125;&#125;po[maxn];struct edge&#123; int to; double val; edge(int a = 0,double b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; double d; nod(int a = 0,double b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];int N;//dis[i]为从X到i的最短距离，可以根据情况扩充为d[i][j][k].....double dis[maxn];//加边，无向图时添加两条边void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); return;&#125;void dij()&#123; for(int i = 1; i &lt;= N; ++i) dis[i] = 1e10; priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; Q.push(nod(1,0));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; double d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; double val = E[pos][i].val; double nd = d + val; if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; po[1].x &gt;&gt; po[1].y; cin &gt;&gt; po[2].x &gt;&gt; po[2].y; N=2; double tx,ty; while(true)&#123; double ttlen = 0; bool flag=0; int st = N+1; while(cin &gt;&gt; tx &gt;&gt; ty)&#123; if(tx==-1 &amp;&amp; ty==-1) break; N++; po[N].x=tx;po[N].y=ty; if(flag==0) flag=1; else&#123; double dx = abs(tx-po[N-1].x),dy = abs(ty-po[N-1].y); double dis = sqrt(dx*dx+dy*dy); E[N].push_back(edge(N-1,dis/subspeed)); E[N-1].push_back(edge(N,dis/subspeed)); &#125; &#125; if(cin.peek()==EOF) break; &#125; for(int i = 1; i &lt;= N; ++i) for(int j = i+1; j &lt;= N; ++j)&#123; double dx = abs(po[i].x-po[j].x),dy = abs(po[i].y-po[j].y); double dis = sqrt(dx*dx+dy*dy); E[i].push_back(edge(j,dis/conspeed)); E[j].push_back(edge(i,dis/conspeed)); &#125; dij(); cout &lt;&lt; round(dis[2]) &lt;&lt; endl; return 0;&#125; 就到这了，后面两题还没做，也不想补。。（咸鱼.jpg）]]></content>
      <categories>
        <category>ACM暑期集训</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
        <tag>最短路问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暑期集训——线段树篇]]></title>
    <url>%2F2019%2F07%2F31%2FTrainSegTree%2F</url>
    <content type="text"><![CDATA[线段树还是一个很神奇的东西，对区间加法有了新的认识。 VJ帐号：LotusIR，代码基本上都共享了（除了少数实在觉得丢脸的）。很多代码直接复制的板子，有比较多的注释，可以忽略。今天正好有空就把这个补了吧比赛地址：VJ A HDU-1166线段树单点加减和查询板子题，不贴代码了，占空间。。 B HDU-1754同A，这题是单点直接修改的。 C HDU-1394题意自己看吧。解题：总而言之统计出初始状态下数列中的逆序对，你可以用归并排序统计，当然今天的主题是线段树，所以就用权值线段树统计吧。接着开始滚动，我们很容易发现，如果我们把开头的第一个数a1放到数列的末尾，那么会多出n-1-a1个逆序对，同时会减少a1个逆序对，滚动一遍这个数列每次更新答案就能的到最小值了。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 5000+200;int tree[maxn],a[maxn],n;void pushup(int rt)&#123; tree[rt] = tree[rt&lt;&lt;1] + tree[rt&lt;&lt;1|1];&#125;//插入一个数字void Insert(int x,int l, int r, int rt)&#123; if(l==r)&#123;tree[rt]++;return;&#125; int m = (l+r) &gt;&gt; 1; if(x &lt;= m) Insert(x,l,m,rt&lt;&lt;1); else Insert(x,m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//查询某个区间中数字出现的次数int queryseg(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return tree[rt]; int res = 0; int m = (l+r) &gt;&gt; 1; if(L &lt;= m) res += queryseg(L,R,l,m,rt&lt;&lt;1); if(R &gt;= m+1) res += queryseg(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); while(cin &gt;&gt; n)&#123; memset(tree,0,sizeof(tree)); int sum = 0; for(int i = 1; i &lt;= n; ++i)&#123; cin &gt;&gt; a[i]; Insert(a[i],0,n-1,1); sum+=queryseg(a[i]+1,n-1,0,n-1,1); &#125; int ans = sum; for(int i = 1; i &lt;= n; ++i)&#123; sum += n-1-a[i]; sum -= a[i]; ans = min(ans,sum); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; D HDU-1698区间改值的求和线段树板子题，不贴代码了。 E POJ-3468同D，这题是区间加减的板子题。 F POJ-2777状态压缩的线段树，还挺有意思的。题意还是自己看~解题：线段树的节点上存储一个统计量，表示这个线段中所有的颜色的种类。具体的说，如果这个区间上有1,2,3,4，那么这个统计量就是0b1111(二进制，存下来以后是一个int或者ll)，同样的，如果有1,3而没有2,4,那么这个统计量就是0b0101，由于颜色的种类小于30种，所以用int就能存了，以防万一可以用ll，在区间合并的时候采用按位或运算(|)就可以了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;iostream&gt;#include &lt;cstring&gt;#define FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)typedef long long ll;const int maxn = 1e5+300;const int inf = 0x3f3f3f3f;using namespace std;ll N,a[maxn],Sum[maxn&lt;&lt;2],lazy[maxn&lt;&lt;2],T,O;//更新当前节点void pushup(int rt)&#123; Sum[rt] = Sum[rt&lt;&lt;1] | Sum[rt&lt;&lt;1|1];&#125;//下传函数void pushdown(int l,int r,int rt)&#123; //区间改值 if(lazy[rt])&#123; lazy[rt&lt;&lt;1] = lazy[rt]; lazy[rt&lt;&lt;1|1] = lazy[rt]; Sum[rt&lt;&lt;1] = lazy[rt]; Sum[rt&lt;&lt;1|1] = lazy[rt]; lazy[rt] = 0; &#125; //区间增减 /*if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] += lazy[rt]; lazy[rt&lt;&lt;1|1] += lazy[rt]; Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m); lazy[rt] = 0; &#125;*/&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123; Sum[rt] = a[l]; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间ll query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Sum[rt]; int m = (l+r) &gt;&gt; 1; ll res = 0; pushdown(l,r,rt); if(L &lt;= m) res |= query(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) res |= query(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;void segupdate(int L,int R,int l,int r,int rt,int lzy)&#123; if(L &lt;= l &amp;&amp; R &gt;= r)&#123; //区间改值 lazy[rt]=lzy; Sum[rt]=lzy; //区间加减 /*lazy[rt]+=lzy; sum[rt]+=(r-l+1) * lzy;*/ return; &#125; int m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1,lzy); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1,lzy); pushup(rt); return;&#125;int getans(ll a)&#123; int cnt = 0; while(a)&#123; if(a&amp;1) cnt++; a &gt;&gt;= 1; &#125; return cnt;&#125;int main()&#123; FAST; cin &gt;&gt; N &gt;&gt; T &gt;&gt; O; memset(lazy,0,sizeof(lazy)); for(int i = 1; i &lt;= N; ++i) a[i]=1; build(1,N,1); char op; while(O--)&#123; cin &gt;&gt; op; if(op=='C')&#123; int L,R,C; cin &gt;&gt; L &gt;&gt; R &gt;&gt; C; if(L&gt;R) swap(L,R); segupdate(L,R,1,N,1,(1&lt;&lt;(C-1))); &#125; else if(op=='P')&#123; int L,R; cin &gt;&gt; L &gt;&gt; R; if(L&gt;R) swap(L,R); cout &lt;&lt; getans(query(L,R,1,N,1))&lt;&lt;endl; &#125; &#125;&#125; G HDU-1542矩形平面交面积，还没做也还没看，下次看情况更新吧，如果还有下次的话 H HDU-4027区间开根号，按照ppt上的做法找着码就能过了。其实就是在暴力修改每一个值的基础上加了一个剪枝。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;bits/stdc++.h&gt;#define FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)typedef long long ll;const int maxn = 1e5+300;const int inf = 0x3f3f3f3f;using namespace std;ll N,M,a[maxn],Sum[maxn&lt;&lt;2],T,X,Y,kase;//更新当前节点void pushup(int rt)&#123; Sum[rt] = Sum[rt&lt;&lt;1] + Sum[rt&lt;&lt;1|1];&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123; Sum[rt] = a[l]; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间ll query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Sum[rt]; int m = (l+r) &gt;&gt; 1; ll res = 0; if(L &lt;= m) res += query(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) res += query(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;void segupdate(int L,int R,int l,int r,int rt)&#123; if(l==r)&#123;Sum[rt] = floor(sqrt(Sum[rt]));return;&#125; if(query(l,r,1,N,1)==r-l+1) return; int m = (l+r) &gt;&gt; 1; if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1); pushup(rt); return;&#125;int main()&#123; FAST; while(cin &gt;&gt; N)&#123; cout &lt;&lt; "Case #" &lt;&lt; ++kase &lt;&lt; ":\n"; for(int i = 1; i &lt;= N; ++i) cin &gt;&gt; a[i]; build(1,N,1); cin &gt;&gt; M; while(M--)&#123; cin &gt;&gt; T &gt;&gt; X &gt;&gt; Y; if(X&gt;Y) swap(X,Y); if(T==0) segupdate(X,Y,1,N,1); if(T==1) cout &lt;&lt; query(X,Y,1,N,1) &lt;&lt; endl; &#125; cout &lt;&lt; endl; &#125;&#125; I HYSBZ-1018神奇的一道题，线段树的节点维护区间内4个顶点的连通性以及中点的联通性，合并区间时按着图合并就行了。（应该可以用向右的延伸性代替中点的联通性，带我改了没过，可能还有啥细节吧。。）AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 1e5+300;const int inf = 0x3f3f3f3f;using namespace std;int N;struct node&#123; bool lt_rt; bool lt_rb; bool lt_lb; bool lb_rt; bool lb_rb; bool rt_rb; bool t_m; bool b_m;&#125;tree[maxn &lt;&lt; 2];void pushup(node &amp;now,node l,node r)&#123; now.lt_rt =(l.lt_rt &amp; now.t_m &amp; r.lt_rt) | (l.lt_rb &amp; now.b_m &amp; r.lb_rt); now.lt_rb =(l.lt_rt &amp; now.t_m &amp; r.lt_rb) | (l.lt_rb &amp; now.b_m &amp; r.lb_rb); now.lb_rt =(l.lb_rt &amp; now.t_m &amp; r.lt_rt) | (l.lb_rb &amp; now.b_m &amp; r.lb_rt); now.lb_rb =(l.lb_rt &amp; now.t_m &amp; r.lt_rb) | (l.lb_rb &amp; now.b_m &amp; r.lb_rb); now.lt_lb =l.lt_lb | (l.lt_rt &amp; now.t_m &amp; r.lt_lb &amp; now.b_m &amp; l.lb_rb); now.rt_rb =r.rt_rb | (r.lt_rt &amp; now.t_m &amp; l.rt_rb &amp; now.b_m &amp; r.lb_rb);&#125;void build(int l,int r,int rt)&#123; if(l==r)&#123; tree[rt].lt_rt=tree[rt].lb_rb=1; tree[rt].t_m=tree[rt].b_m=1; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1);&#125;void update1(int c,int r,int val,int L,int R,int rt)&#123; int m = (L+R) &gt;&gt; 1; if(m==c)&#123; if(r==1) tree[rt].t_m=val; if(r==2) tree[rt].b_m=val; pushup(tree[rt],tree[rt&lt;&lt;1],tree[rt&lt;&lt;1|1]); return; &#125; if(c&lt;=m)update1(c,r,val,L,m,rt&lt;&lt;1); else update1(c,r,val,m+1,R,rt&lt;&lt;1|1); pushup(tree[rt],tree[rt&lt;&lt;1],tree[rt&lt;&lt;1|1]);&#125;void update2(int c,int val,int l,int r,int rt)&#123; if(l==r)&#123; tree[rt].lt_rb=tree[rt].lt_lb=tree[rt].rt_rb=tree[rt].lb_rt=val; return; &#125; int m = (l+r) &gt;&gt; 1; if(c&lt;=m)update2(c,val,l,m,rt&lt;&lt;1); else update2(c,val,m+1,r,rt&lt;&lt;1|1); pushup(tree[rt],tree[rt&lt;&lt;1],tree[rt&lt;&lt;1|1]);&#125;node query(int c1,int c2,int l,int r,int rt)&#123; int m = (l+r) &gt;&gt; 1; if(c1&lt;=l&amp;&amp;c2&gt;=r) return tree[rt]; if(c2 &lt;= m) return query(c1,c2,l,m,rt&lt;&lt;1); else if(c1 &gt;= m+1) return query(c1,c2,m+1,r,rt&lt;&lt;1|1); else&#123; node res = tree[rt]; pushup(res,query(c1,c2,l,m,rt&lt;&lt;1),query(c1,c2,m+1,r,rt&lt;&lt;1|1)); return res; &#125;&#125;int main()&#123; scanf("%d",&amp;N); build(1,N,1); char op[10]; while(scanf("%s",op))&#123; if(op[0]=='E') break; int c1,c2,r1,r2,val; scanf("%d%d%d%d",&amp;r1,&amp;c1,&amp;r2,&amp;c2); if(c1&gt;c2) swap(c1,c2),swap(r1,r2); if(op[0] == 'A')&#123; node n1=query(1,c1,1,N,1),n2=query(c1,c2,1,N,1),n3=query(c2,N,1,N,1); bool ans; if(r1==1 &amp;&amp; r2==1) ans = n2.lt_rt | (n1.rt_rb &amp; n2.lb_rt) | (n3.lt_lb &amp; n2.lt_rb) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lb_rb); if(r1==1 &amp;&amp; r2==2) ans = n2.lt_rb | (n1.rt_rb &amp; n2.lb_rb) | (n3.lt_lb &amp; n2.lt_rt) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lb_rt); if(r1==2 &amp;&amp; r2==1) ans = n2.lb_rt | (n1.rt_rb &amp; n2.lt_rt) | (n3.lt_lb &amp; n2.lb_rb) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lt_rb); if(r1==2 &amp;&amp; r2==2) ans = n2.lb_rb | (n1.rt_rb &amp; n2.lt_rb) | (n3.lt_lb &amp; n2.lb_rt) | (n3.lt_lb &amp; n1.rt_rb &amp; n2.lt_rt); puts(ans?"Y":"N"); &#125; else&#123; val = (op[0]=='O'?1:0); if(c1==c2) update2(c1,val,1,N,1); else update1(c1,r1,val,1,N,1); &#125; &#125;&#125; 区间加法好了今天的题就到这里了，最后说一下区间加法。什么是区间加法呢？简单来说，把一个大的区间分割成两个小的区间，如果能从小区间的统计量推算出大区间的统计量，那么这个统计量就是符合区间加法的。比如在今天的H题中，显然可以从小区间的颜色种类推出大区间的颜色种类，当然也有更复杂也更神奇一些的，比如在I题中，从小区间的联通性可以推知大区间的联通性，再比如说实际上gcd也是符合区间加法的，诸如此类的还有很多，都可以用线段树来进行维护。在线段树的代码中，有一个叫做pushup的函数，实际上这个函数就是用子区间做区间加法来更新母区间，尽管平时我们只用它来自下而上地更新线段树，但如果区间加法的过程较为复杂，我们也可以用这个函数来做区间加法，就像I题中那样。]]></content>
      <categories>
        <category>ACM暑期集训</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暑期集训第一周]]></title>
    <url>%2F2019%2F07%2F29%2FTrain1st%2F</url>
    <content type="text"><![CDATA[前言暑期集训开始了呢！一点都不兴奋呢！好吧不扯淡了，第一周学了STL、动态规划、搜索、数论等相关内容。 STL讲道理STL、C++的训练题真是一点意思也没有，全是模拟，没什么特别的题，先贴一个或许会用的到的函数吧（貌似以前就说过但不怎么用。。）。lower_bound(a,a+N,ask)函数,找到在a~a[N-1]范围内第一个比ask大的元素（可能是数字也可能是字符串、字符等）。返回一个指针，将这个指针减去a可以得到下标，由于是用二分实现，复杂度为log(n)。然后的话队列套队列挺有意思的（也可以各种STL嵌套），就贴这道题吧。 UVA-540VJ地址：UVA540题意简述：有若干个人排队，每个人有一个所属的队伍，当一个新来的人进入队列时，如果有队友在队列中，则插入最后一个队友的后面，否则排到队尾。ENQUEUE x代表x号进入队伍，DEQUEUE代表队列第一人出队，对于每一次DEQUEUE输出出队的人的编号，STOP停止模拟。解题：模拟就完事了，维护一个队伍的队列和队伍内的队列。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;const int maxn = 1e3+200;using namespace std;queue&lt;int&gt; teamqueue;queue&lt;int&gt; manqueue[maxn];map&lt;int,int&gt; Team;bool inqueue[maxn];int t,a,n,kase;string op;int main()&#123; while(cin &gt;&gt; t)&#123; if(t==0) break; cout &lt;&lt; "Scenario #" &lt;&lt; ++kase &lt;&lt; endl; for(int i = 1; i &lt;= t; ++i)&#123; cin &gt;&gt; n; while(n--)&#123; cin &gt;&gt; a; Team[a]=i; &#125; &#125; while(cin &gt;&gt; op)&#123; if(op=="STOP") break; if(op=="ENQUEUE")&#123; cin &gt;&gt; a; if(inqueue[Team[a]]) manqueue[Team[a]].push(a); else&#123; manqueue[Team[a]].push(a); teamqueue.push(Team[a]); inqueue[Team[a]]=true; &#125; &#125; if(op=="DEQUEUE")&#123; int teamid=teamqueue.front(); int manid=manqueue[teamid].front(); manqueue[teamid].pop(); if(manqueue[teamid].empty())&#123; teamqueue.pop(); inqueue[teamid]=false; &#125; cout &lt;&lt; manid &lt;&lt; endl; &#125; &#125; cout &lt;&lt; endl; for(int i = 1; i &lt;= t; ++i) while(!manqueue[i].empty()) manqueue[i].pop(); while(!teamqueue.empty()) teamqueue.pop(); memset(inqueue,0,sizeof(inqueue)); &#125; return 0;&#125; 其实也挺无聊的。。而且UVA的格式要求真的是有毒。。 贪心贪心算法怎么说呢。。反正我不太擅长，可能我不够贪吧。。直接上题了。 POJ1700-Crossing RiverVJ地址：POJ1700题意简述：经典的过河问题。有N个人和1条船，第i个人过河需要的时间为ai，船能载两个人，船过河的时间是两个人中较慢的那个人的时间，问把所有人运过河至少需要多少时间。解题：想着让最快的人不停带人过去再回来，然后发现是错的。。因为还有另一种策略，最快的和第二快的一起过去，然后最快的回来，接着最慢的和第二慢的过去，b回来。这两种策略中选择一个较快的就是答案，此外当人数小于等于3时直接处理即可。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#include &lt;string&gt;typedef long long ll;const int inf = 0x3f3f3f3f;const int maxn = 1500;using namespace std;int T,N,a[maxn],ans;int main()&#123; cin &gt;&gt; T; while(T--)&#123; ans=0; cin &gt;&gt; N; for(int i = 0; i &lt; N; ++i) cin &gt;&gt; a[i]; sort(a,a+N); if(N &lt;= 3)&#123; if(N==1) ans = a[0]; if(N==2) ans = a[1]; if(N==3) ans = a[0]+a[1]+a[2]; &#125; else&#123; for(int i = N-1; i &gt; 1; i-=2)&#123; if(i &gt;= 3)&#123; if(a[0]+a[i-1]&gt;=2*a[1]) ans+=a[1]+a[0]+a[i]+a[1]; else ans+=a[i]+a[0]+a[i-1]+a[0]; &#125; else ans += a[2] + a[0]; &#125; ans += a[1]; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; POJ3253-Fence RepaierVJ地址：POJ3253题意：哈夫曼树经典例题。AC代码： 12345678910111213141516171819202122232425262728#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;typedef long long ll;const int inf = 0x3f3f3f3f;const int maxn = 5e4+500;using namespace std;ll n,input,sum,ans;int main()&#123; priority_queue&lt; ll,vector&lt;ll&gt;,greater&lt;ll&gt; &gt; pq; cin &gt;&gt; n; for(ll i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; input; pq.push(input); &#125; while(pq.size()&gt;1)&#123; ll min1 = pq.top(); pq.pop(); ll min2 = pq.top(); pq.pop(); ans += min1+min2; pq.push(min1+min2); &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 剩下几道比较简单或者不会，不想补了（咸鱼） 搜索搜索比较简单，暴力就完事了，贴两道状压搜索。 HDU1429-胜利大逃亡VJ地址：HDU1429题意：捡钥匙走迷宫，问能否在指定时间走出迷宫。解题：在BFS的基础上用一个int来存储角色获得的钥匙的状态，然后进行朴素的BFS即可。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;using namespace std;const int zt=0b111111111111;const int maxn = 22;const int dir[4][2]=&#123;1,0,-1,0,0,1,0,-1&#125;;struct node&#123; int x,y,dep,key; node(int a,int b,int c,int d):x(a),y(b),dep(c),key(d)&#123;&#125;&#125;;char mp[maxn][maxn];int stx,sty,ans,dep[maxn][maxn][zt],n,m,t;void solve()&#123; memset(dep,-1,sizeof(dep)); ans = -1; queue&lt;node&gt; q; dep[stx][sty][0]=0; q.push(node(stx,sty,0,0)); while(!q.empty())&#123; node u = q.front(); q.pop(); int nkey=u.key; if(u.dep&gt;=t) break; if(mp[u.x][u.y]=='^')&#123; ans=u.dep; break; &#125; if(mp[u.x][u.y] &gt;= 'a' &amp;&amp; mp[u.x][u.y] &lt;= 'j') nkey |= (1 &lt;&lt; (mp[u.x][u.y]-'a')); for(int i = 0; i &lt; 4; ++i)&#123; int nx=u.x+dir[i][0],ny=u.y+dir[i][1]; if(nx &lt; 1 || nx &gt; n || ny &lt; 1 || ny &gt; m) continue; if(mp[nx][ny]=='*') continue; if(mp[nx][ny]=='.' || mp[nx][ny]=='@' || (mp[nx][ny] &gt;= 'a' &amp;&amp; mp[nx][ny] &lt;= 'j') || mp[nx][ny] == '^') if(dep[nx][ny][nkey]==-1)&#123; dep[nx][ny][nkey]=u.dep+1; q.push(node(nx,ny,u.dep+1,nkey)); &#125; if(mp[nx][ny]&gt;='A'&amp;&amp;mp[nx][ny]&lt;='J') if(nkey &amp; (1 &lt;&lt; mp[nx][ny]-'A')) if(dep[nx][ny][nkey]==-1)&#123; dep[nx][ny][nkey]=u.dep+1; q.push(node(nx,ny,u.dep+1,nkey)); &#125; &#125; &#125;&#125;int main()&#123; while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; t)&#123; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j)&#123; cin &gt;&gt; mp[i][j]; if(mp[i][j]=='@')&#123; stx=i; sty=j; &#125; &#125; solve(); cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 代码可能丑了点，不过难得搜索题一发AC！ CF||SHU||牛客-CSL的校园卡VJ地址：CSL的校园卡解题：不仅加入了一个状态记录走过的路径，而且有两个点，于是VIS[x][y]变成了vis[path][x1][y1][x2][y2]。接着进行BFS就行了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;const int maxn = 0b1111111111111111;const int inf = 0x3f3f3f3f;int n,m,tar,vis[maxn][5][5][5][5],mp[5][5],stx,sty,ans;int dir[4][2]=&#123;&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,1&#125;,&#123;0,-1&#125;&#125;;char input;struct node&#123; int x1,y1; int x2,y2; int now; int dep; node(int a=0,int b=0,int c=0,int d=0,int e=0,int f=0):x1(a),y1(b),x2(c),y2(d),now(e),dep(f)&#123;&#125;&#125;;bool legal(int x,int y)&#123; if(x&gt;=0&amp;&amp;y&gt;=0&amp;&amp;x&lt;n&amp;&amp;y&lt;m&amp;&amp;mp[x][y]==1) return true; else return false;&#125;void BFS()&#123; queue&lt;node&gt; q; q.push(node(stx,sty,stx,sty,1&lt;&lt;(stx*m+sty),0)); vis[1&lt;&lt;(stx*m+sty)][stx][sty][stx][sty]=1; while(!q.empty())&#123; int x1,y1,x2,y2,now,dep; x1=q.front().x1; y1=q.front().y1; x2=q.front().x2; y2=q.front().y2; now=q.front().now; dep=q.front().dep; q.pop(); //cout &lt;&lt; x1 &lt;&lt; " " &lt;&lt; y1 &lt;&lt; " " &lt;&lt; x2 &lt;&lt; " " &lt;&lt; y2 &lt;&lt; " " &lt;&lt; now &lt;&lt; " " &lt;&lt; dep &lt;&lt; " " &lt;&lt; tar &lt;&lt; endl; if(now==tar)&#123; ans=dep; break; &#125; for(int i = 0; i &lt; 4; i++)&#123; int newx1,newy1,tmp; newx1=x1+dir[i][0];newy1=y1+dir[i][1]; if(!legal(newx1,newy1)) continue; for(int j = 0; j &lt; 4; j++)&#123; int newx2,newy2; newx2=x2+dir[j][0];newy2=y2+dir[j][1]; if(legal(newx2,newy2)) tmp = now | (1&lt;&lt;(newx2*m+newy2)) | (1&lt;&lt;(newx1*m+newy1)); else continue; if(!vis[tmp][newx1][newy1][newx2][newy2])&#123; vis[tmp][newx1][newy1][newx2][newy2]=1; q.push(node(newx1,newy1,newx2,newy2,tmp,dep+1)); &#125; &#125; &#125; &#125;&#125;int main()&#123; cin &gt;&gt; n &gt;&gt; m; for(int i = 0; i &lt; n; ++i) for(int j = 0; j &lt; m; ++j)&#123; cin &gt;&gt; input; if(input == 'X') mp[i][j]=0; else&#123; mp[i][j]=1; tar |= (1&lt;&lt;(i*m+j)); &#125; if(input == 'S')&#123; stx=i; sty=j; &#125; &#125; BFS(); cout &lt;&lt; ans;&#125; 倒也不难，但没接触过状压搜索的话估计想不到。 搜索就这样了，反正就是各种暴力。 动态规划DP。。。DP咋办呢，我实在时不会啊emmmm LCS（最长公共子序列）VJ地址：HDU1159题意：LCS裸题，经典DP应用，直接上代码了。AC代码： 1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;const int maxn = 200;using namespace std;string s1,s2;int lcs(string s1, string s2) &#123; int len1 = s1.size(); int len2 = s2.size(); vector&lt;vector&lt;int&gt;&gt; c(len1+1, vector&lt;int&gt;(len2+1, 0)); for (int i = 1 ; i &lt;= len1; i++) &#123; for(int j = 1; j &lt;=len2 ; j++) &#123; if (s1[i-1] == s2[j-1]) c[i][j] = c[i - 1][j - 1] + 1; else if (c[i - 1][j] &gt;= c[i][j - 1]) c[i][j] = c[i - 1][j]; else c[i][j] = c[i][j - 1]; &#125; &#125; return c[len1][len2];&#125;int main()&#123; while(cin &gt;&gt; s1 &gt;&gt; s2)&#123; cout &lt;&lt; lcs(s1,s2) &lt;&lt; endl; &#125; return 0;&#125; CF1105C-Ayoub and Lost ArrayVJ地址：CF1105C题意：给定l,r,n，求在[l,r]内选n个数(可以重复选)，要求这些数的和能被3整除，有几种选法。解题：求出[l,r]范围内被3除余0,1,2的数的个数，从小到大更新dp。dp[i][j]表示选i个数，余数为j的方案数。显然dp[0][0]=0,且有：dp[i+1][0]=dp[i][0]*MOD[0]+dp[i][1]*MOD[2]+dp[i][2]*MOD[1]以此类推，注意取模，最后输出dp[n][0]就是答案，另外统计[l,r]内被3除余数不同的数的个数时不能暴力。。AC代码： 12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;const int maxn = 2e5+100;const int mod = 1e9+7;using namespace std;long long n,l,r,MOD[3],dp[maxn][3];int main()&#123; cin &gt;&gt; n &gt;&gt; l &gt;&gt; r; for(int i = 0; i &lt; 3; ++i) MOD[i]=(r-l+1)/3; for(int i = 0; i &lt; (r-l+1)%3; ++i)&#123; if((l+i)%3==0)MOD[0]++; if((l+i)%3==1)MOD[1]++; if((l+i)%3==2)MOD[2]++; &#125; dp[0][0]=1; for(int i = 1; i &lt;= n; ++i)&#123; dp[i][0] = (dp[i-1][0]*MOD[0]%mod+dp[i-1][1]*MOD[2]%mod+dp[i-1][2]*MOD[1]%mod)%mod; dp[i][1] = (dp[i-1][0]*MOD[1]%mod+dp[i-1][1]*MOD[0]%mod+dp[i-1][2]*MOD[2]%mod)%mod; dp[i][2] = (dp[i-1][0]*MOD[2]%mod+dp[i-1][1]*MOD[1]%mod+dp[i-1][2]*MOD[0]%mod)%mod; &#125; cout &lt;&lt; dp[n][0] &lt;&lt; endl; return 0;&#125; CF1096D-Easy ProblemVJ地址:CF1096D题意：给一个字符串，删去若干个字符，删去每个字符的cost不同，问让这个字符串不含”hard”子序列至少需要多少cost。解题：对于’h’，只能删去所有的’h’，对于’a’，可以删去所有’h’或所有’a’或所有符合顺序的’ha’，以此类推。AC代码： 1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;const int maxn = 1e5+100;using namespace std;int n;int val[maxn];string s;long long ans,h,a,r,d;int main()&#123; cin &gt;&gt; n; cin &gt;&gt; s; for(int i = 0; i &lt; n; ++i) cin &gt;&gt; val[i]; for(int i = 0; i &lt; n; ++i)&#123; if(s[i]=='h') h+=val[i]; if(s[i]=='a') a=min(h,a+val[i]); if(s[i]=='r') r=min(a,r+val[i]); if(s[i]=='d') d=min(r,d+val[i]); &#125; cout &lt;&lt; d &lt;&lt; endl; return 0;&#125; h,a,r,d分别记录到i位置对于该字母的最优策略，显然后面的字母的最优策略会优于前面的或者等于前面的，其实就是一个dp[4][n]被压缩到1维的结果; HDU1024-Max Sum Plus Plusvj地址：HDU1024题意：自己看吧。。解题：挺神奇的，把2维的dp压缩的过程。（还没很弄懂，以后再回来看看吧）AC代码： 123456789101112131415161718192021222324252627#include &lt;bits/stdc++.h&gt;const int maxn = 1e6+100;const int mod = 1e9+7;const long long inf = 0x3f3f3f3f;using namespace std;int m,n;long long dp[maxn],a[maxn],pre[maxn],mx;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(); while(cin &gt;&gt; m &gt;&gt; n)&#123; memset(dp,0,sizeof(dp)); memset(pre,0,sizeof(pre)); for(int i = 1; i &lt;= n; ++i) cin &gt;&gt; a[i]; for(int i = 1; i &lt;= m; ++i)&#123; mx = -inf; for(int j = i; j &lt;= n; ++j)&#123; dp[j]=max(dp[j-1],pre[j-1])+a[j]; pre[j-1]=mx; mx=max(mx,dp[j]); &#125; &#125; cout &lt;&lt; mx &lt;&lt; endl; &#125; return 0;&#125; 做了一天的DP感觉自己的DP还是很菜。。 数论今天累了明天吧。 - 2019/7/29]]></content>
      <categories>
        <category>ACM暑期集训</category>
      </categories>
      <tags>
        <tag>-STL -动态规划 -搜索 -数论 -贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU09]]></title>
    <url>%2F2019%2F07%2F08%2FHDU09%2F</url>
    <content type="text"><![CDATA[比赛地址：HDU09做了四道。。还行吧。 HDU09A Big binary tree待补 B Ch’s gift题意：给一棵树，点有点权，给两个点，给最小值和最大值，求两点间的路径上点权在[最小值，最大值]范围内的点权之和。解题：树链剖分？还没学，明天看情况补吧。 C CSGO计算几何？大陀螺，待补。 D Dying Light看着像计算几何，待补。 FFF at Valentine题意：给一张有向图，问存不存在两点互不联通。解题：方法一：暴力万岁！对每个点进行BFS判断联通即可。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;bits/stdc++.h&gt;const int maxn = 1100;using namespace std;int T,m,n,able[maxn][maxn],vis[maxn];vector&lt;int&gt; E[maxn];void BFS(int pos)&#123; memset(vis,0,sizeof(vis)); queue&lt;int&gt; q; q.push(pos); while(!q.empty())&#123; int t = q.front(); q.pop(); if(vis[t]) continue; vis[t]=1; able[pos][t] = 1; for(int i = 0; i &lt; E[t].size(); ++i) if(!vis[E[t][i]]) q.push(E[t][i]); &#125;&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; scanf("%d%d",&amp;n,&amp;m); while(m--)&#123; int f,t; scanf("%d%d",&amp;f,&amp;t); E[f].push_back(t); &#125; for(int i = 1; i &lt;= n; ++i) BFS(i); bool flag = true; for(int i = 1; i &lt;= n &amp;&amp; flag; ++i)&#123; for(int j = 1; j &lt;= n &amp;&amp; flag; ++j)&#123; if(!able[i][j] &amp;&amp; !able[j][i]) flag = false; &#125; &#125; if(!flag) puts("Light my fire!"); else puts("I love you my love and our love save us!"); for(int i = 1; i &lt;= n; ++i) E[i].clear(); memset(able,0,sizeof(able)); &#125; return 0;&#125; 时间卡的比较紧。。还好数据不强。 方法二：tarjan+拓扑排序=我不会代码：CSDN博客 Senior Pan题意：给一张有向图，给一个点集，求点集中最短路的最小值。解题：方法一：构造一个超级源点，连接所有点集中的点且边权为0。超级源点到点集中点的最短路的最小值就是点集中最短路的最小值，跑一次dij就好了。注意最小值可能是一个点到自己的距离，要把这种情况排除。 tips:添加超级源点可以通过把所有与超级源点相连的点push进queue实现，不必真的添加源点。 AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;const int maxn = 100000+400;const int inf = 0x3f3f3f3f;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; int d; int from; nod(int a = 0,int b = 0,int c = 0)&#123;pos=a;d=b;from=c;&#125; friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;vector&lt;edge&gt; E[maxn];vector&lt;int&gt; beg;int T,n,m,k,dis[maxn],mndis = inf,vis[maxn];void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); return;&#125;void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; for(int i = 0; i &lt; beg.size(); ++i) Q.push(nod(beg[i],0,beg[i])); while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; int from = temp.from; Q.pop(); if(d &gt; dis[pos]) continue; for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; if(vis[to] &amp;&amp; to != from) mndis = min(mndis,nd); if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd,vis[to]?to:from)); &#125; &#125; &#125;&#125;void reset()&#123; beg.clear(); for(int i = 1; i &lt;= n; ++i) E[i].clear(); mndis = inf; memset(vis,0,sizeof(vis));&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; int kase = 0; while(T--)&#123; cin &gt;&gt; n &gt;&gt; m; while(m--)&#123; int from,to,val; cin &gt;&gt; from &gt;&gt; to &gt;&gt; val; add(from,to,val); &#125; cin &gt;&gt; k; while(k--)&#123; int x; cin &gt;&gt; x; beg.push_back(x); vis[x]=1; &#125; dij(); cout &lt;&lt; "Case #" &lt;&lt; ++kase &lt;&lt; ": " &lt;&lt; mndis &lt;&lt; endl; reset(); &#125; return 0;&#125; 方法二：最短路+随机=我又不会代码：CSDN博客 G Missile Interception待补 H Numbers题意：给两个数列a和数列b，数列b中的每一个数的值是数列a中两个数的和。如a为1，2，3，那么b为1+2，1+3，2+3也就是3，4，5。解题：前两个数一定是a中的数，他们的和一定是b中的一个数，向后循环，每在a中加入一个数从数列中删去所有这个数能产生的和。用map维护。总之就是暴力模拟。。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 125251;const int INF = 0x3f3f3f3f;int str[maxn];int m,n;vector&lt;int&gt; a;map&lt;int,int&gt; b; //记录first在b中出现的次数int main()&#123; while(scanf("%d",&amp;m)!=EOF) &#123; n = (-1 + sqrt(1 + 8 * m)) / 2; for(int i=0;i&lt;m;i++) scanf("%d",&amp;str[i]); sort(str,str+m); a.clear(); b.clear(); a.push_back(str[0]); a.push_back(str[1]); b[a[0] + a[1]]++; for(int i=2;i&lt;m;i++) &#123; if(b[str[i]]) &#123; b[str[i]]--; continue; &#125; else &#123; a.push_back(str[i]); for(int j=0;j&lt;a.size()-1;j++) &#123; int sum = a[j] + str[i]; b[sum]++; &#125; &#125; &#125; printf("%d\n",n); for(int i=0;i&lt;n-1;i++) &#123; printf("%d ",a[i]); &#125; printf("%d\n",a[n-1]); &#125;&#125; I Senior PanⅡ待补。 J Two strings字符串匹配，dp，队友太猛了。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 2500 + 10;char a[maxn],b[maxn];int dp[maxn][maxn];int main()&#123; int T;scanf("%d",&amp;T); while(T --) &#123; scanf("%s%s",a+1,b+1); int la = strlen(a+1),lb = strlen(b+1); bool flag = true; int j = 1;memset(dp,0,sizeof(dp)); dp[0][0] = 1; for(int i = 1; i &lt;= la; i ++) &#123; for(int j = 1; j &lt;= lb; j ++) &#123; if(a[i] == b[j]) &#123; if( (b[j + 1] == '*' &amp;&amp; dp[i][j - 1]) || dp[i - 1][j - 1] == 1)dp[i][j] = 1; if(b[j - 1] == '*' &amp;&amp; ( dp[i - 1][j - 3] || dp[i][j - 1]) )dp[i][j] = 1; &#125; else if(b[j] == '.') &#123; if(dp[i - 1][j - 1])dp[i][j] = 1; &#125; else if(b[j] == '*') &#123; if(a[i - 1] == a[i] &amp;&amp; (dp[i - 1][j] || dp[i - 1][j - 1]) )dp[i][j] = 1; if(b[j - 1] == '.' &amp;&amp; dp[i - 1][j - 1] &amp;&amp; a[i] == a[i - 1])dp[i][j] = 1; if(dp[i][j - 2] || dp[i][j - 1] )dp[i][j] = 1; &#125; else dp[i][j] = 0; &#125; &#125; if(dp[la][lb]) printf("yes\n"); else printf("no\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM自闭日记</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排列组合笔记]]></title>
    <url>%2F2019%2F07%2F04%2Fcombination%2F</url>
    <content type="text"><![CDATA[密码是我学号~（小技巧怎么能分享呢hhhhhhh） Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM暑期训练赛（HDU08）]]></title>
    <url>%2F2019%2F07%2F04%2FHDU08%2F</url>
    <content type="text"><![CDATA[2019/7/4 真TM热今天的比赛是英语阅读专场。 比赛地址：HDU08由于是英语阅读专场（星战粉专场）只给做出来的题的题意和题解了。。真的不想翻译有多阅读专场？建议阅读H题。 HDU08A Army Formations数据结构题，不会。 B Battlestation Operational没看，天澜大佬做出来了，不知道有多难。 C Casual Podracing没看，不翻译了。 D Death Podracing没看。 E Engineering of the Clones没看。 F Fleet of the Eternal Throne题意：有点难解释，自己看吧。。解题：杭电真喜欢AC自动机把给出的模式串构造AC自动机，AC自动机的节点记录当前字符串的长度，对于给出的X和Y，先把字符串X在AC自动机上跑一遍，记录所有匹配到的节点（包括fail节点，不一定是字符串的结束节点），这些匹配到的节点既是某个模式串的前缀，又是X的子串。再把字符串Y在AC自动机上跑一遍，匹配到已经被标记过的节点时更新最长长度，最后输出即可。这题的输入有点坑，模式串一共1e5行，但模式串的总长又不超过1e5，写输入写了好久。。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166#include &lt;bits/stdc++.h&gt;const int maxn = 1e5 + 500;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[26]; trie *fail; int len; bool flag; trie() &#123; len = 0; flag = 0; fail = NULL; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root;int T,n,m,x,y,pos[maxn];char S[maxn],s1[maxn],s2[maxn];void Insert(char *s)&#123; trie *p = root; int len = strlen(s); for(int i = 0; i &lt; len; i++) &#123; int id = s[i] - 'a'; if(p-&gt;nxt[id] != NULL) &#123; p -&gt; nxt[id] -&gt; len = p -&gt; len + 1; p = p-&gt;nxt[id]; &#125; else &#123; p -&gt; nxt[id] = new trie; p -&gt; nxt[id] -&gt; len = p -&gt; len + 1; p = p -&gt; nxt[id]; &#125; &#125;&#125;void getFail()&#123; queue&lt;trie*&gt; q; q.push(root); trie *temp,*p; while(!q.empty()) &#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 26; ++i) &#123; if(p -&gt; nxt[i]) &#123; if(p == root) p -&gt; nxt[i] -&gt; fail = root; else &#123; temp = p -&gt; fail; while(temp) &#123; if(temp -&gt; nxt[i]) &#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; temp = temp -&gt; fail; &#125; if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125;void queryx(char* s)&#123; int i = 0; trie *p = root; trie *temp; while(s[i]) &#123; int id = s[i] - 'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root) &#123; temp -&gt; flag = 1; temp = temp -&gt; fail; &#125; i++; &#125; return;&#125;int queryy(char* s)&#123; int i = 0,mxlen = 0; trie *p = root; trie *temp; while(s[i]) &#123; int id = s[i] - 'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root) &#123; if(temp -&gt; flag == 1) mxlen = max(mxlen,temp-&gt;len); temp = temp -&gt; fail; &#125; i++; &#125; return mxlen;&#125;void Free(trie *p)&#123; for(int i = 0; i &lt; 26; ++i) &#123; if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); &#125; delete(p); p = NULL;&#125;void reset(trie *p)&#123; for(int i = 0; i &lt; 26; ++i) &#123; if(p -&gt; nxt[i] != NULL) reset(p-&gt;nxt[i]); &#125; p -&gt; flag = 0;&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; root = new trie; scanf("%d",&amp;n); int d = 0; getchar(); for(int i = 1; i &lt;= n; ++i)&#123; gets(S+d); Insert(S+d); pos[i] = d; d += strlen(S+d) + 1; &#125; getFail(); scanf("%d",&amp;m); while(m--)&#123; reset(root); scanf("%d%d",&amp;x,&amp;y); queryx(S+pos[x]); printf("%d\n",queryy(S+pos[y])); &#125; Free(root); &#125;&#125; G Galaxy at War没看 H Hybrid Crystals题意：给出数组a1,a2,a3….an，同时给出字符数组b1,b2,b3….bn,如果bi是N，那么ai可正可负，如果bi是L，那么ai是正的，如果bi是D，那么ai是负的，给出一个整数k，询问能否从ai中取出若干个使它们的和为k。此外还有一个奇怪的不等式$ai≤∑j=1i−1aj[bj=N]+∑j=1i−1aj[bi=L∩bj=L]+∑j=1i−1aj[bi=D∩bj=D]( 2 ≤ i ≤ n ).$解题：这个不等式保证了相邻的ai至多只会差1，初始状态下只有a1可以构成[-1,1]间所有的整数，此时如果来了一个正数1，那么能构成的值变成了[0,1]，如果来了一个负数1，那么能构成[-2,0]，若是正负1,那么能构成[-2,2]，区间的扩展是连续的，例如对于a1，只有出现一个3才会打断区间的连续性变成[2,4]，也就是只有当ai+1=ai+2时才会打断连续性，而不等式保证了不会出现这种情况。换句话说，每一个数都只会连续地扩大能够得到的和的范围，因此只要统计出最大负值和最大正值再判断k是否在这个区间呢就可以了。AC代码： 123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;const int maxn = 1e3+200;using namespace std;int T,n,k,a[maxn],psum,nsum;char in;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; psum = 0;nsum = 0; cin &gt;&gt; n &gt;&gt; k; for(int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; a[i]; &#125; for(int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; in; if(in == 'L') psum+=a[i]; else if(in == 'D') nsum+=a[i]; else&#123;psum+=a[i];nsum+=a[i];&#125; &#125; if(k &gt; 0)&#123; if(k &lt;= psum) puts("yes"); else puts("no"); &#125; else&#123; if(-k &lt;= nsum) puts("yes"); else puts("no"); &#125; &#125; return 0;&#125; I I am your Father!没看。 J Jedi Council没看。 K Killer Names题意：给出两个整数n和m，要求在大小为m的字符集中选出若干个字符，组成两段长度为n的字符串，要求两串字符串中不能有相同的字符（如在第一个字符串中出现了’a’，那么第二个字符串中就不能再出现’a’，但同一个字符串内可以有重复的字符）。题解：排列组合题，学到了新的东西——第二类斯特林数，第二类斯特林数是将m个格子分成n个集合有多少种不同的分法，我准备单独写一篇排列组合的文章了。。AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;bits/stdc++.h&gt;typedef long long ll;const ll mod = 1e9+7;using namespace std;ll T,n,m,fac[3000],c[3000][3000],s[3000][3000];ll qpow(ll a,ll b)&#123; ll res=1; while(b)&#123; if(b&amp;1) res = res * a % mod; b &gt;&gt;= 1; a = a * a % mod; &#125; return res;&#125;void init()&#123; //阶乘 fac[0]=fac[1]=1; for(int i = 2; i &lt;= 2000; ++i) fac[i] = fac[i-1] * i % mod; //组合数（杨辉三角） for(int i=0;i&lt;=2000;i++) &#123; for(int j=0;j&lt;=i;j++) &#123; if(j==0 || j==i) c[i][j]=1; else c[i][j] = (c[i-1][j-1]+c[i-1][j])%mod; &#125; &#125; //斯特林数 for(int i=0;i&lt;=2000;i++) s[i][i]=1,s[i][0]=0; for(int i=1;i&lt;=2000;i++) &#123; for(int j=1;j&lt;=i-1;j++) &#123; s[i][j]=(j*s[i-1][j]+s[i-1][j-1])%mod; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); init(); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n &gt;&gt; m; ll ans=0; for(ll i = 1; i &lt;= m - 1; ++i)&#123; ll tmp = c[m][i] * s[n][i] % mod * fac[i] % mod; for(ll j = 1; j &lt;= m - i; ++j)&#123; ans = ans + tmp * c[m-i][j] % mod * s[n][j] % mod * fac[j] % mod; ans %= mod; &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 后记题面实在太长了，连补的欲望都没有了。。]]></content>
      <categories>
        <category>ACM自闭日记</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>排列组合</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树的区间修改]]></title>
    <url>%2F2019%2F07%2F04%2FSegmentChange%2F</url>
    <content type="text"><![CDATA[又是线段树相关的内容！这次的文章会介绍线段树的区间修改（包括加减和改值） 在开始区间修改的介绍前，如果你对线段树没有任何了解，请移步线段树基础。 懒惰标记区间修改用到了一个很巧妙的思想——懒惰标记。在某个节点上的懒惰标记，就是它的子节点需要做出的变化，为节点加上懒惰标记后，不需要急于将标记下传，当以后的查询过程或修改过程遍历到它是再进行下传。于是线段树的结构体中又多了一个lazy变量，当然也可以用lazy数组实现。本文代码为求和线段树 下传函数将懒惰标记下传的函数，在修改、查询等过程中用到，记得下传后消除自己的懒惰标记。比较简单，自己理解。 1234567891011121314151617181920void pushdown(int l,int r,int rt)&#123; //区间改值 if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] = lazy[rt]; lazy[rt&lt;&lt;1|1] = lazy[rt]; Sum[rt&lt;&lt;1] = lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] = lazy[rt] * (r-m); lazy[rt] = 0; &#125; //区间增减 /*if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] += lazy[rt]; lazy[rt&lt;&lt;1|1] += lazy[rt]; Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m); lazy[rt] = 0; &#125;*/&#125; 区间修改区间修改包含了改值和加减，它的过程与区间查询的过程类似，当要修改的区间完全包含某一节点，直接给该节点打上lazy标记，否则继续拆分。 123456789101112131415161718void segupdate(int L,int R,int l,int r,int rt,int lzy)&#123; if(L &lt;= l &amp;&amp; R &gt;= r)&#123; //区间改值 lazy[rt]=lzy; Sum[rt] = (r-l+1) * lzy; //区间加减 /*lazy[rt]+=lzy; sum[rt]+=(r-l+1) * lzy;*/ return; &#125; ll m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1,lzy); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1,lzy); pushup(rt); return;&#125; 完整模版线段树区间修改新增的东西到此结束，但是由于懒惰标记和下传函数的加入，单点修改和查询函数也要做出相应的修改（添加下传函数）。下面给出完整的模版（数组实现求和线段树），不含主函数。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;bits/stdc++.h&gt;#define FAST ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)typedef long long ll;const int maxn = 2e5+300;const int inf = 0x3f3f3f3f;using namespace std;int a[maxn],Sum[maxn&lt;&lt;2],lazy[maxn];//更新当前节点void pushup(int rt)&#123; Sum[rt] = Sum[rt&lt;&lt;1] + Sum[rt&lt;&lt;1|1];&#125;//下传函数void pushdown(int l,int r,int rt)&#123; //区间改值 if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] = lazy[rt]; lazy[rt&lt;&lt;1|1] = lazy[rt]; Sum[rt&lt;&lt;1] = lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] = lazy[rt] * (r-m); lazy[rt] = 0; &#125; //区间增减 /*if(lazy[rt])&#123; int m = (l+r) &gt;&gt; 1; lazy[rt&lt;&lt;1] += lazy[rt]; lazy[rt&lt;&lt;1|1] += lazy[rt]; Sum[rt&lt;&lt;1] += lazy[rt] * (m-l+1); Sum[rt&lt;&lt;1|1] += lazy[rt] * (r-m); lazy[rt] = 0; &#125;*/&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123; Sum[rt] = a[l]; return; &#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间int query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Sum[rt]; int m = (l+r) &gt;&gt; 1; int res = 0; pushdown(l,r,rt); if(L &lt;= m) res += query(L,R,l,m,rt&lt;&lt;1); if(R &gt; m) res += query(L,R,m+1,r,rt&lt;&lt;1|1); return res;&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 将L的值改为Vvoid update(int L,int V,int l,int r,int rt)&#123; if(l==r)&#123;Sum[rt]=V;return;&#125; int m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) update(L,V,l,m,rt&lt;&lt;1); else update(L,V,m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;void segupdate(int L,int R,int l,int r,int rt,int lzy)&#123; if(L &lt;= l &amp;&amp; R &gt;= r)&#123; //区间改值 lazy[rt]=lzy; Sum[rt] = (r-l+1) * lzy; //区间加减 /*lazy[rt]+=lzy; sum[rt]+=(r-l+1) * lzy;*/ return; &#125; int m = (l+r) &gt;&gt; 1; pushdown(l,r,rt); if(L &lt;= m) segupdate(L,R,l,m,rt&lt;&lt;1,lzy); if(R &gt; m) segupdate(L,R,m+1,r,rt&lt;&lt;1|1,lzy); pushup(rt); return;&#125;]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU6096-String（AC自动机）]]></title>
    <url>%2F2019%2F07%2F04%2FHDU6096%2F</url>
    <content type="text"><![CDATA[题目地址：HDU6096Problem DescriptionBob has a dictionary with N words in it.Now there is a list of words in which the middle part of the word has continuous letters disappeared. The middle part does not include the first and last character.We only know the prefix and suffix of each word, and the number of characters missing is uncertain, it could be 0. But the prefix and suffix of each word can not overlap.For each word in the list, Bob wants to determine which word is in the dictionary by prefix and suffix.There are probably many answers. You just have to figure out how many words may be the answer. InputThe first line of the input gives the number of test cases T; T test cases follow.Each test case contains two integer N and Q, The number of words in the dictionary, and the number of words in the list.Next N line, each line has a string Wi, represents the ith word in the dictionary (0&lt;|Wi|≤100000)Next Q line, each line has two string Pi , Si, represents the prefix and suffix of the ith word in the list (0&lt;|Pi|,|Si|≤100000,0&lt;|Pi|+|Si|≤100000)All of the above characters are lowercase letters.The dictionary does not contain the same words. LimitsT≤50&lt;N,Q≤100000∑Si+Pi≤500000∑Wi≤500000 OutputFor each test case, output Q lines, an integer per line, represents the answer to each word in the list. Sample Input14 4abacdeacdefacdefa acd efac ace f Sample Output2110 题意：给若干个字符串，进行若干次询问，每次询问给出一个前缀和后缀，问同时有这个前缀和后缀的字符串有几个，前缀与后缀不能重叠。解题：一道构造很巧妙的AC自动机题，首先存下给出的字符串，接着将给出的前缀(s1)和后缀(s2)以s2 + ‘{‘ + s1的形式插入字典树，构造AC自动机Fail指针，然后将每个字符串S转换成S + ‘{‘ + S的形式在AC自动机上跑，每经过一个结束节点就在这个节点的计数器上加一，不过要注意由于前缀和后缀不能重叠，因此s2+s1的长度不能超过S，最后按照询问的顺序输出结束节点的计数器即可。之所以用’{‘是因为它等于’a’+26容易建树，当然也可以用别的字符。以cd ef的查询为例，他被构造成了”ef{cd”插入了字典树，那么当用cdef{cdef跑AC自动机时就会找到这个子串。如果不用’{‘分割，那么ab cd就会匹配到aabcde，显然是不对的。最后是AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include &lt;bits/stdc++.h&gt;const int maxn = 1e5 + 200;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[27]; trie *fail; int len; int cnt; trie() &#123; len = 0; cnt = 0; fail = NULL; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root,*tr[maxn];int T,N,Q,tot;string S[maxn],s1,s2;void Insert(string s)&#123; trie *p = root; for(int i = 0; i &lt; s.length(); i++) &#123; int id = s[i]-'a'; if(p-&gt;nxt[id] != NULL) &#123; p = p-&gt;nxt[id]; &#125; else &#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; &#125; tr[tot++] = p; p -&gt; len = s.length();&#125;void getFail()&#123; queue&lt;trie*&gt; q; q.push(root); trie *temp,*p; while(!q.empty()) &#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 27; ++i) &#123; if(p -&gt; nxt[i]) &#123; if(p == root) p -&gt; nxt[i] -&gt; fail = root; else &#123; temp = p -&gt; fail; while(temp) &#123; if(temp -&gt; nxt[i]) &#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; temp = temp -&gt; fail; &#125; if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125;void query(string s)&#123; trie *p = root; trie *temp; for(int i = 0; i &lt; s.length(); ++i)&#123; int id = s[i]-'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root) &#123; if(temp-&gt;len &lt;= (s.length()-1)/2+1) temp-&gt;cnt++; temp = temp -&gt; fail; &#125; &#125;&#125;void Free(trie *p)&#123; for(int i = 0; i &lt; 27; ++i) &#123; if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); &#125; delete(p); p = NULL;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; tot = 0; root = new trie; cin &gt;&gt; N &gt;&gt; Q; for(int i = 0; i &lt; N; ++i)&#123; cin &gt;&gt; S[i]; S[i] = S[i] + '&#123;' + S[i]; &#125; while(Q--)&#123; cin &gt;&gt; s1 &gt;&gt; s2; Insert(s2+'&#123;'+s1); &#125; getFail(); for(int i = 0;i &lt; N; ++i) query(S[i]); for(int i = 0;i &lt; tot;i++) cout &lt;&lt; tr[i]-&gt;cnt&lt;&lt; endl; Free(root); &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM解题报告</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集]]></title>
    <url>%2F2019%2F07%2F03%2FUnionFind%2F</url>
    <content type="text"><![CDATA[并查集并查集是一种数据结构，用于快速合并多个集合以及查询两个节点是否在同一个集合中。 引言思考一个简单的问题：有若干个点，每一次将其中两点连起来，若干次操作后，询问任意两点是否被联通。这样的问题要怎么解决呢？废话，当然就是要依靠本文下面将介绍的并查集的算法啦！ 思考问题对于这样的问题，显然我们可以直接将两点相连，但如果这么做，询问时就会遇到麻烦。DFS?BFS?当点的数目非常多时，这么做的复杂度似乎太高了。 并查集的作用顾名思义，并查集主要有两个作用，“并”和“查”。“并”，就是将两个集合合并到一起；“查”就是是查询两点是否在同一集合中。它的主要作用就是用来解决形如引言中那样的问题。并查集采用的是一种类树形结构，那么为什么要采用类树形结构呢？因为无论是合并还是查询，树形结构都很方便，也很快。大家知道，一棵k叉树的查询复杂度是O(logk(n))，除非k等于一，否则查询的速度是非常可观的。同时，要合并两棵树也非常容易——只要将两棵树的根直接相连就可以了。 并查集的结构体实现并查集既可以用结构体实现，也可以用数组实现，这里首先给出结构体的实现和讲解，文末给出数组实现，留给读者自己思抄考写。 节点的定义首先是并查集节点的定义，之所以说并查集是一种类树形结构，是因为它与树形结构有所不同，它的节点指针方向是与树相反的。树形结构的指针方向，由父节点指向子节点，而并查集节点的指针方向则由子节点指向父节点。（可以把并查集的这种数据结构看做一棵倒着的树）。所以，并查集的结构体非常简单，只需要一个指向父节点的指针以及原始数据即可。 123456struct node&#123; //数据 int id; //父节点 node *father = NULL;&#125; 路径压缩在开始具体代码的实现前，我们来理一理逻辑。要怎么合并两棵树？连接两棵树的根节点即可。要怎么连接两棵树的根节点呢？很简单，让某一个根节点的父亲指针指向另一个就行了，不过在这之前我们必须要先找到他们的根节点。因此下面会首先给出寻找根节点的代码实现，那么路径压缩又是什么呢？我们知道，一棵树的深度越浅，我们寻找根节点的效率也就越高，最优的情况下是怎样的呢？所有的节点都紧紧围绕着根节点就像全中国人民紧密团结在习主席周围。要单独进行这样的优化比较浪费时间，因此我们可以在寻根的过程中一并递归处理，当然这样并不能保证所有节点直接连接根节点，但已经足够紧密了。 并查集的寻根知道路径压缩以后，我们可以开始寻找根节点了。寻根过程很简单，一路沿着某一节点搜索父节点指针，直到没有父节点或者父节点是其自身（这两种情况是等价的，与代码实现有关）就可以了。那么路径压缩呢？只要将寻根过程碰到的所有节点的父指针直接指向根节点就可以了，这个操作可以用递归的方式简单实现。代码如下： 1234node* FindRoot(node *a)&#123; if(a-&gt;father == NULL) return a; else return a-&gt;father = FindRoot(a-&gt;father);&#125; 并查集的合并合并过程在之前就已经说过了，对于两个节点，如果根节点不同，将一个的根节点的父亲指针指向另一个根节点，如果相同，那么不需要进行合并操作。因为已经有了寻根的函数，合并的实现就变得非常简单，代码如下： 12345void Union(node *from,node *to)&#123; node *f1 = FindRoot(from),*f2 = FindRoot(to); if(f1 == f2) return; f2-&gt;father=f1;&#125; 例题及数组实现解释完并查集的结构体实现，那么又到了喜闻乐见的模版和例题环节了，模版中用数组实现了并查集。例题：HDU1232题意：给出若干个点和若干条边，询问要将整张图联通起来，至少还需要几条边。解题思路：这是一道模版题，时间很充裕，用并查集可以简单得出结果。步骤如下1.对于给出的每一条边，对边的两个端点进行“并”的操作。2.完成第1步后，整张图被分为了多个互相之间不连通的集合，要让整张图连通，需要的边数就是集合数减一。 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;const int maxn = 1500;using namespace std;int N,M,father[maxn],a,b,vis[maxn],cnt;int Find(int a)&#123; if(father[a]==a) return a; return father[a]=Find(father[a]);&#125;void Union(int a,int b)&#123; int f1=Find(a),f2=Find(b); father[f2] = f1;&#125;void init()&#123; for(int i = 1; i &lt;= N; ++i) father[i]=i; memset(vis,0,sizeof(vis)); cnt=0;&#125;int main()&#123; //用于加速输入输出，忽视就行了 ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); while(cin &gt;&gt; N)&#123; if(N==0)break; cin &gt;&gt; M; init(); while(M--)&#123; cin &gt;&gt; a &gt;&gt; b; Union(a,b); &#125; for(int i = 1; i &lt;= N; ++i)&#123; int tmp = Find(i); if(!vis[tmp])&#123; cnt++; vis[tmp]=1; &#125; &#125; cout &lt;&lt; cnt - 1 &lt;&lt; endl; &#125; return 0;&#125; 后记并查集的介绍到此结束，这是一种比较简单的数据结构，在Kruscal算法中会用到并查集的算法。]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[置顶]]></title>
    <url>%2F2019%2F07%2F03%2Ftop%2F</url>
    <content type="text"><![CDATA[大佬队友的博客 SHU-SSYZE 模版地址：模版我又来更新这个没人看的博客了，加入ACM暑期菜鸡集训和神经网络（没有）相关的东西。 本博客已有的算法讲解和模版：1、AC自动机2、字典树3、线段树4、最短路5、最小生成树即将加入的算法讲解和模版：1、tarjan2、匈牙利算法3、km算法4、kmp算法]]></content>
  </entry>
  <entry>
    <title><![CDATA[线段树基础]]></title>
    <url>%2F2019%2F07%2F02%2FSegmentTree%2F</url>
    <content type="text"><![CDATA[线段树线段树是一种树形数据结构，用于快速统计和修改区间上的统计量。 线段树能做什么？线段树是一种完全二叉树，建树的时间复杂度为O(nlogn)，查询以及修改的复杂度都是O(logn)，可以高效的查询和修改区间统计量。 线段树的组成线段树的每一个节点上隐式地存储着这个节点所“掌管”的区间，显式地存储着节点所“掌管”区间上的某一或某些统计量。需要注意的是，这些统计量必须满足区间加法（如区间最大值是子区间最大值中的最大值，区间和为子区间和的和等），众数、最长上升子序列等不符合区间加法。如果要用结构体实现，它的节点定义将会是这样的: 1234struct node&#123; node *ls,*rs; //ls为节点左子节点的指针，rs为右子节点的指针 int sum,mx; //统计量，常用的是区间和以及区间最值&#125; 显然，如果给定一个数组a1,a2…an,以[1,n]为范围建立线段树，那么根节点所掌管的区间（这里的区间是指数组下标，而不是数字范围）就是[1,n]，而其左子节点掌管的区间是[1,n/2],右子节点掌管的区间是[n/2+1,n]。以此类推可以知道每一个节点所掌管的区间，这也就是为什么我说每一个节点上隐式地存储着这个节点所“掌管”的区间的原因。以区间[1,10]为例，一棵建好的线段树每一个节点所掌管的区间情况如下图所示： 线段树的结构体实现线段树可以用结构体和指针来实现，也可以用数组来实现，结构体的实现较为容易理解，因此本文将先用结构体来实现线段树，在本文最后会给出数组的实现方法。 区间加法用一个节点两个子节点的统计量来更新自己的统计量。具体见代码： 1234void pushup(node *rt)&#123; rt-&gt;mx = max(rt-&gt;ls-&gt;mx,rt-&gt;rs-&gt;mx); rt-&gt;sum = rt-&gt;ls-&gt;sum + rt-&gt;rs-&gt;sum;&#125; 这个函数在构造和修改值的过程中都会用到。 线段树的构造线段树的构造是一个递归建树的过程，这里直接贴上代码，边读代码边解释。 1234567891011121314//首先解释一下这5个参数//[L,R]是建立线段树所依赖的数组范围，在递归过程中不变//rt是当前递归到的指针，[l,r]是当前指针所掌管的区间，这3个变量将作为状态在递归过程中传递void build(int L,int R,int l,int r,node *rt)&#123; //如果当前指针掌管的范围只有一个元素，直接赋值并返回 if(l == r)&#123;rt -&gt; sum = a[l];rt -&gt; mx = a[r];return;&#125; //找到区间的中点 int m = (l+r) &lt;&lt; 1; //递归构造左子树和右子树 build(L,R,l,m,rt-&gt;ls); build(L,R,m+1,r,rt-&gt;rs); pushup(rt); return;&#125; 在主函数中呼叫构造函数时的初始状态通常为build(1,N,1,N,root)。 线段树的修改线段树的修改步骤大致分为两步：1.从根节点开始查找我要修改的值所在的叶节点。（没有子节点的节点称为叶节点）2.修改叶节点，沿着查找路径递归更新与该叶节点相连的所有节点。代码如下： 123456789101112131415//再来解释一下这5个参数//P是我要修改的值所在的位置，V是我要将其修改为的值//l,r,rt的含义与build中相同void update(int P,int V,int l,int r,node *rt)&#123; //找到了目标叶节点，更新叶节点的值，显然此时l=r=P if(l==r)&#123;rt-&gt;sum=V;rt-&gt;mx=V;return&#125;; //同样找出区间中点 int m = (l+r) &lt;&lt; 1; //如果目标叶节点在区间左半，向左子树找，否则向右子树找 if(P&lt;=m) update(P,V,l,m,rt-&gt;ls); else update(P,V,m+1,r,rt-&gt;rs); //递归更新与被修改的叶节点相连的所有节点 pushup(rt); return;&#125; 在主函数中呼叫时的方式是update(P,V,1,N,root)其中P、V的含义见代码注释。 线段树的查询到了最重要的查询步骤了，查询最值与查询区间和的方法大同小异。从根节点开始向下搜索，如果要查询的区间完全包含（可以相等）某一节点所掌管的区间，将这个区间的统计量加入到最终结果中；如果要查询的区间不能完全包含某一节点所掌管的区间，继续拆分这个区间直到要查询的区间能够完全包含它。具体见代码实现： 1234567891011121314151617//查询最值//[L,R]是要查询的区间//l,r,rt的含义与之前相同int querymx(int L,int R,int l,int r,node *rt)&#123; //如果查询区间完全包含当前节点所掌管的区间，返回最大值 if(L &lt;= l &amp;&amp; R &gt;= r) return rt-&gt;mx; //初始化最大值为负无穷 int res = -inf; //求出线段中点 int m = (l+r) &lt;&lt; 1; //L&lt;=m说明要查询的区间可以继续往左子树拆分 if(L &lt;= m) res = max(res,querymx(L,R,l,m,rt-&gt;ls)); //R&gt;=m+1说明要查询的区间可以继续往右子树拆分 if(R &gt;= m+1) res = max(res,querymx(L,R,m+1,r,rt-&gt;rs)); //最终得出结果 return res;&#125; 注意在上述代码中L&lt;=m和R&gt;=m+1并不是if和else的关系，一个线段可以同时既可以往左拆分也可以往右拆分（例如要查询的区间是[4,6]而当前节点掌管的区间是[1,10]），但2种情况至少成立1种（否则L就会大于R），因此-inf并不会被计算到最终结果中去。查询区间和的方法类似，只要进行简单修改就可以了： 12345678int querysum(int L,int R,int l,int r,node *rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return rt-&gt;sum; int res = 0; int m = (l+r) &lt;&lt; 1; if(L &lt;= m) res += querysum(L,R,l,m,rt-&gt;ls); if(R &gt;= m+1) res += querysum(L,R,m+1,r,rt-&gt;rs); return res;&#125; 其实只是改变了统计量的“区间加法”部分的代码，注意此时res只能被初始化为0。 线段树的数组实现说明完线段树的结构体实现，接下来就是线段树的数组实现了，大部分代码与结构体实现类似，只是把节点抽象到了统计量数组的下标上，此时对于任意一个节点$rt$，它的左子节点是$rt * 2$,它的右子节点是$rt * 2+1$,个人习惯用rt&lt;&lt;1表示$rt * 2$,用rt&lt;&lt;1|1表示$rt * 2+1$。数组实现线段树的方法代码较为简洁，但理解起来稍有些抽象。这里是一道例题：HDU1754以下给出完整的AC代码（数组实现线段树的模版）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;const int maxn = 200000 + 5;const int inf = 0x3f3f3f3f;int N,M,mark[maxn],Max[maxn&lt;&lt;2]; //数组要开到区间长度的4倍确保空间够用//更新当前节点void pushup(int rt)&#123; Max[rt] = max(Max[rt&lt;&lt;1],Max[rt&lt;&lt;1|1]);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号void build(int l,int r,int rt)&#123; if(l == r)&#123;Max[rt] = mark[l];return;&#125; int m = (l+r) &gt;&gt; 1; build(l,m,rt&lt;&lt;1); build(m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 [L,R]查询的区间int query(int L,int R,int l,int r,int rt)&#123; if(L &lt;= l &amp;&amp; R &gt;= r) return Max[rt]; int m = (l+r) &gt;&gt; 1; int res = 0; if(L &lt;= m) res = max(res,query(L,R,l,m,rt&lt;&lt;1)); if(R &gt; m) res = max(res,query(L,R,m+1,r,rt&lt;&lt;1|1)); return res;&#125;//l:当前节点的左端点 r：当前节点的右端点 rt:当前节点的编号 将L的值改为Vvoid update(int L,int V,int l,int r,int rt)&#123; if(l==r)&#123;Max[rt]=V;return;&#125;; int m = (l+r) &gt;&gt; 1; if(L &lt;= m) update(L,V,l,m,rt&lt;&lt;1); else update(L,V,m+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;int main()&#123; while(scanf("%d%d",&amp;N,&amp;M) != EOF)&#123; for(int i = 1; i &lt;= N; ++i) scanf("%d",&amp;mark[i]); build(1,N,1); char c; int a,b; while(M--)&#123; scanf(" %c%d%d",&amp;c,&amp;a,&amp;b); if(c=='Q') printf("%d\n",query(a,b,1,N,1)); else update(a,b,1,N,1); &#125; &#125; return 0;&#125; 读者可以结合注释与前文结构体实现的代码进行对照理解。 后记又一个数据结构写完了，当然以后还会更新线段树的加强版：主席树、红黑树等，敬请期待咯~更新了区间修改的内容，欢迎阅读:线段树区间修改。]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模版]]></title>
    <url>%2F2019%2F07%2F02%2FTemplate%2F</url>
    <content type="text"><![CDATA[密码是我的学号哟o(∩_∩)o Incorrect Password! No content to display! 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]]></content>
  </entry>
  <entry>
    <title><![CDATA[素数相关]]></title>
    <url>%2F2019%2F07%2F02%2Fprime%2F</url>
    <content type="text"><![CDATA[素数素数，就是因数只有1和自己的数，本文将介绍一些素数相关的内容。 素数筛一种快速找出一定范围内所有素数的方法。 埃拉托斯特尼筛法简称埃氏筛或埃筛，是一种十分好写也十分容易理解的素数筛法。原理十分简单，如果一个数是素数，那么他的任意倍数一定不是素数。因此我们首先假设所有数都是素数，接着从2开始找，2是素数，那么把它的所有倍数标记为非素数，从小到大开始筛，这样当我们找到一个数还没有被标记为非素数的话，它一定是一个素数，再次标记它的所有倍数为非素数，依此循环。下面给出代码： 1234567891011121314151617#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 4e3;//只筛到maxn以内的质数using namespace std;int not_prime[maxn],prime[maxn];void getprime()&#123; int cnt = 0; for(int i = 2; i &lt;= maxn; ++i)&#123; if(!not_prime[i])&#123; prime[cnt++] = i; for(int j = i + i; j &lt;= maxn; j+=i) not_prime[j] = 1; &#125; &#125;&#125; 欧拉筛法又名快速素数筛或欧筛，一听名字就知道它很快。那么为什么欧拉筛法比埃氏筛快呢，或者说，埃氏筛法哪里慢了？观察埃氏筛法，我们发现，同一个合数，它有可能被多个素数筛到，比如6被2筛到之后又会被3筛到，这就造成了多余的运算。而欧拉筛避免了这一点，在欧拉筛中每一个合数都只会被筛到一次，实现了线性复杂度O(n)。 过程简述欧筛的过程简述如下：1.与埃筛一样，将所有数假设为素数。2.从2开始遍历，如果遇到一个素数，那么将这个素数加入素数表。3.无论遇到的是不是素数，都遍历素数表（为了方便表述，设这个数为N，当前遍历到的素数为P），将$N*P$标记为非素数，如果此时N能够被P整除，那么结束素数表的遍历，否则继续遍历素数表。 过程模拟为了方便理解，这里给出10以内的素数的遍历过程。（已经理解的跳过分割线内的内容） 初始状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 0 0 0 0 0 0 0 素数表为空遍历到2时，2是素数，将2加入素数表，遍历素数表，$22=4$标记为非素数，因为2能整除2，结束素数表的遍历。此时状态：*not_prime数组**(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 0 0 0 0 0 素数表 2 接着遍历3，3是素数，将3加入素数表，遍历素数表会将6和9标记为非素数。此时状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 1 0 0 1 0 素数表 2 3 遍历4，4不是素数，不加入素数表，遍历素数表，会将8标记为素数（2能整除4，因此只遍历到2就结束素数表的遍历）此时状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 1 0 1 1 0 素数表 2 3 遍历5，5是素数，将5加入素数表，遍历素数表会把10，15，25标记为非素数。此时状态：not_prime数组(not_prime数值为0说明是素数) 1 2 3 4 5 6 7 8 9 10 1 0 0 1 0 1 0 1 1 1 素数表 2 3 5 实际上至此10以内的所有素数已经全部被筛出了，接着遍历6会将12标记为非素数，而遍历7会把14、21、35、49标记为非素数……在这个过程中，每一个合数都只会被筛到一次，证明略。 具体代码给出代码实现： 123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 1e6;using namespace std;int not_prime[maxn],prime[maxn];void getprime()&#123; not_prime[1] = 1; int tot = 0; for(int i = 2; i &lt;= maxn; ++i)&#123; if(!not_prime[i]) prime[tot++] = i; for(int j = 0; prime[j]*i &lt;= maxn; j++)&#123; int x = prime[j]*i; not_prime[x] = 1; if(i % prime[j] == 0) break; &#125; &#125;&#125; 相较于埃氏筛，欧拉筛法更快，且没有其他缺点，因此实际上只要记住欧拉筛就可以了埃氏筛比较好记就是了 分解素因数将一个大合数N分解成素因数的乘积，方法如下：1.用欧拉筛或埃氏筛得到素数表。2.从素数表中最小的素数P开始，如果N能够被P整除，那么将N /= P，并将P作为素因数的指数加一，重复这个步骤直到N不能被P整除。3.用下一个较大的素数重复第2步，直到取出大于$sqrt(N)$的第一个素数。4.如果N已经被除到了1，那么素因数分解完毕，如果N还没有被除到1，那么N最终的值是它自己的最后一个素因数。 用途较少，这里给出一道可用这种方法解答的例题：SHUOJ2只能用校内网连上，连不上就算了。。题意简述：给定正整数A,B（1&lt;=A,B&lt;=1000）,求$GCD(A,B^B)$。解题思路：由于B较大，显然不能直接求出$B^B$再求GCD，因此对A和B进行素因数分解，再将B的每一个素因数的指数乘以B，就能得出$B^B$的素因数，A和B的公共素因数的乘积就是所求的答案。AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 1e3;using namespace std;int not_prime[maxn],prime[maxn],cnt[2][35],A,B;void getprime()&#123; not_prime[1] = 1; int tot = 0; for(int i = 2; i &lt;= maxn; ++i)&#123; if(!not_prime[i]) prime[tot++] = i; for(int j = 0; j&lt;tot &amp;&amp; prime[j]*i &lt;= maxn; j++)&#123; int x = prime[j]*i; not_prime[x] = 1; if(i % prime[j] == 0) break; &#125; &#125;&#125;//快速幂int qpow(int x,int y)&#123; int res = 1; while(y)&#123; if(y&amp;1) res = res * x; y &gt;&gt;= 1; x = x * x; &#125; return res;&#125;int main()&#123; getprime(); while(cin &gt;&gt; A &gt;&gt; B)&#123; memset(cnt,0,sizeof(cnt)); int t = B; for(int i = 0; i &lt;= 30; i++)&#123; while(A % prime[i] == 0)&#123;cnt[0][i]++;A /= prime[i];&#125; while(B % prime[i] == 0)&#123;cnt[1][i]++;B /= prime[i];&#125; cnt[1][i] *= t; &#125; int ans = 1; for(int i = 0; i &lt;= 30; i++)&#123; ans *= qpow(prime[i],min(cnt[0][i],cnt[1][i])); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; 本题还有另一种做法,之后可能会补上。此外，有一件很奇怪的事就是当maxn取某些值的时候，prime[0]会莫名其妙变成1，暂时没有发现原因。。 后记素数相关的算法和思想还是比较重要的，HDU的多校赛经常出现GCD等相关问题。今天的训练赛打的真是自闭]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>素数筛</tag>
        <tag>分解因数</tag>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM暑期训练赛（HDU07）]]></title>
    <url>%2F2019%2F07%2F02%2FHDU07%2F</url>
    <content type="text"><![CDATA[2019/07/02 阴有雨又是自闭的一天2019/07/03 晴？阴？更新了B、C、H的题解 比赛地址：HDU07 HDU07A All Kill（待补） B Build a Tree题意：给出一棵有N个节点的完全K叉树，求这棵树所有子树大小异或后的答案。解题：待补，考虑将子树分为完整的K叉树和不完整的K叉树，不完整的k叉树至多只有一棵，单独处理这棵树，从树的最底层向上递归求解。 C Color the chessboard题意：给出一张矩形图，图上每一个单位矩形初始状态下被涂为白色或红色或蓝色，现在要将这张图上的每一个白色的单位矩形染上色，要求所有具有偶数行数和偶数列数的矩形中所含有的蓝色矩形和红色矩形数量相等。解题：待补，显然只要所有的2*2的矩形都满足条件，那么就能满足条件，DFS or DP？ D Destroy the cube(待补) E Euler theorem题意：给出若干个整数，对于每一个整数，要求输出这个整数余除以任意一个数能得到的余数的个数。（如，对于3，3%3=0,3%4=3,3%2=1,任何数都不能让3余2，因此有3个余数）。解题：签到题打表就能得到答案。显然，对于一个数N，任何数不可能让它余超过$(N-1)/2$，而任意不超过N/2的余数都是有可能得到的，因此最终的答案就是$N/2+2$(1~N/2以及0和N)。简单证明：要让$N$余一个数$m$，只要让他余除$N-m$就可以了，但当$m&gt;(N-1)/2$时$2(N-m)&lt;N+1$,即$2(N-m)&lt;=N$,这时$N$余除$(N-m)$的值就变成了$N$余除$2(N-m)$的值，显然这是一个小于$(N-1)/2$的值。 F Free from square题意：给出两个整数n,K（小于500），要求从1 ~ K中挑出n个整数，这些整数的乘积不能被任何完全平方数（除了1）整除，输出可行的方案数。解题：待补，显然不能选相同的数字，且选了一个数以后不能再选任何它的倍数。然后不会了 G Give out candies（待补） H Hard challenge题意：在二维坐标平面上给出若干个点的坐标和权值，保证任意两点所连成的直线不经过原点，任意两点间的边的权值等于这两点权值的乘积，现在要求过原点画一条直线，这条直线所穿过的边的权值之和最大，输出最大的权值。解题：代码待补1.首先，任何一条过原点的直线所穿过的边的权值之和，等于直线一边所有点的权值之和乘以直线另一边所有点的权值之和。2.根据原点到每一个点连线的斜率，可以将所画直线的斜率分成若干个区间，枚举这些区间就能得出答案。3.为了得到区间，首先需要将点按照斜率的不同进行排序（极序排序），接着按照第0个点到第1个点间，第1个点到第2个点间……的顺序进行枚举。4.可以在0 ~ 360°的区间内维护一个前缀和快速得出某一直线两边的点的权值之和。 I Inverse of sum（待补） J Just do it题意：给出一个数列a0a1a2……an，要求进行一种运算m次，这种运算就是将每一个ai变成bi，切bi的值等于原数列ai从a0异或到ai的结果。解题：待补，找规律？我找了个规律然后T了(┬＿┬) K Kolakoski题意：有一种特殊的数列，它的第一项是1，这个数列形如：1，2，2，1，1，2，1，2，2……，将这个数列相同的项合并会变成1，22，11，2，1，22……，计算每一项的位数作为新数列这一项的值会变成1，2，2，1，1，2……，我们发现这个数列变回了最初的数列，现在要求输出这个数列的第n项（n&lt;1e7）。解题：n的数值较小，直接用vector暴力模拟即可。简述模拟过程：1.首先初始化数列的前3项为1，2，22.接着将指针指向第3项（2）。3.沿着指针，如果发现了一个2，那么需要在队尾添加两个相同的数，但这个数要与前一个数不同，因此如果此时队尾元素是1那么push_back两个2，如果队尾元素是2那么push_back两个1；如果发现了一个1，那么push_back一个与队尾元素不同的数即可。贴上AC的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;bits/stdc++.h&gt;using namespace std;vector&lt;int&gt; s;int main()&#123; int t,temp; //模拟过程 s.push_back(1); s.push_back(2); s.push_back(2); for(int i=2;i&lt;1e7+5;i++) &#123; temp = s.size() - 1; if(s[i] == 1) &#123; if(s[temp] == 1) &#123; s.push_back(2); &#125; else &#123; s.push_back(1); &#125; &#125; else &#123; if(s[temp] == 2) &#123; s.push_back(1); s.push_back(1); &#125; else &#123; s.push_back(2); s.push_back(2); &#125; &#125; &#125; //模拟结束 cin&gt;&gt;t; while(t--) &#123; int n; cin&gt;&gt;n; cout&lt;&lt;s[n-1]&lt;&lt;endl; &#125;&#125; L Loop next（待补） M Mystery（待补） 看看明天能补几道吧。。(┬＿┬) 补题日记7/3H Hard challenge解题：大致解法与昨天写的差不多，不过实际写代码的时候有一些问题，因此做了一些改变，改变后的解题方法如下：1.将所有点按照斜率k从大到小的顺序排序。2.初始状态下让所画的直线竖置，这样将所有点分为直线左边的点与直线右边的点两组（特别注意在y轴上的点分在直线右边，此时可以认为直线并不完全竖置），输入时统计直线左边的点权和lsum和直线右边的点权和rsum。3.维护lsum和rsum。按k从大到小的顺序遍历每一个点，每一次改变直线将这个点的分组改变（由于已经按k排序，每次移动直线只会有一个点的分组被改变），根据这个点的位置对lsum和rsum做出相应的变化。4.昨天维护前缀和的问题在于0 ~ 360°并不是一个离散的范围而是一个连续的范围，前缀数组的维护有难度。貌似也是可以的，但我懒得想了以下是AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 5e4+200;const int inf = 0x3f3f3f3f;using namespace std;struct points&#123; int x,y,val; double k;//斜率&#125;P[maxn];int n,T;ll lsum,rsum,ans;bool cmp(points a,points b)&#123; return a.k&gt;b.k;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n; lsum = 0;rsum = 0; for(int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; P[i].x &gt;&gt; P[i].y &gt;&gt; P[i].val; //计算出斜率 P[i].k = atan(1.0*P[i].y/P[i].x); //预设lsum和rsum状态 if(P[i].x &lt; 0) lsum += P[i].val; else rsum += P[i].val; &#125; //按斜率排序 sort(P,P+n,cmp); //预设ans状态 ans = lsum * rsum; //遍历，维护lsum、rsum和ans for(int i = 0; i &lt; n; ++i)&#123; if(P[i].x &gt; 0)&#123; lsum += P[i].val; rsum -= P[i].val; &#125; else&#123; lsum -= P[i].val; rsum += P[i].val; &#125; ans = max(ans,lsum*rsum); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; B Build a tree我的数据结构是真的菜啊解题：显然，题目给出的是一个有n个节点的完全k叉树，观察这课树，不难发现，除了第一层和最后一层，每一层至多只有一棵子树不是满k叉树，而这棵子树左边的所有子树是满k叉树，右边是深度小一的满k叉树（画张图就很清楚了），因此按以下步骤求解：1.预处理，用一个数组记录每一层最后一个节点的编号，同时得到树的深度。2.首先单独处理最后一层，将可能不是满k叉树的那几个节点单独挑出，并标记最后一个节点，其余统一进行异或。3.向上遍历，每一层由三部分组成：①最深的满k叉树②不满的那棵k叉树③浅一层的k叉树。每次遍历一层将标记上传的父节点，这个节点就是那棵可能不满的k叉树，左边是较深的k叉树，右边是较浅的k叉树。很容易得到满k叉树的size和数目，因此统一异或。不满的k叉树的size等于这一层以下（包含这一层）的总节点数减去左边满k叉树的size之和再减去右边满k叉树的size之和。4.一直遍历到树的第一层，结束遍历。5.显然遍历的时间复杂度是$logk(n)$，只要k&gt;=2，是很快就能遍历完的，但当k=1是遍历会很慢，因此打表特判。下面给出AC代码，代码比较丑，将就一下吧： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;bits/stdc++.h&gt;typedef long long ll;using namespace std;int T;//num记录每一层最后一个节点的编号，pos是非满k叉树节点的编号//LSize是pos左边满k叉树的size，RSize同理//ex是单独处理的子树的异或结果,restSize是非满k叉树的sizell n,k,num[70],dep,pos,LSize,RSize,nowdep,ex,restSize;ll qpow(ll a,ll b)&#123; ll res = 1; while(b)&#123; if(b&amp;1) res *= a; b &gt;&gt;= 1; a*=a; &#125; return res;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n &gt;&gt; k; //特判k=1的情况 if(k == 1)&#123; ll tmp = n % 4; if(tmp == 0) cout &lt;&lt; n &lt;&lt; '\n'; if(tmp == 1) cout &lt;&lt; 1 &lt;&lt; '\n'; if(tmp == 2) cout &lt;&lt; n+1 &lt;&lt; '\n'; if(tmp == 3) cout &lt;&lt; 0 &lt;&lt; '\n'; continue; &#125; else&#123; ll i = 0,ans = n; num[0] = 0; //找出每一层最后一个节点的编号以及树的深度 while(num[i] &lt; n - 1 &amp;&amp; num[i] &lt;= n - 1 - qpow(k,i+1))&#123; num[i+1] = num[i] + qpow(k,i+1); i++; &#125; pos = n - 1; //可能组成非满2叉树的节点数 restSize = (pos-num[i])%k; ans ^= (((pos-num[i])-restSize) &amp; 1); ex = ((restSize&amp;1)?1:0); //深度是i+1，原因自己看上面的while条件，主要是怕他溢出ll。。 dep = i + 1; //最后一层已经处理完，开始处理倒数第二层 nowdep = i; LSize = 1; RSize = 0; //ans初始化为n，因此不用再算第一层，算到第2层就可以结束了 while(nowdep &gt; 0)&#123; //上传标记 pos = (pos-1)/k; //计算左满k叉树，右满k叉树以及非满k叉树的size LSize = LSize * k + 1; RSize = RSize * k + 1; restSize = (n - 1 - num[nowdep-1])- (pos-num[nowdep-1]-1)*LSize - (num[nowdep]-pos)*RSize; ex ^= restSize; ans ^= (((pos-num[nowdep-1]-1)&amp;1)?1:0)*LSize; ans ^= (((num[nowdep]-pos)&amp;1)?1:0)*RSize; nowdep--; &#125; //最终结果异或上单独处理的子树 ans ^= ex; cout &lt;&lt; ans &lt;&lt; endl; &#125; &#125; return 0;&#125; C Color the chessboard解题：昨天想的没错，只要2 * 2的矩形满足，整个图就能满足，将各种2 * 2的矩形排列一下，你或许会发现，将R看做1，B看做0，所有答案一定满足2种情况之一：1.不考虑列的情况，每一行一定是01循环或10循环之一。2.不考虑行的情况，每一列一定是01循环或10循环之一。其次，只要满足上述两种情况之一，那么一定是一种答案。因此分2次暴力跑出能否满足上述2种情况之一，将两种情况的可能数相加。有2种情况可能会被重复计算，也就是行和列同时满足01循环或10循环的情况，单独跑出能否满足这种情况，能满足则减一。具体可以结合这篇文章一起理解，我的代码也是几乎照抄了一遍这篇文章的。。以下是AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;typedef long long ll;using namespace std;const ll mod = 998244353;int T,n,m;ll ans,ans1,ans2;int M[2000][2000];char C[2000][2000];bool flag;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; cin &gt;&gt; n &gt;&gt; m; for(int i = 1; i &lt;= n; ++i) for(int j = 1; j &lt;= m; ++j)&#123; cin &gt;&gt; C[i][j]; if(C[i][j] == 'R') M[i][j] = 1; if(C[i][j] == 'B') M[i][j] = 0; if(C[i][j] == '?') M[i][j] = -1; &#125; ans1 = 1; for(int i = 1; i &lt;= n; ++i)&#123; //cnt是每一行选择的可能性，显然总的可能性要相乘得出 ll cnt = 0; flag = true; for(int j = 1; j &lt;= m; ++j)&#123; if(j%2==1 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; if(j%2==0 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; flag = true; for(int j = 1; j &lt;= m; ++j)&#123; if(j%2==1 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; if(j%2==0 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; ans1 = (ans1*cnt)%mod; if(ans1 == 0) break; &#125; ans2 = 1; for(int j = 1; j &lt;= m; ++j)&#123; ll cnt = 0; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; if(i%2==1 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; if(i%2==0 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; if(i%2==1 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; if(i%2==0 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; &#125; if(flag) cnt++; ans2 = (ans2*cnt)%mod; if(ans2 == 0) break; &#125; ans = (ans1+ans2)%mod; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; for(int j = 1; j &lt;= m; ++j)&#123; if((i+j)%2==1 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; if((i+j)%2==0 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; &#125; if(!flag) break; &#125; if(flag) ans = (ans-1+mod)%mod; flag = true; for(int i = 1; i &lt;= n; ++i)&#123; for(int j = 1; j &lt;= m; ++j)&#123; if((i+j)%2==1 &amp;&amp; M[i][j] == 0)&#123;flag = false;break;&#125; if((i+j)%2==0 &amp;&amp; M[i][j] == 1)&#123;flag = false;break;&#125; &#125; if(!flag) break; &#125; if(flag) ans = (ans-1+mod)%mod; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 代码中的break都是用来剪枝的，剪枝以后变慢了，姑且是能懂了，不过总感觉有些不能释怀，比赛时真的能想通吗。。。 7/3补题小结今天暂时补到这了，感觉还是经验不够啊？？还是我太菜了这几题能看懂但总觉得比赛的时候想不到。]]></content>
      <categories>
        <category>ACM自闭日记</category>
      </categories>
      <tags>
        <tag>自闭</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图论最小生成树]]></title>
    <url>%2F2019%2F07%2F02%2FminTree%2F</url>
    <content type="text"><![CDATA[最小生成树本文会介绍两种用于获取最小生成树的算法，同样只给出用法不给出证明。 引入最小生成树通常用于解决形如以下的这种问题：给定若干个点和若干个边，保证这些边能将这些点全联通，试从这些边中选出部分边，使生成的树的边权之和最小。当然ACM的题通常都会有一个场景，比如有许多城镇，现已知这些城镇间的距离，要在这些城镇间修路，保证联通所有城镇的同时使得所修的路最短。 最小生成树算法下文会介绍两种算法Prim和Kruscal算法,这两种算法都会采用贪心的策略。 PrimPrim是一种以点为主体的贪心算法。下面简述算法的过程：1.在所有点中任取一点作为树的根，更新其他所有点到树的距离。2.在未被选取的点中，找到离树最近的点并选入树中，再次更新其他所有点到树的距离。3.重复第2步，直到所有点都被选入树中，Prim算法到此结束。点到树的距离是指点到树上任意一点的最短距离注意给出的图有多个最小生成树，根据选取的起点不同可能的到不同的最小生成树，但如果最小生成树唯一，那么起点的选取不会影响最终得到的最小生成树，所以放心大胆地去选取起点吧！ 下面给出prim算法主体的代码： 123456789101112131415161718192021222324void prim()&#123; //初始化，将1号点加入到生成树中 ans = 0; int cnt = 1; vis[1] = 1; for(int i = 1;i &lt;= N;++i) mndis[i]=dis[1][i]; while(cnt != N)&#123; int mn = inf,id; //找出所有点中距离生成树最近的点 for(int i = 1; i &lt;= N; i++)&#123; if(!vis[i] &amp;&amp; mndis[i] &lt; mn)&#123; mn = mndis[i]; id = i; &#125; &#125; //将找到的点加入生成树 vis[id] = 1; ans += mn; cnt++; //更新剩余点到树的距离 for(int i = 1; i &lt;= N; i++) mndis[i] = min(mndis[i],dis[id][i]); &#125;&#125; 本算法中采用邻接矩阵以及暴力遍历找最小值的方式实现，理论上可以用优先队列和邻接表实现。 同样给出例题：hdu1233以下是AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;const int maxn = 200;const int inf = 0x3f3f3f3f;using namespace std;int N,dis[maxn][maxn],vis[maxn],ans,mndis[maxn];void prim()&#123; //初始化，将1号点加入到生成树中 ans = 0; int cnt = 1; vis[1] = 1; for(int i = 1;i &lt;= N;++i) mndis[i]=dis[1][i]; while(cnt != N)&#123; int mn = inf,id; //找出所有点中距离生成树最近的点 for(int i = 1; i &lt;= N; i++)&#123; if(!vis[i] &amp;&amp; mndis[i] &lt; mn)&#123; mn = mndis[i]; id = i; &#125; &#125; //将找到的点加入生成树 vis[id] = 1; ans += mn; cnt++; //更新剩余点到树的距离 for(int i = 1; i &lt;= N; i++) mndis[i] = min(mndis[i],dis[id][i]); &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); while(cin &gt;&gt; N)&#123; if(!N) break; memset(dis,0,sizeof(dis)); memset(vis,0,sizeof(vis)); int T = N * (N - 1) / 2; while(T--)&#123; int a,b,c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; dis[a][b] = dis[b][a] = c; &#125; prim(); cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; KruscalKruscal是一种以边为主体的贪心算法，下面简述算法过程。1.从所有没有使用过的边中找出最短的一条边，标记为使用过了。2.如果边的两个端点不在一棵树中，那么将这条边加入到树中，否则不加入。3.重复1、2步直到所有点被联通（显然联通n个点需要n-1条边）。 找最短边的过程可以用优先队列实现，而判断端点是否在同一棵树中，可以用并查集实现，如果不会并查集，可以先阅读这篇文章，下面代码中的Find和Union函数毁在这篇文章中给出模版。下面给出Kruscal算法的主体代码： 12345678910111213141516171819void kruscal()&#123; int ans = 0,cnt = 0; //选取最短边直到没有边可以再选或者图已经联通 while(!Q.empty() &amp;&amp; cnt != M-1)&#123; edge temp = Q.top(); Q.pop(); int f = temp.from,t = temp.to,v = temp.val; //利用并查集判断是否在同一棵树中，如果不在则加入树中 if(Find(t)!=Find(f))&#123; Union(f,t); cnt++; ans+=v; &#125; &#125; //没有选取到M-1条边（M为点的数量），说明图不能联通 if(cnt != M-1) puts("?"); //图已联通，输出最小边权和 else printf("%d\n",ans);&#125; 同样给出例题：hdu1683AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;bits/stdc++.h&gt;const int maxn = 200;using namespace std;struct edge&#123; int from; int to; int val; edge(int a = 0,int b = 0,int c = 0)&#123;from=a;to=b;val=c;&#125; friend bool operator &gt; (edge a,edge b)&#123; return a.val &gt; b.val; &#125;&#125;;int N,M,father[maxn];priority_queue&lt; edge,vector&lt;edge&gt;,greater&lt;edge&gt; &gt; Q;int Find(int a)&#123; if(father[a]==a) return a; return father[a]=Find(father[a]);&#125;void Union(int a,int b)&#123; int f1=Find(a),f2=Find(b); father[f2] = f1;&#125;void init()&#123; for(int i = 1; i &lt;= M; ++i) father[i]=i; while(!Q.empty()) Q.pop();&#125;void kruscal()&#123; int ans = 0,cnt = 0; while(!Q.empty() &amp;&amp; cnt != M-1)&#123; edge temp = Q.top(); Q.pop(); int f = temp.from,t = temp.to,v = temp.val; if(Find(t)!=Find(f))&#123; Union(f,t); cnt++; ans+=v; &#125; &#125; if(cnt != M-1) puts("?"); else printf("%d\n",ans);&#125;int main()&#123; while(scanf("%d",&amp;N))&#123; if(N==0) break; scanf("%d",&amp;M); init(); for(int i = 0; i &lt; N; i++)&#123; int a,b,c; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); Q.push(edge(a,b,c)); &#125; if(N&lt;M-1)&#123;puts("?");continue;&#125; kruscal(); &#125; return 0;&#125; 后记以上就是两种最短路算法的实现过程了。后记不知道写啥了，就这样吧]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>贪心</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图论最短路]]></title>
    <url>%2F2019%2F07%2F01%2Fminpath%2F</url>
    <content type="text"><![CDATA[最短路算法本文将介绍几种用于解决最短路问题的算法，仅给出用法，不给出证明（因为不会证明）。 问题简述最短路问题：给出若干个点和若干个带有边权的边，要求找出从某点到某点的最短路径。 邻接表简单来说就是为每一个点建立一个边链表记录了与这个点所连的所有边。实现方法很多，本文用vector实现。 123//edge为边的结构体，maxn为点的总数，E[i]中记录了与点i相连的所有边//如果题目为无向图，注意要push_back两个方向的边vector&lt;edge&gt; E[maxn]; 单源最短路即仅要求求出从一个点到其他所有点（某一点）的最短距离的问题。 dijkstra我将dijkstra认识为一个贪心的BFS过程，首先，我们需要用到两个结构体。1.边，这个结构体必须包含目标点，边权，可以包含出发点（也可以不包含）。 12345struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;; 2.状态，这个结构体需要包含当前所在的位置（影响联通路径的状态）和已经走过的距离，同时重载&gt;号，比较的依据为走过的距离，重载&gt;号是为了能够使用priority_queue。 123456789struct nod&#123; int pos; int d; nod(int a = 0,int b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;; 有了这两个结构体之后，我们就能开始dijkstra的主体了，简单地描述一下dijkstra的过程。1.录入数据。2.创建一个nod的优先队列，从小的开始出队列。3.将初始态（初始位置，经过的距离为0）push进优先队列，设初始最短路径都为无穷大。4.弹出队首元素，更新与队首位置相连的所有点，如果能够更新（距离变小了）某个点，则将这个点push进队列。5.重复第4步直到队列为空，这意味着没有点能够再次被更新了，dijkstra算法到此结束。下面给出算法主体代码： 12345678910111213141516171819202122232425void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; //优先队列，从较小的开始出 Q.push(nod(N,0));//初始态,N为出发点 //类似BFS过程 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; //若能更新，则更新并把更新的点push进队列 if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125; 需要注意的是，dijkstra算法并不能判断负环，因此当题目中出现负边时慎用。 这里给出一道例题：POJ2387AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int maxn = 1000+50;const int inf = 0x3f3f3f3f;using namespace std;struct edge&#123; int to; int val; edge(int a = 0,int b = 0)&#123;to=a;val=b;&#125;&#125;;struct nod&#123; int pos; int d; nod(int a = 0,int b = 0)&#123;pos=a;d=b;&#125; //优先队列重载大于符号 friend bool operator &gt; (nod a, nod b)&#123; return a.d&gt;b.d; &#125;&#125;;//邻接表vector&lt;edge&gt; E[maxn];int T,N,dis[maxn];//dis[i]为从X到i的最短距离，可以根据情况扩充为d[i][j][k].....//加边，无向图时添加两条边void add(int f,int t,int v)&#123; E[f].push_back(edge(t,v)); E[t].push_back(edge(f,v)); return;&#125;void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; Q.push(nod(N,0));//初始态,N为出发点 while(!Q.empty())&#123; nod temp = Q.top(); int pos = temp.pos; int d = temp.d; Q.pop(); if(d &gt; dis[pos]) continue; dis[pos]=d; //遍历邻接表更新相邻点的最短距离 for(int i = 0; i &lt; E[pos].size(); ++i)&#123; int to = E[pos][i].to; int val = E[pos][i].val; int nd = d + val; if(nd &lt; dis[to])&#123; dis[to] = nd; Q.push(nod(to,nd)); &#125; &#125; &#125;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T &gt;&gt; N; while(T--)&#123; int from,to,val; cin &gt;&gt; from &gt;&gt; to &gt;&gt; val; add(from,to,val); &#125; dij(); cout &lt;&lt; dis[1] &lt;&lt; endl; return 0;&#125; 以下内容较难，可跳过此外，虽然在上题中dis[i]表示从起点到i点的最短距离，但实际上这个dis数组的下标代表的是一个状态，本题中状态只有所在的点，因此dis数组也只需要一个下标，dis数组的下标可以根据需要扩充。例如在hdu6071中，dis[i][j]表示的就是跑到了i点且跑过的距离模mod后为j的一个状态，我们也可以将每一种状态抽象为不同的点。同样给出AC代码（本题较难，可能另开文章单独解释） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;bits/stdc++.h&gt;typedef long long ll;const int maxn = 6e5+20;const int mod = 998244353;const int inf = 0x3f3f3f3f;const ll llinf = 0x3f3f3f3f3f3f3f3f;using namespace std;struct edge&#123; ll from; ll to; ll val; edge(ll a = 0,ll b = 0,ll c = 0)&#123;from=a;to=b;val=c;&#125;&#125;;struct nod&#123; ll pos; ll d; nod(ll a=0,ll b=0)&#123;pos = a;d = b;&#125; friend bool operator &gt; (nod a,nod b)&#123; return a.d &gt; b.d; &#125;&#125;;ll T,k,d12,d23,d34,d41,m,dis[5][maxn];vector&lt;edge&gt; E[5];void dij()&#123; memset(dis,inf,sizeof(dis)); priority_queue&lt; nod,vector&lt;nod&gt;,greater&lt;nod&gt; &gt; Q; Q.push(nod(2,0)); while(!Q.empty())&#123; nod t = Q.top(); Q.pop(); if(t.d &gt; dis[t.pos][t.d%m]) continue; for(vector&lt;edge&gt;::iterator it = E[t.pos].begin(); it != E[t.pos].end(); it++)&#123; ll nd = t.d+(*it).val; if(nd &lt; dis[(*it).to][nd%m])&#123; dis[(*it).to][nd%m] = nd; Q.push(nod((*it).to,nd)); &#125; &#125; &#125;｝int main()&#123; ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; T; while(T--)&#123; for(int i = 1; i &lt;= 4; ++i) E[i].clear(); cin &gt;&gt; k &gt;&gt; d12 &gt;&gt; d23 &gt;&gt; d34 &gt;&gt; d41; E[1].push_back(edge(1,2,d12));E[2].push_back(edge(2,1,d12)); E[2].push_back(edge(2,3,d23));E[3].push_back(edge(3,2,d23)); E[3].push_back(edge(3,4,d34));E[4].push_back(edge(4,3,d34)); E[4].push_back(edge(4,1,d41));E[1].push_back(edge(1,4,d41)); m = 2 * min(d12,d23); dij(); ll ans = llinf; for(int i = 0; i &lt; m; i++)&#123; if(dis[2][i] &gt;= k) ans = min(ans,dis[2][i]); else&#123; ll delt = k - dis[2][i]; dis[2][i] += (delt/m+(delt%m?1:0))*m; ans=min(ans,dis[2][i]); &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125; 至此，dijkstra算法的介绍告一段落。 SPFA(待补)同样为单源最短路算法，相较于dijkstra的优势是可以判断负环，劣势是比较慢。是优化版的Bellman-Ford算法。模版及例题待补 Bellman-Ford他死了。 多源最短路给定若干点以及点之间的距离(边)，要求求出任意两点间的最短距离。 Floyed算法又名Warshall算法。暴力遍历O($n^3$)次点，对于任意两点i,j，如果以k为桥梁能使i ~ j的距离变短，那么更新i ~ j的距离。由于算法特性，只能用邻接矩阵来存图。算法主体代码： 1234for(int k = 1; k &lt;= n; k++)for(int i = 1; i &lt;= n; i++)for(int j = 1; j &lt;= n; j++)w[i][j] = min(w[i][j], w[i][k] + w[k][j]); 给出一道例题：poj2139AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;typedef long long ll;const int inf = 0x3f3f3f3f;using namespace std;int w[303][303], tmp[303];int main()&#123; int n, m, t; scanf("%d %d", &amp;n, &amp;m); memset(w, inf, sizeof(w)); for(int i = 1; i &lt;= n; i++) w[i][i] = 0; while(m--) &#123; cin &gt;&gt; t; for(int i = 0; i &lt; t; i++) &#123; cin &gt;&gt; tmp[i]; &#125; for(int i = 0; i &lt; t; i++) for(int j = 0; j &lt; i; j++) w[tmp[i]][tmp[j]] = w[tmp[j]][tmp[i]] = 1; &#125; for(int k = 1; k &lt;= n; k++) for(int i = 1; i &lt;= n; i++) for(int j = 1; j &lt;= n; j++) w[i][j] = min(w[i][j], w[i][k] + w[k][j]); double ans = inf; for(int i = 1; i &lt;= n; i++) &#123; int sum = 0; for(int j = 1; j &lt;= n; j++) sum += w[i][j]; ans = min(ans, sum * 100 * 1.0/ (n - 1)); &#125; printf("%d\n", (int)ans); return 0;&#125; 非常简单的一个算法，但是他的空间复杂度和时间复杂度都过高，并不常用。 后记好吧，从篇幅上可以看出，最短路算法中最常用，最强大的算法就是dijkstra了，他的变形也有很多，需要好好掌握哦！本文中一些STL会在将来的文章里补上用法。emmm可能会吧]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>贪心</tag>
        <tag>最短路问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Trie]]></title>
    <url>%2F2019%2F07%2F01%2FTrie%2F</url>
    <content type="text"><![CDATA[TrieTrie，也叫做字典树，是一种树形结构，可以高效的存储字符串和查询字符串。 Trie比较简单，这里只做简单的介绍，并给出例题和模版。例题：hdu1251题意简述：给定一系列字符串，再给出多个前缀，输出这些前缀在多少个字符串中出现过。 Trie的组成这种树形结构只有一个根节点，根节点没有意义（虚节点）。网上很多文章中将每一个节点视为一个字符，但事实并非如此，在Trie中，每一条边代表了一个字符，而从根节点走到某一节点路径上所有字符组成的字符串，则为该节点所代表的字符串。为了方便讲解，这里直接给出Trie节点的定义： 123456789101112struct trie&#123; trie *nxt[26]; //子节点的指针数组，此处26为字符集的大小，可以根据需求修改 int cnt; //此题用于统计前缀，根据需求修改 //初始化 trie() &#123; cnt = 1; //初始化所有nxt为NULL memset(nxt,NULL,sizeof(nxt)); &#125;&#125;; 我们可以认为，从一个节点p到节点p-&gt;nxt[id]的边所代表的字符即为id所映射的字符。以a ~ z映射到0 ~ 25为例，root-&gt;nxt[0]-&gt;nxt[1]-&gt;nxt[2]节点所代表的的字符串就是abc。 Trie的构建与线段树不同，Trie并不是输入完所有字符串后统一构建的(当然你想这么做也是可以的，但是会MLE),Trie的构建通常是输入一个字符串就插入一个字符串，插入的过程很简单，如果nxt[id]已经存在就沿着走，如果不存在就新建一个。以下为代码实现： 12345678910111213141516171819202122void Insert(char *s)&#123; trie *p = root; i = 0; //遍历字符串 while(s[i])&#123; id = s[i] - 'a'; //如果存在，就沿着走，并操作路径上的统计量（此处用于统计前缀） if(p-&gt;nxt[id]) &#123; p = p-&gt;nxt[id]; p -&gt; cnt++; &#125; //如果不存在，就新建，当然也要走过去 else &#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; i++; &#125;&#125; Trie的查询字典树的查询视题意而定，在本次例题中，为统计前缀出现的次数。根据字符串沿着树遍历即可，若遇到nxt[id]==NULL的情况，说明没找到，直接返回0。以下为代码实现 12345678910111213141516int query(char* s)&#123; trie *p = root; i = 0; while(s[i]) &#123; id = s[i] - 'a'; //找得到就沿着走 if(p -&gt; nxt[id]) p = p -&gt; nxt[id]; //找不到直接返回0 else return 0; i++; &#125; //若找到了，返回最终节点的cnt值 return p -&gt; cnt;&#125; Trie的删除递归删除即可 123456void Free(trie *p)&#123; for(i = 0; i &lt; 26; ++i) if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); delete(p); p = NULL;&#125; 例题+模版回到例题的解答，解题过程非常简单毕竟是模版题1.根据给出的字符串建立Trie2.根据前缀在Trie上遍历 AC代码（模版）：本题用C++提交的，用G++提交有惊喜哦本题G++提交会MLE，请用C++提交 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;typedef unsigned long long ull;const int maxn = 11;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[26]; int cnt; trie() &#123; cnt = 1; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root;int i,id;char S[maxn],s1[maxn];void Insert(char *s)&#123; trie *p = root; i = 0; while(s[i])&#123; id = s[i] - 'a'; if(p-&gt;nxt[id]) &#123; p = p-&gt;nxt[id]; p -&gt; cnt++; &#125; else &#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; i++; &#125;&#125;int query(char* s)&#123; trie *p = root; i = 0; while(s[i]) &#123; id = s[i] - 'a'; if(p -&gt; nxt[id]) p = p -&gt; nxt[id]; else return 0; i++; &#125; return p -&gt; cnt;&#125;void Free(trie *p)&#123; for(i = 0; i &lt; 26; ++i) if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); delete(p); p = NULL;&#125;int main()&#123; root = new trie; while(scanf("%s",S))&#123; Insert(S); cin.get(); if(cin.peek() == '\n') break; &#125; while(scanf("%s",s1) != EOF)&#123; printf("%d\n",query(s1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>字符串</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AC自动机]]></title>
    <url>%2F2019%2F07%2F01%2FACautoman%2F</url>
    <content type="text"><![CDATA[AC自动机AC自动机，用于多模字符串匹配，类似KMP+Trie。最近越来越觉得AC自动机又神奇有有意思，顶上来再看看。 一种最常见的题目如下（裸题模版）题意简述：首先输入多个单词（模式串），接着输入一串目标字符串，输出有多少个模式串在目标字符串中出现过。解题步骤：1.根据给出的模式串构造一个Trie树。2.在Trie树上构造fail指针（构造Trie图）。3.将目标字符串在Trie图上进行匹配。 2019-07-07补充几个AC自动机的特点：1.将目标串在由模式串组成组成的AC自动机上跑一遍以后，只要任一节点所代表的字符串是目标串的子串，它就会被遍历到。2.即使节点不是字符串的结束节点，它也会被遍历到，且在目标串中出现几次就会被遍历到几次，如果希望不要重复遍历要打上标记。3.以上两点都是由fail指针的特点和匹配过程导出的。4.通常AC自动机的题都是构造题，我们需要把问题转换成多模子串匹配问题。 Fail指针Fail指针的构造过程：1.用BFS的顺序逐层向下构造Fail指针。2.当一个节点的父亲指针为Root时，将Fail指针指向Root。3.当要获取一个节点（父节点不为Root）的Fail指针时，从其父亲指针的Fail指针开始查找与自己同名的子节点，若找到，则这个节点的Fail指针指向该与自己同名的子节点；若找不到，则沿着Fail指针继续寻找直到找到或直到指向Root时仍找不到。若指向根节点时仍然找不到，及当前节点没有Fail指针，将Fail指针指向Root。具体代码如下： 12345678910111213141516171819202122232425262728293031323334void getFail()&#123; queue&lt;trie*&gt; q; //用于BFS q.push(root); trie *temp,*p; while(!q.empty())&#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 26; ++i)&#123; if(p -&gt; nxt[i])&#123; //父节点为root的节点fail指针指向root if(p == root) p -&gt; nxt[i] -&gt; fail = root; else&#123; //从父节点的fail指针开始查找 temp = p -&gt; fail; //当temp为NULL时即没有找到同名的子节点 while(temp)&#123; //找到了与自己同名的子节点，则让当前节点的fail指向该子节点，同时结束循环 if(temp -&gt; nxt[i])&#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; //沿着fail指针继续查找 temp = temp -&gt; fail; &#125; //temp为NULL，即没有找到同名的子节点，将fail指针指向root if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; //bfs q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125; Fail指针具有的特点：1.从任意节点沿着fail指针遍历，总能回到root节点。2.一个节点的fail指针指向的节点所代表的字符串，为当前节点字符串的某一后缀，因此当匹配时匹配到某一节点时，这一节点fail指针所指向的字符串也一定出现过了，所以在匹配过程中每匹配一个字符，要沿着fail指针跳回root（例如当匹配到abcd时，bcd,cd,d都一定已经出现过了）。3.这个性质与KMP中的next数组很想，可以结合理解。下图是一张构建好的fail指针的图： 查询过程查询步骤：1.如果当前字符匹配，则沿着nxt[id]向下走；如果当前字符不匹配，则沿着fail指针查找nxt[id]直到找到或指向root。2.每匹配完一个字符，沿着fail指针跳回root同时统计路径上出现的单词数。3.将匹配过的模式串打上标记避免重复统计。具体代码如下： 12345678910111213141516171819202122232425int query(char* s)&#123; int i = 0,res = 0; trie *p = root; trie *temp; //遍历字符串s while(s[i])&#123; //26个小写字母映射到0~25 int id = s[i] - 'a'; //若没有找到nxt[id]且当前指针没有指向root（root的fail指针为NULL），则沿着fail指针遍历直到找到或指向root while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; //若p==NULL，说明最终都没有找到，让p指向root if(p == NULL) p = root; //从p开始跳fail指针统计路径上的单词数 temp = p; while(temp != root &amp;&amp; temp -&gt; flag != 0)&#123; res += temp -&gt; flag; //统计后打上标记（清零单词数量） temp -&gt; flag = 0; temp = temp -&gt; fail; &#125; i++; &#125; return res;&#125; 例题+模版hdu2222题意简述：首先输入多个单词（模式串），接着输入一个目标字符串，输出有多少个模式串在目标字符串中出现过。以下为AC代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;bits/stdc++.h&gt;typedef unsigned long long ull;const int P = 1e9+7;const int maxn = 5e5 + 200;const int inf = 0x3f3f3f3f;using namespace std;struct trie&#123; trie *nxt[26]; trie *fail; int cnt; //计算前缀时可用，本题无用 int flag; //记录当前节点结束的字符串个数 trie()&#123; cnt = 1; flag = 0; fail = NULL; memset(nxt,NULL,sizeof(nxt)); &#125;&#125;;trie *root;int T,N,Q;char S[maxn],s1[maxn],s2[maxn];void Insert(char *s)&#123; trie *p = root; int len = strlen(s); for(int i = 0; i &lt; len; i++)&#123; int id = s[i] - 'a'; if(p-&gt;nxt[id] != NULL)&#123; p = p-&gt;nxt[id]; p -&gt; cnt++; &#125; else&#123; p -&gt; nxt[id] = new trie; p = p -&gt; nxt[id]; &#125; &#125; p -&gt; flag++;&#125;void getFail()&#123; queue&lt;trie*&gt; q; q.push(root); trie *temp,*p; while(!q.empty())&#123; p = q.front(); q.pop(); for(int i = 0; i &lt; 26; ++i)&#123; if(p -&gt; nxt[i])&#123; if(p == root) p -&gt; nxt[i] -&gt; fail = root; else&#123; temp = p -&gt; fail; while(temp)&#123; if(temp -&gt; nxt[i])&#123; p -&gt; nxt[i] -&gt; fail = temp -&gt; nxt[i]; break; &#125; temp = temp -&gt; fail; &#125; if(!temp) p -&gt; nxt[i] -&gt; fail = root; &#125; q.push(p -&gt; nxt[i]); &#125; &#125; &#125;&#125;int query(char* s)&#123; int i = 0,res = 0; trie *p = root; trie *temp; while(s[i])&#123; int id = s[i] - 'a'; while(!p -&gt; nxt[id] &amp;&amp; p != root) p = p -&gt; fail; p = p -&gt; nxt[id]; if(p == NULL) p = root; temp = p; while(temp != root &amp;&amp; temp -&gt; flag != 0)&#123; res += temp -&gt; flag; temp -&gt; flag = 0; temp = temp -&gt; fail; &#125; i++; &#125; return res;&#125;//递归释放Trievoid Free(trie *p)&#123; for(int i = 0; i &lt; 26; ++i)&#123; if(p -&gt; nxt[i] != NULL) Free(p-&gt;nxt[i]); &#125; delete(p); p = NULL;&#125;int main()&#123; scanf("%d",&amp;T); while(T--)&#123; root = new trie; scanf("%d",&amp;N); while(N--) &#123; scanf("%s",S); Insert(S); &#125; getFail(); scanf("%s",s1); printf("%d\n",query(s1)); Free(root); &#125;&#125;]]></content>
      <categories>
        <category>ACM算法基础</category>
      </categories>
      <tags>
        <tag>kmp</tag>
        <tag>Trie</tag>
        <tag>AC自动机</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
</search>
